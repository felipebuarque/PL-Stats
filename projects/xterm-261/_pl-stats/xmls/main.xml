<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="main.c"><comment type="block">/* $XTermId: main.c,v 1.618 2010/06/20 21:11:51 tom Exp $ */</comment>

<comment type="block">/*
 *				 W A R N I N G
 *
 * If you think you know what all of this code is doing, you are
 * probably very mistaken.  There be serious and nasty dragons here.
 *
 * This client is *not* to be taken as an example of how to write X
 * Toolkit applications.  It is in need of a substantial rewrite,
 * ideally to create a generic tty widget with several different parsing
 * widgets so that you can plug 'em together any way you want.  Don't
 * hold your breath, though....
 */</comment>

<comment type="block">/***********************************************************

Copyright 2002-2009,2010 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

Copyright 1987, 1988  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987, 1988 by Digital Equipment Corporation, Maynard.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be used in
advertising or publicity pertaining to distribution of the software
without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/</comment>

<comment type="block">/* main.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RES_OFFSET</name>(field)	XtOffsetOf(XTERM_RESOURCE, field)</cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlocale.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW3D</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAWPLUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TOOLBAR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;menu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xstrings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xtermcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm_io.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;charclass.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__osf__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_SIGNALS</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pty.h&gt;</cpp:file></cpp:include>		<comment type="block">/* openpty() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sgi</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>		<comment type="block">/* initgroups() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ISPTS_FLAG</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>IsPts</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_POSIX_SIGNALS</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>ISC22</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>ISC30</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* older SYSV systems cannot ignore SIGHUP.
   Shell hangs, or you get extra shells, or something like that */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_SIGHUP</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sony</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>bsd43</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>KANJI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>KANJI</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>linux</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_SIGNALS</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP</name></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GLIBC__</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>__GLIBC__</name> &gt; 2) || ((<name>__GLIBC__</name> == 2) &amp;&amp; (<name>__GLIBC_MINOR__</name> &gt;= 1))</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_SIGNALS</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__CYGWIN__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SCO__</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_SVID3</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_SVID3</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TTY_GROUP</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TTY_GROUP_NAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TTY_GROUP_NAME</name> "tty"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Lynx</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BSDLY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BSDLY</name>	0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VTDLY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>VTDLY</name>	0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FFDLY</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FFDLY</name>	0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SYSV</name></cpp:ifdef>			<comment type="block">/* { */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_USG_PTYS</name></cpp:ifdef>		<comment type="block">/* AT&amp;T SYSV has no ptyio.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stropts.h&gt;</cpp:file></cpp:include>	<comment type="block">/* for I_PUSH */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>		<comment type="block">/* for POLLIN */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_USG_PTYS */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_SIGNALS</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>USE_SYSV_PGRP</name></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TIOCSWINSZ</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__UNIXWARE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_ENVVARS</name></cpp:define>	<comment type="block">/* COLUMNS/LINES vs. TERMCAP */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * now get system-specific includes
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CRAY</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>macII</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ttychars.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_SYSV_ENVVARS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIOCLEX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIONCLEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>setpgrp2</name> <name>setpgrp</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgtty.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__hpux</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptyio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __hpux */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__osf__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>USE_SYSV_PGRP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>setpgrp</name> <name>setpgid</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sgi</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysmacros.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __sgi */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sun</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/strredir.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>	<comment type="block">/* } !SYSV { */</comment>	<comment type="block">/* BSD systems */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__QNX__</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__QNXNTO__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyslot</name>() 1</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:define>
<function><type><name>extern</name> <name>__inline__</name>
<name>int</name></type>
<name>ttyslot</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <return>return <expr>1</expr>;</return>			<comment type="block">/* yuk */</comment>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTERIX</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>setpgrp</name> <name>setpgid</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>linux</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_POSIX_TERMIOS</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ANY_SYSV_TERMIO</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgtty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Lynx</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;resource.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__INTERIX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !VMS */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !linux */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __QNX__ */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } !SYSV */</comment>

<comment type="block">/* Xpoll.h and &lt;sys/param.h&gt; on glibc 2.1 systems have colliding NBBY's */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; ((<name>__GLIBC__</name> &gt; 2) || ((<name>__GLIBC__</name> == 2) &amp;&amp; (<name>__GLIBC_MINOR__</name> &gt;= 1)))</expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NOFILE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NOFILE</name> <name>OPEN_MAX</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>!(<call><name>defined</name><argument_list>(<argument><expr><name>VMS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>Lynx</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>		<comment type="block">/* for NOFILE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BSD</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>BSD</name> &gt;= 199103)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__hpux</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __hpux */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>apollo</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> == 10) &amp;&amp; (<name>OSMINORVERSION</name> &lt; 4)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyslot</name>() 1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* apollo */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTMPX_FOR_UTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UTMP_STR</name> <name>utmpx</name></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UTMP_STR</name> <name>utmp</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utempter.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTMPX_FOR_UTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utmpx.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_endutent</name>  <name>endutxent</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_getutid</name>   <name>getutxid</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_pututline</name> <name>pututxline</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_setutent</name>  <name>setutxent</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_updwtmp</name>   <name>updwtmpx</name></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utmp.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_CRAY</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &lt; 8)</expr></cpp:if>
<decl_stmt><decl><type><name>extern</name> struct <name>utmp</name> *<name>getutid</name></type> <name>__</name>((<type>struct</type> <name>utmp</name> * <name>_Id</name>)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_endutent</name>  <name>endutent</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_getutid</name>   <name>getutid</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_pututline</name> <name>pututline</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_setutent</name>  <name>setutent</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>call_updwtmp</name>   <name>updwtmp</name></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LASTLOG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LASTLOG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lastlog.h&gt;</cpp:file></cpp:include>		<comment type="block">/* caution: glibc includes utmp.h here */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_LASTLOGX</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_NETBSD_SOURCE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>_PATH_LASTLOGX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_LASTLOGX</name> 1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>  <name>PUCC_PTYD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;local/openpty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PUCC_PTYD */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util.h&gt;</cpp:file></cpp:include>		<comment type="block">/* openpty() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libutil.h&gt;</cpp:file></cpp:include>		<comment type="block">/* openpty() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UTMP_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UTMP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UTMP_FILENAME</name> <name>UTMP_FILE</name></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_UTMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UTMP_FILENAME</name> <name>_PATH_UTMP</name></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UTMP_FILENAME</name> "/etc/utmp"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LASTLOG_FILENAME</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_PATH_LASTLOG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>LASTLOG_FILENAME</name> <name>_PATH_LASTLOG</name></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>LASTLOG_FILENAME</name> "/usr/adm/lastlog"</cpp:define>	<comment type="block">/* only on BSD systems */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WTMP_FILENAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WTMP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP_FILENAME</name> <name>WTMP_FILE</name></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PATH_WTMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP_FILENAME</name> <name>_PATH_WTMP</name></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP_FILENAME</name> "/etc/wtmp"</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>WTMP_FILENAME</name> "/usr/adm/wtmp"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || (<call><name>defined</name><argument_list>(<argument><expr><name>ISC</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SIGTSTP</name></cpp:undef>			<comment type="block">/* defined, but not the BSD way */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGTSTP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__UNIXWARE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECHOKE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECHOCTL</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_TTYDEFAULTS_H</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>CEOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ttydefaults.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>X_NOT_POSIX</name></cpp:ifdef>
<function_decl><type><name>extern</name> <name>long</name></type> <name>lseek</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USG</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>extern</name> <name>unsigned</name></type> <name>sleep</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>extern</name> <name>void</name></type> <name>sleep</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>extern</name> <name>char</name> *</type><name>ttyname</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DECL_PTSNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>extern</name> <name>char</name> *</type><name>ptsname</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
<function_decl><type><name>static</name> <name>SIGNAL_T</name></type> <name>reapchild</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param> <comment type="block">/* n */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>spawnXTerm</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type></decl></param> <comment type="block">/* xw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>remove_termcap_entry</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PTY_SEARCH</name></cpp:ifdef>
<function_decl><type><name>static</name> <name>int</name></type> <name>pty_search</name><parameter_list>(<param><decl><type><name>int</name> *</type></decl></param> <comment type="block">/* pty */</comment> )</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! VMS */</comment>

<function_decl><type><name>static</name> <name>int</name></type> <name>get_pty</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>, <param><decl><type><name>char</name> *</type><name>from</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>resize_termcap</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>set_owner</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>, <param><decl><type><name>uid_t</name></type> <name>uid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>, <param><decl><type><name>mode_t</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>added_utmp_entry</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_POSIX_SAVED_IDS</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>uid_t</name></type> <name>save_euid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>gid_t</name></type> <name>save_egid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>static</name> <name>uid_t</name></type> <name>save_ruid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>gid_t</name></type> <name>save_rgid</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>static</name> <name>int</name></type> <name>really_get_pty</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>, <param><decl><type><name>char</name> *</type><name>from</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>xterm_exiting</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>explicit_shname</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Ordinarily it should be okay to omit the assignment in the following
** statement. Apparently the c89 compiler on AIX 4.1.3 has a bug, or does
** it? Without the assignment though the compiler will init command_to_exec
** to 0xffffffff instead of NULL; and subsequent usage, e.g. in spawnXTerm() to
** SEGV.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>char</name> **</type><name>command_to_exec</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>char</name> **</type><name>command_to_exec_with_luit</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>TERMCAP_ERASE</name> "kb"</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>VAL_INITIAL_ERASE</name> <name>A2E</name>(8)</cpp:define>

<comment type="block">/* choose a nice default value for speed - if we make it too low, users who
 * mistakenly use $TERM set to vt100 will get padding delays.  Setting it to a
 * higher value is not useful since legacy applications (termcap) that care
 * about padding generally store the code in a short, which does not have
 * enough bits for the extended values.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>B38400</name></cpp:ifdef>			<comment type="block">/* everyone should define this */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>VAL_LINE_SPEED</name> <name>B38400</name></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* ...but xterm's used this for a long time */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>VAL_LINE_SPEED</name> <name>B9600</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Allow use of system default characters if defined and reasonable.
 * These are based on the BSD ttydefaults.h
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CBRK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CBRK</name>     0xff</cpp:define>		<comment type="block">/* was 0 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CDISCARD</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CDISCARD</name> <name>CONTROL</name>('O')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CDSUSP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CDSUSP</name>   <name>CONTROL</name>('Y')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CEOF</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CEOF</name>     <name>CONTROL</name>('D')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CEOL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CEOL</name>	 0xff</cpp:define>		<comment type="block">/* was 0 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CERASE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CERASE</name>   0177</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CERASE2</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>CERASE2</name>  <name>CONTROL</name>('H')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CFLUSH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CFLUSH</name>   <name>CONTROL</name>('O')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CINTR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CINTR</name>    <name>CONTROL</name>('C')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CKILL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CKILL</name>	 <name>CONTROL</name>('U')</cpp:define>	<comment type="block">/* was '@' */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLNEXT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CLNEXT</name>   <name>CONTROL</name>('V')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CNUL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CNUL</name>     0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CQUIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CQUIT</name>    <name>CONTROL</name>('\\')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CRPRNT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CRPRNT</name>   <name>CONTROL</name>('R')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CREPRINT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CREPRINT</name> <name>CRPRNT</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSTART</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSTART</name>   <name>CONTROL</name>('Q')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSTATUS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>CSTATUS</name>  <name>CONTROL</name>('T')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSTOP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSTOP</name>    <name>CONTROL</name>('S')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSUSP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSUSP</name>    <name>CONTROL</name>('Z')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSWTCH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSWTCH</name>   0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CWERASE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CWERASE</name>  <name>CONTROL</name>('W')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ANY_SYSV_TERMIO</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TERMIO_STRUCT</name> struct termio</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttySetAttr</name>(fd, datap) ioctl(fd, TCSETA, datap)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyGetAttr</name>(fd, datap) ioctl(fd, TCGETA, datap)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyFlush</name>(fd)          ioctl(fd, TCFLSH, 1)</cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_POSIX_TERMIOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TERMIO_STRUCT</name> struct termios</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttySetAttr</name>(fd, datap) tcsetattr(fd, TCSANOW, datap)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyGetAttr</name>(fd, datap) tcgetattr(fd, datap)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>ttyFlush</name>(fd)          tcflush(fd, TCOFLUSH)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_ANY_SYSV_TERMIO */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
<comment type="block">/* The following structures are initialized in main() in order
** to eliminate any assumptions about the internal order of their
** contents.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>TERMIO_STRUCT</name></type> <name>d_tio</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> struct <name>ltchars</name></type> <name>d_ltc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_LTCHARS */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>int</name></type> <name>d_lmode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCLSET */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
<decl_stmt><decl><type><name>static</name> struct <name>sgttyb</name></type> <name>d_sg</name> =<init>
<expr><block>{
    <expr>0</expr>, <expr>0</expr>, <expr>0177</expr>, <expr><name>CKILL</name></expr>, <expr>(<name>EVENP</name> | <name>ODDP</name> | <name>ECHO</name> | <name>XTABS</name> | <name>CRMOD</name>)</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> struct <name>tchars</name></type> <name>d_tc</name> =<init>
<expr><block>{
    <expr><name>CINTR</name></expr>, <expr><name>CQUIT</name></expr>, <expr><name>CSTART</name></expr>,
    <expr><name>CSTOP</name></expr>, <expr><name>CEOF</name></expr>, <expr><name>CBRK</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> struct <name>ltchars</name></type> <name>d_ltc</name> =<init>
<expr><block>{
    <expr><name>CSUSP</name></expr>, <expr><name>CDSUSP</name></expr>, <expr><name>CRPRNT</name></expr>,
    <expr><name>CFLUSH</name></expr>, <expr><name>CWERASE</name></expr>, <expr><name>CLNEXT</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>d_disipline</name> =<init> <expr><name>NTTYDISC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>long</name> <name>int</name></type> <name>d_lmode</name> =<init> <expr><name>LCRTBS</name> | <name>LCRTERA</name> | <name>LCRTKIL</name> | <name>LCTLECH</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>long</name> <name>int</name></type> <name>d_jmode</name> =<init> <expr><name>KM_SYSSJIS</name> | <name>KM_ASCII</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> struct <name>jtchars</name></type> <name>d_jtc</name> =<init>
<expr><block>{
    <expr>'J'</expr>, <expr>'B'</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! VMS */</comment>

<comment type="block">/*
 * SYSV has the termio.c_cc[V] and ltchars; BSD has tchars and ltchars;
 * SVR4 has only termio.c_cc, but it includes everything from ltchars.
 * POSIX termios has termios.c_cc, which is similar to SVR4.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TTYMODE</name>(name) { name, sizeof(name)-1, 0, 0 }</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>Boolean</name></type> <name>override_tty_modes</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> struct</type> <name>_xttymodes</name> <block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></decl></decl_stmt> <expr_stmt><expr><name><name>ttymodelist</name><index>[]</index></name> = <block>{
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"intr"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_intrc ; VINTR */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_intr</name>	0</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"quit"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_quitc ; VQUIT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_quit</name>	1</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"erase"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* sgttyb.sg_erase ; VERASE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_erase</name>	2</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"kill"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* sgttyb.sg_kill ; VKILL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_kill</name>	3</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"eof"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_eofc ; VEOF */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_eof</name>	4</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"eol"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VEOL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_eol</name>	5</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"swtch"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VSWTCH */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_swtch</name>	6</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"start"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_startc ; VSTART */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_start</name>	7</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"stop"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_stopc ; VSTOP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_stop</name>	8</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"brk"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_brkc */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_brk</name>	9</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"susp"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_suspc ; VSUSP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_susp</name>	10</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"dsusp"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_dsuspc ; VDSUSP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_dsusp</name>	11</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"rprnt"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_rprntc ; VREPRINT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_rprnt</name>	12</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"flush"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_flushc ; VDISCARD */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_flush</name>	13</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"weras"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_werasc ; VWERASE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_weras</name>	14</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"lnext"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_lnextc ; VLNEXT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_lnext</name>	15</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"status"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VSTATUS */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_status</name>	16</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"erase2"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VERASE2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_erase2</name>	17</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"eol2"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VEOL2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_eol2</name>	18</cpp:define>
    <expr><block>{ <expr><name>NULL</name></expr>,	<expr>0</expr>, <expr>0</expr>, <expr>'\0'</expr> }</block></expr>,	<comment type="block">/* end of data */</comment>
}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>validTtyChar</name>(data, n) \
	    (known_ttyChars[n].sysMode &gt;= 0 &amp;&amp; \
	     known_ttyChars[n].sysMode &lt; (int) XtNumber(data.c_cc))</cpp:define>

<decl_stmt><decl><type><name>static</name> <name>const</name></type> <type>struct</type> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>sysMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>myMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>myDefault</name></decl>;</decl_stmt>
}</block></decl></decl_stmt> <expr_stmt><expr><name><name>known_ttyChars</name><index>[]</index></name> = <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VINTR</name></cpp:ifdef>
    <expr><block>{ <expr><name>VINTR</name></expr>,    <expr><name>XTTYMODE_intr</name></expr>,   <expr><name>CINTR</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VQUIT</name></cpp:ifdef>
    <expr><block>{ <expr><name>VQUIT</name></expr>,    <expr><name>XTTYMODE_quit</name></expr>,   <expr><name>CQUIT</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERASE</name></cpp:ifdef>
    <expr><block>{ <expr><name>VERASE</name></expr>,   <expr><name>XTTYMODE_erase</name></expr>,  <expr><name>CERASE</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VKILL</name></cpp:ifdef>
    <expr><block>{ <expr><name>VKILL</name></expr>,    <expr><name>XTTYMODE_kill</name></expr>,   <expr><name>CKILL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VEOF</name></cpp:ifdef>
    <expr><block>{ <expr><name>VEOF</name></expr>,     <expr><name>XTTYMODE_eof</name></expr>,    <expr><name>CEOF</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VEOL</name></cpp:ifdef>
    <expr><block>{ <expr><name>VEOL</name></expr>,     <expr><name>XTTYMODE_eol</name></expr>,    <expr><name>CEOL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VSWTCH</name></cpp:ifdef>
    <expr><block>{ <expr><name>VSWTCH</name></expr>,   <expr><name>XTTYMODE_swtch</name></expr>,  <expr><name>CNUL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VSTART</name></cpp:ifdef>
    <expr><block>{ <expr><name>VSTART</name></expr>,   <expr><name>XTTYMODE_start</name></expr>,  <expr><name>CSTART</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VSTOP</name></cpp:ifdef>
    <expr><block>{ <expr><name>VSTOP</name></expr>,    <expr><name>XTTYMODE_stop</name></expr>,   <expr><name>CSTOP</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VSUSP</name></cpp:ifdef>
    <expr><block>{ <expr><name>VSUSP</name></expr>,    <expr><name>XTTYMODE_susp</name></expr>,   <expr><name>CSUSP</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VDSUSP</name></cpp:ifdef>
    <expr><block>{ <expr><name>VDSUSP</name></expr>,   <expr><name>XTTYMODE_dsusp</name></expr>,  <expr><name>CDSUSP</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VREPRINT</name></cpp:ifdef>
    <expr><block>{ <expr><name>VREPRINT</name></expr>, <expr><name>XTTYMODE_rprnt</name></expr>,  <expr><name>CREPRINT</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VDISCARD</name></cpp:ifdef>
    <expr><block>{ <expr><name>VDISCARD</name></expr>, <expr><name>XTTYMODE_flush</name></expr>,  <expr><name>CDISCARD</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VWERASE</name></cpp:ifdef>
    <expr><block>{ <expr><name>VWERASE</name></expr>,  <expr><name>XTTYMODE_weras</name></expr>,  <expr><name>CWERASE</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VLNEXT</name></cpp:ifdef>
    <expr><block>{ <expr><name>VLNEXT</name></expr>,   <expr><name>XTTYMODE_lnext</name></expr>,  <expr><name>CLNEXT</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VSTATUS</name></cpp:ifdef>
    <expr><block>{ <expr><name>VSTATUS</name></expr>,  <expr><name>XTTYMODE_status</name></expr>, <expr><name>CSTATUS</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERASE2</name></cpp:ifdef>
    <expr><block>{ <expr><name>VERASE2</name></expr>,  <expr><name>XTTYMODE_erase2</name></expr>, <expr><name>CERASE2</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VEOL2</name></cpp:ifdef>
    <expr><block>{ <expr><name>VEOL2</name></expr>,    <expr><name>XTTYMODE_eol2</name></expr>,   <expr><name>CNUL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr>;</expr_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>TMODE</name>(ind,var) if (ttymodelist[ind].set) var = ttymodelist[ind].value</cpp:define>

<function_decl><type><name>static</name> <name>int</name></type> <name>parse_tty_modes</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type>struct <name>_xttymodes</name> *</type><name>modelist</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_UTEMPTER</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_UTMP</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>AIXV3</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &lt; 4)) &amp;&amp; !(<call><name>defined</name><argument_list>(<argument><expr><name>getutid</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<function_decl><type><name>extern</name> struct <name>utmp</name> *</type><name>getutid</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AIXV3 */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* not USE_SYSV_UTMP */</comment>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>etc_utmp</name><index>[]</index></name> =<init> <expr><name>UTMP_FILENAME</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LASTLOG</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>USE_STRUCT_LASTLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>etc_lastlog</name><index>[]</index></name> =<init> <expr><name>LASTLOG_FILENAME</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>USE_LASTLOG</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WTMP</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>etc_wtmp</name><index>[]</index></name> =<init> <expr><name>WTMP_FILENAME</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !USE_UTEMPTER */</comment>

<comment type="block">/*
 * Some people with 4.3bsd /bin/login seem to like to use login -p -f user
 * to implement xterm -ls.  They can turn on USE_LOGIN_DASH_P and turn off
 * WTMP and USE_LASTLOG.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LOGIN_DASH_P</name></cpp:ifdef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOGIN_FILENAME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>LOGIN_FILENAME</name> "/bin/login"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>bin_login</name><index>[]</index></name> =<init> <expr><name>LOGIN_FILENAME</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>passedPty</name><index>[<expr><name>PTYCHARLEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* name if pty if slave */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>Console</name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/SysUtil.h&gt;</cpp:file></cpp:include>	<comment type="block">/* XmuGetHostname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIT_CONSOLE_LEN</name>	12</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIT_CONSOLE</name> "MIT_CONSOLE_"</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>mit_console_name</name><index>[<expr>255 + <name>MIT_CONSOLE_LEN</name> + 1</expr>]</index></name> =<init> <expr><name>MIT_CONSOLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>Atom</name></type> <name>mit_console</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCCONS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_SYSV_UTMP</name></cpp:ifndef>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>tslot</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>
<decl_stmt><decl><type><name>static</name> <name>sigjmp_buf</name></type> <name>env</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>SetUtmpHost</name>(dst, screen) \
	{ \
	    char host[sizeof(dst) + 1]; \
	    strncpy(host, DisplayString(screen-&gt;display), sizeof(host)); \
	    TRACE(("DisplayString(%s)\n", host)); \
	    if (!resource.utmpDisplayId) { \
		char *endptr = strrchr(host, ':'); \
		if (endptr) { \
		    TRACE(("trimming display-id '%s'\n", host)); \
		    *endptr = '\0'; \
		} \
	    } \
	    strncpy(dst, host, sizeof(dst)); \
	}</cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_SYSLEN</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>SetUtmpSysLen</name>(utmp) 			   \
	{ \
	    utmp.ut_host[sizeof(utmp.ut_host)-1] = '\0'; \
	    utmp.ut_syslen = strlen(utmp.ut_host) + 1; \
	}</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* used by VT (charproc.c) */</comment>

<decl_stmt><decl><type><name>static</name> <name>XtResource</name></type> <name><name>application_resources</name><index>[]</index></name> =<init>
<expr><block>{
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr>"Name"</expr></argument>, <argument><expr><name>xterm_name</name></expr></argument>, <argument><expr><name>DFT_TERMTYPE</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"iconGeometry"</expr></argument>, <argument><expr>"IconGeometry"</expr></argument>, <argument><expr><name>icon_geometry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>XtCTitle</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNiconName</name></expr></argument>, <argument><expr><name>XtCIconName</name></expr></argument>, <argument><expr><name>icon_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"termName"</expr></argument>, <argument><expr>"TermName"</expr></argument>, <argument><expr><name>term_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"ttyModes"</expr></argument>, <argument><expr>"TtyModes"</expr></argument>, <argument><expr><name>tty_modes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"hold"</expr></argument>, <argument><expr>"Hold"</expr></argument>, <argument><expr><name>hold_screen</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"utmpInhibit"</expr></argument>, <argument><expr>"UtmpInhibit"</expr></argument>, <argument><expr><name>utmpInhibit</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"utmpDisplayId"</expr></argument>, <argument><expr>"UtmpDisplayId"</expr></argument>, <argument><expr><name>utmpDisplayId</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"messages"</expr></argument>, <argument><expr>"Messages"</expr></argument>, <argument><expr><name>messages</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"minBufSize"</expr></argument>, <argument><expr>"MinBufSize"</expr></argument>, <argument><expr><name>minBufSize</name></expr></argument>, <argument><expr>4096</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"maxBufSize"</expr></argument>, <argument><expr>"MaxBufSize"</expr></argument>, <argument><expr><name>maxBufSize</name></expr></argument>, <argument><expr>32768</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"menuLocale"</expr></argument>, <argument><expr>"MenuLocale"</expr></argument>, <argument><expr><name>menuLocale</name></expr></argument>, <argument><expr><name>DEF_MENU_LOCALE</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"keyboardType"</expr></argument>, <argument><expr>"KeyboardType"</expr></argument>, <argument><expr><name>keyboardType</name></expr></argument>, <argument><expr>"unknown"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sunKeyboard"</expr></argument>, <argument><expr>"SunKeyboard"</expr></argument>, <argument><expr><name>sunKeyboard</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"hpFunctionKeys"</expr></argument>, <argument><expr>"HpFunctionKeys"</expr></argument>, <argument><expr><name>hpFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"scoFunctionKeys"</expr></argument>, <argument><expr>"ScoFunctionKeys"</expr></argument>, <argument><expr><name>scoFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sunFunctionKeys"</expr></argument>, <argument><expr>"SunFunctionKeys"</expr></argument>, <argument><expr><name>sunFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"tcapFunctionKeys"</expr></argument>, <argument><expr>"TcapFunctionKeys"</expr></argument>, <argument><expr><name>termcapKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptyInitialErase"</expr></argument>, <argument><expr>"PtyInitialErase"</expr></argument>, <argument><expr><name>ptyInitialErase</name></expr></argument>, <argument><expr><name>DEF_INITIAL_ERASE</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"backarrowKeyIsErase"</expr></argument>, <argument><expr>"BackarrowKeyIsErase"</expr></argument>, <argument><expr><name>backarrow_is_erase</name></expr></argument>, <argument><expr><name>DEF_BACKARO_ERASE</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"useInsertMode"</expr></argument>, <argument><expr>"UseInsertMode"</expr></argument>, <argument><expr><name>useInsertMode</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"zIconBeep"</expr></argument>, <argument><expr>"ZIconBeep"</expr></argument>, <argument><expr><name>zIconBeep</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"waitForMap"</expr></argument>, <argument><expr>"WaitForMap"</expr></argument>, <argument><expr><name>wait_for_map</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptyHandshake"</expr></argument>, <argument><expr>"PtyHandshake"</expr></argument>, <argument><expr><name>ptyHandshake</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptySttySize"</expr></argument>, <argument><expr>"PtySttySize"</expr></argument>, <argument><expr><name>ptySttySize</name></expr></argument>, <argument><expr><name>DEF_PTY_STTY_SIZE</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sameName"</expr></argument>, <argument><expr>"SameName"</expr></argument>, <argument><expr><name>sameName</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sessionMgt"</expr></argument>, <argument><expr>"SessionMgt"</expr></argument>, <argument><expr><name>sessionMgt</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr><name>XtNtoolBar</name></expr></argument>, <argument><expr><name>XtCToolBar</name></expr></argument>, <argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr><name>XtNmaximized</name></expr></argument>, <argument><expr><name>XtCMaximized</name></expr></argument>, <argument><expr><name>maximized</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>String</name></type> <name><name>fallback_resources</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"*SimpleMenu*menuLabel.vertSpace: 100"</expr>,
    <expr>"*SimpleMenu*HorizontalMargins: 16"</expr>,
    <expr>"*SimpleMenu*Sme.height: 16"</expr>,
    <expr>"*SimpleMenu*Cursor: left_ptr"</expr>,
    <expr>"*mainMenu.Label:  Main Options (no app-defaults)"</expr>,
    <expr>"*vtMenu.Label:  VT Options (no app-defaults)"</expr>,
    <expr>"*fontMenu.Label:  VT Fonts (no app-defaults)"</expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <expr>"*tekMenu.Label:  Tek Options (no app-defaults)"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Command line options table.  Only resources are entered here...there is a
   pass over the remaining options after XrmParseCommand is let loose. */</comment>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> <name>XrmOptionDescRec</name></type> <name><name>optionDescList</name><index>[]</index></name> =<init> <expr><block>{
<expr><block>{<expr>"-geometry"</expr>,	<expr>"*vt100.geometry"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-132"</expr>,	<expr>"*c132"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+132"</expr>,	<expr>"*c132"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-ah"</expr>,		<expr>"*alwaysHighlight"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ah"</expr>,		<expr>"*alwaysHighlight"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-aw"</expr>,		<expr>"*autoWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+aw"</expr>,		<expr>"*autoWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{<expr>"-ai"</expr>,		<expr>"*activeIcon"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ai"</expr>,		<expr>"*activeIcon"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<expr><block>{<expr>"-b"</expr>,		<expr>"*internalBorder"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bc"</expr>,		<expr>"*cursorBlink"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+bc"</expr>,		<expr>"*cursorBlink"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-bcf"</expr>,	<expr>"*cursorOffTime"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bcn"</expr>,	<expr>"*cursorOnTime"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bdc"</expr>,	<expr>"*colorBDMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+bdc"</expr>,	<expr>"*colorBDMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cb"</expr>,		<expr>"*cutToBeginningOfLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cb"</expr>,		<expr>"*cutToBeginningOfLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cc"</expr>,		<expr>"*charClass"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-cm"</expr>,		<expr>"*colorMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cm"</expr>,		<expr>"*colorMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cn"</expr>,		<expr>"*cutNewline"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cn"</expr>,		<expr>"*cutNewline"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cr"</expr>,		<expr>"*cursorColor"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-cu"</expr>,		<expr>"*curses"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+cu"</expr>,		<expr>"*curses"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-dc"</expr>,		<expr>"*dynamicColors"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+dc"</expr>,		<expr>"*dynamicColors"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-fb"</expr>,		<expr>"*boldFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fbb"</expr>,	<expr>"*freeBoldBox"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>)"off"</expr>}</block></expr>,
<expr><block>{<expr>"+fbb"</expr>,	<expr>"*freeBoldBox"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>)"on"</expr>}</block></expr>,
<expr><block>{<expr>"-fbx"</expr>,	<expr>"*forceBoxChars"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>)"off"</expr>}</block></expr>,
<expr><block>{<expr>"+fbx"</expr>,	<expr>"*forceBoxChars"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>)"on"</expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{<expr>"-fi"</expr>,		<expr>"*iconFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<expr><block>{<expr>"-fa"</expr>,		<expr>"*faceName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fd"</expr>,		<expr>"*faceNameDoublesize"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fs"</expr>,		<expr>"*faceSize"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-fw"</expr>,		<expr>"*wideFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fwb"</expr>,	<expr>"*wideBoldFont"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INPUT_METHOD</name></expr></cpp:if>
<expr><block>{<expr>"-fx"</expr>,		<expr>"*ximFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HIGHLIGHT_COLOR</name></expr></cpp:if>
<expr><block>{<expr>"-hc"</expr>,		<expr>"*highlightColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-hm"</expr>,		<expr>"*highlightColorMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hm"</expr>,		<expr>"*highlightColorMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-selfg"</expr>,	<expr>"*highlightTextColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-selbg"</expr>,	<expr>"*highlightColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<expr><block>{<expr>"-hf"</expr>,		<expr>"*hpFunctionKeys"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hf"</expr>,		<expr>"*hpFunctionKeys"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-hold"</expr>,	<expr>"*hold"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hold"</expr>,	<expr>"*hold"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
<expr><block>{<expr>"-ie"</expr>,		<expr>"*ptyInitialErase"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ie"</expr>,		<expr>"*ptyInitialErase"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-j"</expr>,		<expr>"*jumpScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+j"</expr>,		<expr>"*jumpScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_C1_PRINT</name></expr></cpp:if>
<expr><block>{<expr>"-k8"</expr>,		<expr>"*allowC1Printable"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+k8"</expr>,		<expr>"*allowC1Printable"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-kt"</expr>,		<expr>"*keyboardType"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"+kt"</expr>,		<expr>"*keyboardType"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<comment type="block">/* parse logging options anyway for compatibility */</comment>
<expr><block>{<expr>"-l"</expr>,		<expr>"*logging"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+l"</expr>,		<expr>"*logging"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-lf"</expr>,		<expr>"*logFile"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-ls"</expr>,		<expr>"*loginShell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ls"</expr>,		<expr>"*loginShell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mb"</expr>,		<expr>"*marginBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+mb"</expr>,		<expr>"*marginBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mc"</expr>,		<expr>"*multiClickTime"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-mesg"</expr>,	<expr>"*messages"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+mesg"</expr>,	<expr>"*messages"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ms"</expr>,		<expr>"*pointerColor"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-nb"</expr>,		<expr>"*nMarginBell"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-nul"</expr>,	<expr>"*underLine"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+nul"</expr>,	<expr>"*underLine"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-pc"</expr>,		<expr>"*boldColors"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+pc"</expr>,		<expr>"*boldColors"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rw"</expr>,		<expr>"*reverseWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+rw"</expr>,		<expr>"*reverseWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-s"</expr>,		<expr>"*multiScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+s"</expr>,		<expr>"*multiScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-sb"</expr>,		<expr>"*scrollBar"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sb"</expr>,		<expr>"*scrollBar"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCROLLBAR_RIGHT</name></cpp:ifdef>
<expr><block>{<expr>"-leftbar"</expr>,	<expr>"*rightScrollBar"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rightbar"</expr>,	<expr>"*rightScrollBar"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-rvc"</expr>,	<expr>"*colorRVMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+rvc"</expr>,	<expr>"*colorRVMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-sf"</expr>,		<expr>"*sunFunctionKeys"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sf"</expr>,		<expr>"*sunFunctionKeys"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-si"</expr>,		<expr>"*scrollTtyOutput"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+si"</expr>,		<expr>"*scrollTtyOutput"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-sk"</expr>,		<expr>"*scrollKey"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sk"</expr>,		<expr>"*scrollKey"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-sl"</expr>,		<expr>"*saveLines"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<expr><block>{<expr>"-sp"</expr>,		<expr>"*sunKeyboard"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sp"</expr>,		<expr>"*sunKeyboard"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{<expr>"-t"</expr>,		<expr>"*tekStartup"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+t"</expr>,		<expr>"*tekStartup"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-ti"</expr>,		<expr>"*decTerminalID"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-tm"</expr>,		<expr>"*ttyModes"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-tn"</expr>,		<expr>"*termName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-u8"</expr>,		<expr>"*utf8"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "2"</expr>}</block></expr>,
<expr><block>{<expr>"+u8"</expr>,		<expr>"*utf8"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "0"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<expr><block>{<expr>"-lc"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+lc"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-lcc"</expr>,	<expr>"*localeFilter"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-en"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-uc"</expr>,		<expr>"*cursorUnderLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+uc"</expr>,		<expr>"*cursorUnderLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-ulc"</expr>,	<expr>"*colorULMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ulc"</expr>,	<expr>"*colorULMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ulit"</expr>,       <expr>"*italicULMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,        <expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ulit"</expr>,       <expr>"*italicULMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,        <expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ut"</expr>,		<expr>"*utmpInhibit"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ut"</expr>,		<expr>"*utmpInhibit"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-im"</expr>,		<expr>"*useInsertMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+im"</expr>,		<expr>"*useInsertMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-vb"</expr>,		<expr>"*visualBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+vb"</expr>,		<expr>"*visualBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-pob"</expr>,	<expr>"*popOnBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+pob"</expr>,	<expr>"*popOnBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-wc"</expr>,		<expr>"*wideChars"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+wc"</expr>,		<expr>"*wideChars"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mk_width"</expr>,	<expr>"*mkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+mk_width"</expr>,	<expr>"*mkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-cjk_width"</expr>,	<expr>"*cjkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+cjk_width"</expr>,	<expr>"*cjkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-wf"</expr>,		<expr>"*waitForMap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+wf"</expr>,		<expr>"*waitForMap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
<expr><block>{<expr>"-ziconbeep"</expr>,	<expr>"*zIconBeep"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
<expr><block>{<expr>"-samename"</expr>,	<expr>"*sameName"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+samename"</expr>,	<expr>"*sameName"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<expr><block>{<expr>"-sm"</expr>,		<expr>"*sessionMgt"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sm"</expr>,		<expr>"*sessionMgt"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<expr><block>{<expr>"-tb"</expr>,		<expr>"*"<name>XtNtoolBar</name></expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+tb"</expr>,		<expr>"*"<name>XtNtoolBar</name></expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
<expr><block>{<expr>"-maximized"</expr>,	<expr>"*maximized"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+maximized"</expr>,	<expr>"*maximized"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* options that we process ourselves */</comment>
<expr><block>{<expr>"-help"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipNArgs</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-version"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipNArgs</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-class"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-e"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipLine</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-into"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<comment type="block">/* bogus old compatibility stuff for which there are
   standard XtOpenApplication options now */</comment>
<expr><block>{<expr>"%"</expr>,		<expr>"*tekGeometry"</expr>,	<expr><name>XrmoptionStickyArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"#"</expr>,		<expr>".iconGeometry"</expr>,<expr><name>XrmoptionStickyArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-T"</expr>,		<expr>".title"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-n"</expr>,		<expr>"*iconName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-r"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+r"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rv"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+rv"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-w"</expr>,		<expr>".borderWidth"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>OptionHelp</name></type> <name><name>xtermOptions</name><index>[]</index></name> =<init> <expr><block>{
<expr><block>{ <expr>"-version"</expr>,              <expr>"print the version number"</expr> }</block></expr>,
<expr><block>{ <expr>"-help"</expr>,                 <expr>"print out this message"</expr> }</block></expr>,
<expr><block>{ <expr>"-display displayname"</expr>,  <expr>"X server to contact"</expr> }</block></expr>,
<expr><block>{ <expr>"-geometry geom"</expr>,        <expr>"size (in characters) and position"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+rv"</expr>,                 <expr>"turn on/off reverse video"</expr> }</block></expr>,
<expr><block>{ <expr>"-bg color"</expr>,             <expr>"background color"</expr> }</block></expr>,
<expr><block>{ <expr>"-fg color"</expr>,             <expr>"foreground color"</expr> }</block></expr>,
<expr><block>{ <expr>"-bd color"</expr>,             <expr>"border color"</expr> }</block></expr>,
<expr><block>{ <expr>"-bw number"</expr>,            <expr>"border width in pixels"</expr> }</block></expr>,
<expr><block>{ <expr>"-fn fontname"</expr>,          <expr>"normal text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-fb fontname"</expr>,          <expr>"bold text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+fbb"</expr>,                <expr>"turn on/off normal/bold font comparison inhibit"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+fbx"</expr>,                <expr>"turn off/on linedrawing characters"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<expr><block>{ <expr>"-fa pattern"</expr>,           <expr>"FreeType font-selection pattern"</expr> }</block></expr>,
<expr><block>{ <expr>"-fd pattern"</expr>,           <expr>"FreeType Doublesize font-selection pattern"</expr> }</block></expr>,
<expr><block>{ <expr>"-fs size"</expr>,              <expr>"FreeType font-size"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-fw fontname"</expr>,          <expr>"doublewidth text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-fwb fontname"</expr>,         <expr>"doublewidth bold text font"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INPUT_METHOD</name></expr></cpp:if>
<expr><block>{ <expr>"-fx fontname"</expr>,          <expr>"XIM fontset"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-iconic"</expr>,               <expr>"start iconic"</expr> }</block></expr>,
<expr><block>{ <expr>"-name string"</expr>,          <expr>"client instance, icon, and title strings"</expr> }</block></expr>,
<expr><block>{ <expr>"-class string"</expr>,         <expr>"class string (XTerm)"</expr> }</block></expr>,
<expr><block>{ <expr>"-title string"</expr>,         <expr>"title string"</expr> }</block></expr>,
<expr><block>{ <expr>"-xrm resourcestring"</expr>,   <expr>"additional resource specifications"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+132"</expr>,                <expr>"turn on/off 80/132 column switching"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ah"</expr>,                 <expr>"turn on/off always highlight"</expr> }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{ <expr>"-/+ai"</expr>,                 <expr>"turn off/on active icon"</expr> }</block></expr>,
<expr><block>{ <expr>"-fi fontname"</expr>,          <expr>"icon font for active icon"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<expr><block>{ <expr>"-b number"</expr>,             <expr>"internal border in pixels"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+bc"</expr>,                 <expr>"turn on/off text cursor blinking"</expr> }</block></expr>,
<expr><block>{ <expr>"-bcf milliseconds"</expr>,     <expr>"time text cursor is off when blinking"</expr>}</block></expr>,
<expr><block>{ <expr>"-bcn milliseconds"</expr>,     <expr>"time text cursor is on when blinking"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+bdc"</expr>,                <expr>"turn off/on display of bold as color"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+cb"</expr>,                 <expr>"turn on/off cut-to-beginning-of-line inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-cc classrange"</expr>,        <expr>"specify additional character classes"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cm"</expr>,                 <expr>"turn off/on ANSI color mode"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cn"</expr>,                 <expr>"turn on/off cut newline inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-cr color"</expr>,             <expr>"text cursor color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cu"</expr>,                 <expr>"turn on/off curses emulation"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+dc"</expr>,                 <expr>"turn off/on dynamic color selection"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HIGHLIGHT_COLOR</name></expr></cpp:if>
<expr><block>{ <expr>"-/+hm"</expr>,                 <expr>"turn on/off selection-color override"</expr> }</block></expr>,
<expr><block>{ <expr>"-selbg color"</expr>,          <expr>"selection background color"</expr> }</block></expr>,
<expr><block>{ <expr>"-selfg color"</expr>,          <expr>"selection foreground color"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+hf"</expr>,                 <expr>"turn on/off HP Function Key escape codes"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+hold"</expr>,               <expr>"turn on/off logic that retains window after exit"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
<expr><block>{ <expr>"-/+ie"</expr>,                 <expr>"turn on/off initialization of 'erase' from pty"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+im"</expr>,                 <expr>"use insert mode for TERMCAP"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+j"</expr>,                  <expr>"turn on/off jump scroll"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_C1_PRINT</name></expr></cpp:if>
<expr><block>{ <expr>"-/+k8"</expr>,                 <expr>"turn on/off C1-printable classification"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-kt keyboardtype"</expr>,      <expr>"set keyboard type:" <name>KEYBOARD_TYPES</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<expr><block>{ <expr>"-/+l"</expr>,                  <expr>"turn on/off logging"</expr> }</block></expr>,
<expr><block>{ <expr>"-lf filename"</expr>,          <expr>"logging filename"</expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr>"-/+l"</expr>,                  <expr>"turn on/off logging (not supported)"</expr> }</block></expr>,
<expr><block>{ <expr>"-lf filename"</expr>,          <expr>"logging filename (not supported)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+ls"</expr>,                 <expr>"turn on/off login shell"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mb"</expr>,                 <expr>"turn on/off margin bell"</expr> }</block></expr>,
<expr><block>{ <expr>"-mc milliseconds"</expr>,      <expr>"multiclick time in milliseconds"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mesg"</expr>,               <expr>"forbid/allow messages"</expr> }</block></expr>,
<expr><block>{ <expr>"-ms color"</expr>,             <expr>"pointer color"</expr> }</block></expr>,
<expr><block>{ <expr>"-nb number"</expr>,            <expr>"margin bell in characters from right end"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+nul"</expr>,                <expr>"turn off/on display of underlining"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+aw"</expr>,                 <expr>"turn on/off auto wraparound"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+pc"</expr>,                 <expr>"turn on/off PC-style bold colors"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+rw"</expr>,                 <expr>"turn on/off reverse wraparound"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+s"</expr>,                  <expr>"turn on/off multiscroll"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sb"</expr>,                 <expr>"turn on/off scrollbar"</expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCROLLBAR_RIGHT</name></cpp:ifdef>
<expr><block>{ <expr>"-rightbar"</expr>,             <expr>"force scrollbar right (default left)"</expr> }</block></expr>,
<expr><block>{ <expr>"-leftbar"</expr>,              <expr>"force scrollbar left"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+rvc"</expr>,                <expr>"turn off/on display of reverse as color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sf"</expr>,                 <expr>"turn on/off Sun Function Key escape codes"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+si"</expr>,                 <expr>"turn on/off scroll-on-tty-output inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sk"</expr>,                 <expr>"turn on/off scroll-on-keypress"</expr> }</block></expr>,
<expr><block>{ <expr>"-sl number"</expr>,            <expr>"number of scrolled lines to save"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<expr><block>{ <expr>"-/+sp"</expr>,                 <expr>"turn on/off Sun/PC Function/Keypad mapping"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{ <expr>"-/+t"</expr>,                  <expr>"turn on/off Tek emulation window"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<expr><block>{ <expr>"-/+tb"</expr>,                 <expr>"turn on/off toolbar"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-ti termid"</expr>,            <expr>"terminal identifier"</expr> }</block></expr>,
<expr><block>{ <expr>"-tm string"</expr>,            <expr>"terminal mode keywords and characters"</expr> }</block></expr>,
<expr><block>{ <expr>"-tn name"</expr>,              <expr>"TERM environment variable name"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+u8"</expr>,                 <expr>"turn on/off UTF-8 mode (implies wide-characters)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<expr><block>{ <expr>"-/+lc"</expr>,                 <expr>"turn on/off locale mode using luit"</expr> }</block></expr>,
<expr><block>{ <expr>"-lcc path"</expr>,             <expr>"filename of locale converter (" <name>DEFLOCALEFILTER</name> ")"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+uc"</expr>,                 <expr>"turn on/off underline cursor"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ulc"</expr>,                <expr>"turn off/on display of underline as color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ulit"</expr>,               <expr>"turn off/on display of underline as italics"</expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP</name></cpp:ifdef>
<expr><block>{ <expr>"-/+ut"</expr>,                 <expr>"turn on/off utmp support"</expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr>"-/+ut"</expr>,                 <expr>"turn on/off utmp support (not available)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+vb"</expr>,                 <expr>"turn on/off visual bell"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+pob"</expr>,                <expr>"turn on/off pop on bell"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+wc"</expr>,                 <expr>"turn on/off wide-character mode"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mk_width"</expr>,           <expr>"turn on/off simple width convention"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cjk_width"</expr>,          <expr>"turn on/off legacy CJK width convention"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+wf"</expr>,                 <expr>"turn on/off wait for map before command exec"</expr> }</block></expr>,
<expr><block>{ <expr>"-e command args ..."</expr>,   <expr>"command to execute"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{ <expr>"%geom"</expr>,                 <expr>"Tek window geometry"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"#geom"</expr>,                 <expr>"icon window geometry"</expr> }</block></expr>,
<expr><block>{ <expr>"-T string"</expr>,             <expr>"title name for window"</expr> }</block></expr>,
<expr><block>{ <expr>"-n string"</expr>,             <expr>"icon name for window"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr>"-C"</expr>,                    <expr>"intercept console messages"</expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr>"-C"</expr>,                    <expr>"intercept console messages (not supported)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-Sccn"</expr>,                 <expr>"slave mode on \"ttycc\", file descriptor \"n\""</expr> }</block></expr>,
<expr><block>{ <expr>"-into windowId"</expr>,        <expr>"use the window id given to -into as the parent window rather than the default root window"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
<expr><block>{ <expr>"-ziconbeep percent"</expr>,    <expr>"beep and flag icon of window having hidden output"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
<expr><block>{ <expr>"-/+samename"</expr>,           <expr>"turn on/off the no-flicker option for title and icon name"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<expr><block>{ <expr>"-/+sm"</expr>,                 <expr>"turn on/off the session-management support"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
<expr><block>{<expr>"-/+maximized"</expr>,           <expr>"turn on/off maxmize on startup"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *</type><name><name>message</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"Fonts should be fixed width and, if both normal and bold are specified, should"</expr>,
    <expr>"have the same size.  If only a normal font is specified, it will be used for"</expr>,
    <expr>"both normal and bold text (by doing overstriking).  The -e option, if given,"</expr>,
    <expr>"must appear at the end of the command line, otherwise the user's default shell"</expr>,
    <expr>"will be started.  Options that start with a plus sign (+) restore the default."</expr>,
    <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Decode a key-definition.  This combines the termcap and ttyModes, for
 * comparison.  Note that octal escapes in ttyModes are done by the normal
 * resource translation.  Also, ttyModes allows '^-' as a synonym for disabled.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>decode_keyvalue</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>, <param><decl><type><name>int</name></type> <name>termcap</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>string</name> =<init> <expr>*<name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("decode_keyvalue '%s'\n", <name>string</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>string</name> == '^'</expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr>*++<name>string</name></expr>)</condition> <block>{
	<case>case <expr>'?'</expr>:
	    <expr_stmt><expr><name>value</name> = <call><name>A2E</name><argument_list>(<argument><expr><name>ANSI_DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr>'-'</expr>:
	    <if>if <condition>(<expr>!<name>termcap</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_VDISABLE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>value</name> = <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PC_VDISABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>value</name> = (<name>int</name>) <call><name>fpathconf</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>_PC_VDISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
			    <break>break;</break></then></if>	<comment type="block">/* skip this (error) */</comment>
			<expr_stmt><expr><name>value</name> = 0377</expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISABLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then>
		    <expr_stmt><expr><name>value</name> = <name>VDISABLE</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	    }</block></then></if>
	    <comment type="block">/* FALLTHRU */</comment>
	</case><default>default:
	    <expr_stmt><expr><name>value</name> = <call><name>CONTROL</name><argument_list>(<argument><expr>*<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</default>}</block></switch>
	<expr_stmt><expr>++<name>string</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>termcap</name> &amp;&amp; (*<name>string</name> == '\\')</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>temp</name> =<init> <expr>(<name>int</name>) <call><name>strtol</name><argument_list>(<argument><expr><name>string</name> + 1</expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>temp</name> &gt; 0 &amp;&amp; <name>d</name> != <name>string</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>value</name> = <name>temp</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>string</name> = <name>d</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>value</name> = <call><name>CharOf</name><argument_list>(<argument><expr>*<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>string</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr>*<name>ptr</name> = <name>string</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...decode_keyvalue %#x\n", <name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type>
<name>abbrev</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>tst</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>need</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr>((<name>len</name> &gt;= <name>need</name>) &amp;&amp; (!<call><name>strncmp</name><argument_list>(<argument><expr><name>tst</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>))</expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Syntax</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>badOption</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>list</name> =<init> <expr><call><name>sortedOpts</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:  bad command line option \"%s\"\r\n\n"</expr></argument>,
	    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>badOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"usage:  %s"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>col</name> = 8 + (<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>opt</name> = <name>list</name></expr>;</init> <condition><expr><name>opt</name>-&gt;<name>opt</name></expr>;</condition> <incr><expr><name>opt</name>++</expr></incr>) <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr>3 + (<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* space [ string ] */</comment>
	<if>if <condition>(<expr><name>col</name> + <name>len</name> &gt; 79</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\r\n   "</expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 3 spaces */</comment>
	    <expr_stmt><expr><name>col</name> = 3</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" [%s]"</expr></argument>, <argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>col</name> += <name>len</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\r\n\nType %s -help for a full description.\r\n\n"</expr></argument>,
	    <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Help</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>list</name> =<init> <expr><call><name>sortedOpts</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>char</name> **</type><name>cpp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s usage:\n    %s [-options ...] [-e command args]\n\n"</expr></argument>,
	   <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"where options include:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>opt</name> = <name>list</name></expr>;</init> <condition><expr><name>opt</name>-&gt;<name>opt</name></expr>;</condition> <incr><expr><name>opt</name>++</expr></incr>) <block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"    %-28s %s\n"</expr></argument>, <argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>, <argument><expr><name>opt</name>-&gt;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>cpp</name> = <name>message</name></expr>;</init> <condition><expr>*<name>cpp</name></expr>;</condition> <incr><expr><name>cpp</name>++</expr></incr>)
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr>*<name>cpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>Boolean</name></type>
<name>ConvertConsoleSelection</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>selection</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>target</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>type</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>XtPointer</name> *<name>value</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>unsigned</name> <name>long</name> *<name>length</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>int</name> *<name>format</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* we don't save console output, so can't offer it */</comment>
    <return>return <expr><name>False</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCCONS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>die_callback</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Cleanup</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>save_callback</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtCheckpointToken</name></type> <name>token</name> =<init> <expr>(<name>XtCheckpointToken</name>) <name>call_data</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* we have nothing to save */</comment>
    <expr_stmt><expr><name>token</name>-&gt;<name>save_success</name> = <name>True</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>icewatch</name><parameter_list>(<param><decl><type><name>IceConn</name></type> <name>iceConn</name></decl></param>,
	 <param><decl><type><name>IcePointer</name> <name>clientData</name></type> <name>GCC_UNUSED</name></decl></param>,
	 <param><decl><type><name>Bool</name></type> <name>opening</name></decl></param>,
	 <param><decl><type><name>IcePointer</name> * <name>watchData</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>ice_fd</name> = <call><name>IceConnectionNumber</name><argument_list>(<argument><expr><name>iceConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("got IceConnectionNumber %d\n", <name>ice_fd</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>ice_fd</name> = -1</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("reset IceConnectionNumber\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_SESSION_MGT */</comment>

<comment type="block">/*
 * DeleteWindow(): Action proc to implement ICCCM delete_window.
 */</comment>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>DeleteWindow</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>Cardinal</name> *<name>num_params</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>w</name> == <name>toplevel</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>hide_vt_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
	<else>else
	    <expr_stmt><expr><call><name>do_hangup</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>Vshow</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>hide_tek_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>do_hangup</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>KeyboardMapping</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XEvent</name> *</type> <name>event</name></decl></param>,
		<param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *<name>num_params</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>event</name>-&gt;<name>type</name></expr>)</condition> <block>{
    <case>case <expr><name>MappingNotify</name></expr>:
	<expr_stmt><expr><call><name>XRefreshKeyboardMapping</name><argument_list>(<argument><expr>&amp;<name>event</name>-&gt;<name>xmapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </case>}</block></switch>
}</block></function>

<decl_stmt><decl><type><name>static</name> <name>XtActionsRec</name></type> <name><name>actionProcs</name><index>[]</index></name> =<init>
<expr><block>{
    <expr><block>{<expr>"DeleteWindow"</expr>, <expr><name>DeleteWindow</name></expr>}</block></expr>,
    <expr><block>{<expr>"KeyboardMapping"</expr>, <expr><name>KeyboardMapping</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Some platforms use names such as /dev/tty01, others /dev/pts/1.  Parse off
 * the "tty01" or "pts/1" portion, and return that for use as an identifier for
 * utmp.
 */</comment>
<function><type><name>static</name> <name>char</name> *</type>
<name>my_pty_name</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>name</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>len</name> != 0</expr>)</condition> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ch</name> =<init> <expr><name><name>device</name><index>[<expr><name>len</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '/'</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>name</name></expr>)</condition><then>
		<break>break;</break></then></if>
	    <expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>name</name> = <name>True</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>len</name>--</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <break>break;</break>
	}</block></else></if></else></if></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("my_pty_name(%s) -&gt; '%s'\n", <name>device</name>, <name>device</name> + <name>len</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>device</name> + <name>len</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * If the name contains a '/', it is a "pts/1" case.  Otherwise, return the
 * last few characters for a utmp identifier.
 */</comment>
<function><type><name>static</name> <name>char</name> *</type>
<name>my_pty_id</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>leaf</name> =<init> <expr><call><name>x_basename</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>name</name> == <name>leaf</name></expr>)</condition><then> <block>{		<comment type="block">/* no '/' in the name */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr>(<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>PTYCHARLEN</name> &lt; <name>len</name></expr>)</condition><then>
	    <expr_stmt><expr><name>leaf</name> = <name>leaf</name> + (<name>len</name> - <name>PTYCHARLEN</name>)</expr>;</expr_stmt></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("my_pty_id  (%s) -&gt; '%s'\n", <name>device</name>, <name>leaf</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>leaf</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Set the tty/pty identifier
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>set_pty_id</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>, <param><decl><type><name>char</name> *</type><name>id</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>leaf</name> =<init> <expr><call><name>x_basename</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>name</name> == <name>leaf</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><call><name>my_pty_id</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("set_pty_id(%s) -&gt; '%s'\n", <name>id</name>, <name>device</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * The original -S option accepts two characters to identify the pty, and a
 * file-descriptor (assumed to be nonzero).  That is not general enough, so we
 * check first if the option contains a '/' to delimit the two fields, and if
 * not, fall-thru to the original logic.
 */</comment>
<function><type><name>static</name> <name>Bool</name></type>
<name>ParseSccn</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>option</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>leaf</name> =<init> <expr><call><name>x_basename</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>code</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>leaf</name> != <name>option</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>leaf</name> - <name>option</name> &gt; 0
	    &amp;&amp; <call><name>isdigit</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>leaf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
	    &amp;&amp; <call><name>sscanf</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>&amp;<name>am_slave</name></expr></argument>)</argument_list></call> == 1</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call>(<name>size_t</name>) <argument_list>(<argument><expr><name>leaf</name> - <name>option</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <comment type="block">/*
	     * If we have a slash, we only care about the part after the slash,
	     * which is a file-descriptor.  The part before the slash can be
	     * the /dev/pts/XXX value, but since we do not need to reopen it,
	     * it is useful mainly for display in a "ps -ef".
	     */</comment>
	    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>passedPty</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>passedPty</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
	    <expr_stmt><expr><name>code</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>code</name> = (<call><name>sscanf</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr>"%c%c%d"</expr></argument>,
		       <argument><expr><name>passedPty</name></expr></argument>, <argument><expr><name>passedPty</name> + 1</expr></argument>, <argument><expr>&amp;<name>am_slave</name></expr></argument>)</argument_list></call> == 3)</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("ParseSccn(%s) = '%s' %d (%s)\n", <name>option</name>,
	   <name>passedPty</name>, <name>am_slave</name>, <name>code</name> ? "OK" : "ERR")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * From "man utmp":
 * xterm and other terminal emulators directly create a USER_PROCESS record
 * and generate the ut_id by using the last two letters of /dev/ttyp%c or by
 * using p%d for /dev/pts/%d.  If they find a DEAD_PROCESS for this id, they
 * recycle it, otherwise they create a new entry.  If they can, they will mark
 * it as DEAD_PROCESS on exiting and it is advised that they null ut_line,
 * ut_time, ut_user and ut_host as well.
 *
 * Generally ut_id allows no more than 3 characters (plus null), even if the
 * pty implementation allows more than 3 digits.
 */</comment>
<function><type><name>static</name> <name>char</name> *</type>
<name>my_utmp_id</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>)</parameter_list>
<block>{
    <typedef>typedef <type><struct>struct <name>UTMP_STR</name> UTMP_STRUCT;</struct></type></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>UTIDSIZE</name>	(sizeof(((UTMP_STRUCT *)NULL)-&gt;ut_id))</cpp:define>
    <decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>result</name><index>[<expr><name>UTIDSIZE</name> + 1</expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__UNIXWARE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block">/*
     * Legend does not support old-style pty's, has no related compatibility
     * issues, and can use the available space in ut_id differently from the
     * default convention.
     *
     * This scheme is intended to avoid conflicts both with other users of
     * utmpx as well as between multiple xterms.  First, Legend uses all of the
     * characters of ut_id, and adds no terminating NUL is required (the
     * default scheme may add a trailing NUL).  Second, all xterm entries will
     * start with the letter 'x' followed by three digits, which will be the
     * last three digits of the device name, regardless of the format of the
     * device name, with leading 0's added where necessary.  For instance, an
     * xterm on /dev/pts/3 will have a ut_id of x003; an xterm on /dev/pts123
     * will have a ut_id of x123.  Under the other convention, /dev/pts/3 would
     * have a ut_id of p3 and /dev/pts123 would have a ut_id of p123.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name>, <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <name>UTIDSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>n</name> &gt; 0) &amp;&amp; (<name>len</name> &gt; 0) &amp;&amp; <call><name>isdigit</name><argument_list>(<argument><expr><name><name>device</name><index>[<expr><name>len</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<expr_stmt><expr><name><name>result</name><index>[<expr>--<name>n</name></expr>]</index></name> = <name><name>device</name><index>[<expr>--<name>len</name></expr>]</index></name></expr>;</expr_stmt></while>
    <while>while <condition>(<expr><name>n</name> &gt; 0</expr>)</condition>
	<expr_stmt><expr><name><name>result</name><index>[<expr>--<name>n</name></expr>]</index></name> = '0'</expr>;</expr_stmt></while>
    <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = 'x'</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>leaf</name> =<init> <expr><call><name>x_basename</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>UTIDSIZE</name> - 1) &lt; <name>len</name></expr>)</condition><then>
	<expr_stmt><expr><name>leaf</name> = <name>leaf</name> + (<name>len</name> - (<name>UTIDSIZE</name> - 1))</expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"p%s"</expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("my_utmp_id (%s) -&gt; '%s'\n", <name>device</name>, <name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_POSIX_SIGNALS</name></cpp:ifdef>

<typedef>typedef <function_decl><type><name>void</name></type> (*<name>sigfunc</name>) <parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* make sure we sure we ignore SIGCHLD for the cases parent
   has just been stopped and not actually killed */</comment>

<function><type><name>static</name> <name>sigfunc</name></type>
<name>posix_signal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>signo</name></decl></param>, <param><decl><type><name>sigfunc</name></type> <name>func</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>sigaction</name></type> <name>act</name>, <name>oact</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>act</name>.<name>sa_handler</name> = <name>func</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr>&amp;<name>act</name>.<name>sa_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SA_RESTART</name></cpp:ifdef>
    <expr_stmt><expr><name>act</name>.<name>sa_flags</name> = <name>SA_NOCLDSTOP</name> | <name>SA_RESTART</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>act</name>.<name>sa_flags</name> = <name>SA_NOCLDSTOP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr>&amp;<name>act</name></expr></argument>, <argument><expr>&amp;<name>oact</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	<return>return <expr>(<name>SIG_ERR</name>)</expr>;</return></then></if>
    <return>return <expr>(<name>oact</name>.<name>sa_handler</name>)</expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* linux &amp;&amp; _POSIX_SOURCE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>disableSetUid</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("process %d disableSetUid\n", (<name>int</name>) <call><name>getpid</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>setuid</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: unable to reset uid\n"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>disableSetUid</name>()</cpp:define>		<comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DISABLE_SETUID */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>disableSetGid</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("process %d disableSetGid\n", (<name>int</name>) <call><name>getpid</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>setegid</name><argument_list>(<argument><expr><name>save_rgid</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: unable to reset effective gid\n"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>disableSetGid</name>()</cpp:define>		<comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DISABLE_SETGID */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_SAVED_IDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>setEffectiveGroup</name><parameter_list>(<param><decl><type><name>gid_t</name></type> <name>group</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("process %d setEffectiveGroup(%d)\n", (<name>int</name>) <call><name>getpid</name><argument_list>()</argument_list></call>, (<name>int</name>) <name>group</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>setegid</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
	<if>if <condition>(<expr>!(<name>errno</name> == <name>EMVSERR</name>)</expr>)</condition><then>	<comment type="block">/* could happen if _BPX_SHAREAS=REUSE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{
	    <expr_stmt><expr>(<name>void</name>) <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"setegid(%d): %s\n"</expr></argument>,
			   <argument><expr>(<name>int</name>) <name>group</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call> &amp;&amp; (!<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>setEffectiveUser</name><parameter_list>(<param><decl><type><name>uid_t</name></type> <name>user</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("process %d setEffectiveUser(%d)\n", (<name>int</name>) <call><name>getpid</name><argument_list>()</argument_list></call>, (<name>int</name>) <name>user</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>seteuid</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
	<if>if <condition>(<expr>!(<name>errno</name> == <name>EMVSERR</name>)</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{
	    <expr_stmt><expr>(<name>void</name>) <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"seteuid(%d): %s\n"</expr></argument>,
			   <argument><expr>(<name>int</name>) <name>user</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_POSIX_SAVED_IDS */</comment>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name><name>ENVP_ARG</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Widget</name></type> <name>form_top</name>, <name>menu_top</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>menu_high</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>my_class</name> =<init> <expr><name>DEFCLASS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Window</name></type> <name>winToEmbedInto</name> =<init> <expr><name>None</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
    <decl_stmt><decl><type><name>Bool</name></type> <name>reversed</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ProgramName</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_POSIX_SAVED_IDS</name></cpp:ifdef>
    <expr_stmt><expr><name>save_euid</name> = <call><name>geteuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>save_egid</name> = <call><name>getegid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>save_ruid</name> = <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>save_rgid</name> = <call><name>getgid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>disableSetUid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>disableSetGid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* extra length in case longer tty name like /dev/ttyq255 */</comment>
    <expr_stmt><expr><name>ttydev</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>TTYDEV</name></expr></argument>)</argument_list></call> + 80</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PTY_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><name>ptydev</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>PTYDEV</name></expr></argument>)</argument_list></call> + 80</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ttydev</name> || !<name>ptydev</name></expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<name>ttydev</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"%s: unable to allocate memory for ttydev or ptydev\n"</expr></argument>,
		<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></then></if>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>TTYDEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PTY_DEVICE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>PTYDEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>get_pty</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>disableSetUid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>disableSetGid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>get_pty</name>(pty, from) really_get_pty(pty, from)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Do these first, since we may not be able to open the display */</comment>
    <expr_stmt><expr><call><name>TRACE_OPTS</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_ARGV</name><argument_list>(<argument><expr>"Before XtOpenApplication"</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>unique</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bool</name></type> <name>quit</name> =<init> <expr><name>True</name></expr></init></decl>;</decl_stmt>

	<for>for (<init><expr><name>n</name> = 1</expr>;</init> <condition><expr><name>n</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parsing %s\n", <name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-version"</expr></argument>, <argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-help"</expr></argument>, <argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-class"</expr></argument>, <argument><expr>(<name>size_t</name>) 3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>(<name>my_class</name> = <name><name>argv</name><index>[<expr>++<name>n</name></expr>]</index></name>) == 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><name>quit</name> = <name>False</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>unique</name> = 3</expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
		<if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-reverse"</expr></argument>, <argument><expr>(<name>size_t</name>) 2</expr></argument>)</argument_list></call>
		    || !<call><name>strcmp</name><argument_list>(<argument><expr>"-rv"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>reversed</name> = <name>True</name></expr>;</expr_stmt>
		}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"+rv"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>reversed</name> = <name>False</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>quit</name> = <name>False</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>unique</name> = 3</expr>;</expr_stmt>
	    }</block></else></if></else></if></else></if>
	}</block></for>
	<if>if <condition>(<expr><name>quit</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <comment type="block">/* This dumps core on HP-UX 9.05 with X11R5 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_I18N_SUPPORT</name></expr></cpp:if>
    <expr_stmt><expr><call><name>XtSetLanguageProc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>		<comment type="block">/* { */</comment>
    <comment type="block">/* Initialization is done here rather than above in order
     * to prevent any assumptions about the order of the contents
     * of the various terminal structures (which may change from
     * implementation to implementation).
     */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>d_tio</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>d_tio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_iflag</name> = <name>ICRNL</name> | <name>IXON</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TAB3</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_oflag</name> = <name>OPOST</name> | <name>ONLCR</name> | <name>TAB3</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLCR</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_oflag</name> = <name>OPOST</name> | <name>ONLCR</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>d_tio</name>.<name>c_oflag</name> = <name>OPOST</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<decl_stmt><decl><type><name>Cardinal</name></type> <name>nn</name></decl>;</decl_stmt>

	<comment type="block">/* fill in default-values */</comment>
	<for>for (<init><expr><name>nn</name> = 0</expr>;</init> <condition><expr><name>nn</name> &lt; <call><name>XtNumber</name><argument_list>(<argument><expr><name>known_ttyChars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>nn</name></expr></incr>) <block>{
	    <if>if <condition>(<expr><call><name>validTtyChar</name><argument_list>(<argument><expr><name>d_tio</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>sysMode</name></expr>]</index></name> =
		    <name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>myDefault</name></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></for>
    }</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>macII</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>ATT</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> = <name>VAL_LINE_SPEED</name> | <name>CS8</name> | <name>CREAD</name> | <name>PARENB</name> | <name>HUPCL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> = <name>ISIG</name> | <name>ICANON</name> | <name>ECHO</name> | <name>ECHOE</name> | <name>ECHOK</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOKE</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> |= <name>ECHOKE</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOCTL</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> |= <name>ECHOCTL</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_TERMIOS</name></cpp:ifndef>		<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_line</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>		<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_suspc</name> = <name>CSUSP</name></expr>;</expr_stmt>	<comment type="block">/* t_suspc */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_dsuspc</name> = <name>CDSUSP</name></expr>;</expr_stmt>	<comment type="block">/* t_dsuspc */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_rprntc</name> = <name>CRPRNT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_flushc</name> = <name>CFLUSH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_werasc</name> = <name>CWERASE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_lnextc</name> = <name>CLNEXT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } HAS_LTCHARS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>			<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_lmode</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } TIOCLSET */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* }{ else !macII, ATT, CRAY */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_POSIX_TERMIOS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BAUD_0</name></cpp:ifdef>			<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> = <name>CS8</name> | <name>CREAD</name> | <name>PARENB</name> | <name>HUPCL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* }{ !BAUD_0 */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> = <name>VAL_LINE_SPEED</name> | <name>CS8</name> | <name>CREAD</name> | <name>PARENB</name> | <name>HUPCL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } !BAUD_0 */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> = <name>CS8</name> | <name>CREAD</name> | <name>PARENB</name> | <name>HUPCL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfsetispeed</name><argument_list>(<argument><expr>&amp;<name>d_tio</name></expr></argument>, <argument><expr><name>VAL_LINE_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfsetospeed</name><argument_list>(<argument><expr>&amp;<name>d_tio</name></expr></argument>, <argument><expr><name>VAL_LINE_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> = <name>ISIG</name> | <name>ICANON</name> | <name>ECHO</name> | <name>ECHOE</name> | <name>ECHOK</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOKE</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> |= <name>ECHOKE</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOCTL</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> |= <name>ECHOCTL</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_POSIX_TERMIOS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NTTYDISC</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_line</name> = <name>NTTYDISC</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>d_tio</name>.<name>c_line</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sgi</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> &amp;= ~(<name>HUPCL</name> | <name>PARENB</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_iflag</name> |= <name>BRKINT</name> | <name>ISTRIP</name> | <name>IGNPAR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> &amp;= ~(<name>HUPCL</name> | <name>PARENB</name>)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<decl_stmt><decl><type><name>Cardinal</name></type> <name>nn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* try to inherit tty settings */</comment>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	    <decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>deftio</name></decl>;</decl_stmt>
	    <if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>&amp;<name>deftio</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<for>for (<init><expr><name>nn</name> = 0</expr>;</init> <condition><expr><name>nn</name> &lt; <call><name>XtNumber</name><argument_list>(<argument><expr><name>known_ttyChars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>nn</name></expr></incr>) <block>{
		    <if>if <condition>(<expr><call><name>validTtyChar</name><argument_list>(<argument><expr><name>d_tio</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>sysMode</name></expr>]</index></name> =
			    <name>deftio</name>.<name><name>c_cc</name><index>[<expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>sysMode</name></expr>]</index></name></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></for>
		<break>break;</break>
	    }</block></then></if>
	}</block></for>
    }</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TERMIOS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>USE_POSIX_TERMIOS</name></expr></argument>)</argument_list></call></expr></cpp:if>	<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>		<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_suspc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\000'</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* t_suspc */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_dsuspc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\000'</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* t_dsuspc */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_rprntc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\377'</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* reserved... */</comment>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_flushc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\377'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_werasc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\377'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_ltc</name>.<name>t_lnextc</name> = <call><name>CharOf</name><argument_list>(<argument><expr>'\377'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } HAS_LTCHARS */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>			<comment type="block">/* { */</comment>
    <expr_stmt><expr><name>d_lmode</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } TIOCLSET */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } macII, ATT, CRAY */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* } TERMIO_STRUCT */</comment>

    <comment type="block">/* Init the Toolkit. */</comment>
    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_SAVED_IDS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>setEffectiveGroup</name><argument_list>(<argument><expr><name>save_rgid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setEffectiveUser</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>XtSetErrorHandler</name><argument_list>(<argument><expr><name>xt_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
	<expr_stmt><expr><name>toplevel</name> = <call><name>XtOpenApplication</name><argument_list>(<argument><expr>&amp;<name>app_con</name></expr></argument>, <argument><expr><name>my_class</name></expr></argument>,
				     <argument><expr><name>optionDescList</name></expr></argument>,
				     <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>,
				     <argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fallback_resources</name></expr></argument>,
				     <argument><expr><name>sessionShellWidgetClass</name></expr></argument>,
				     <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>IceAddConnectionWatch</name><argument_list>(<argument><expr><name>icewatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>toplevel</name> = <call><name>XtAppInitialize</name><argument_list>(<argument><expr>&amp;<name>app_con</name></expr></argument>, <argument><expr><name>my_class</name></expr></argument>,
				   <argument><expr><name>optionDescList</name></expr></argument>,
				   <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fallback_resources</name></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_SESSION_MGT */</comment>
	<expr_stmt><expr><call><name>XtSetErrorHandler</name><argument_list>(<argument><expr>(<name>XtErrorHandler</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XtGetApplicationResources</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) &amp;<name>resource</name></expr></argument>,
				  <argument><expr><name>application_resources</name></expr></argument>,
				  <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>application_resources</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE_XRES</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	<expr_stmt><expr><name>resource</name>.<name>wait_for_map0</name> = <name>resource</name>.<name>wait_for_map</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_SAVED_IDS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETUID</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>setEffectiveUser</name><argument_list>(<argument><expr><name>save_euid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DISABLE_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>setEffectiveGroup</name><argument_list>(<argument><expr><name>save_egid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block>

    <comment type="block">/*
     * ICCCM delete_window.
     */</comment>
    <expr_stmt><expr><call><name>XtAppAddActions</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>, <argument><expr><name>actionProcs</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actionProcs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * fill in terminal modes
     */</comment>
    <if>if <condition>(<expr><name>resource</name>.<name>tty_modes</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>parse_tty_modes</name><argument_list>(<argument><expr><name>resource</name>.<name>tty_modes</name></expr></argument>, <argument><expr><name>ttymodelist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:  bad tty modes \"%s\"\n"</expr></argument>,
		    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>resource</name>.<name>tty_modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>override_tty_modes</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>zIconBeep</name> &gt; 100 || <name>resource</name>.<name>zIconBeep</name> &lt; -100</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>resource</name>.<name>zIconBeep</name> = 0</expr>;</expr_stmt>	<comment type="block">/* was 100, but I prefer to defaulting off. */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"a number between -100 and 100 is required for zIconBeep.  0 used by default\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_ZICONBEEP */</comment>
    <expr_stmt><expr><name>hold_screen</name> = <name>resource</name>.<name>hold_screen</name> ? 1 : 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>xterm_name</name> = <name>resource</name>.<name>xterm_name</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>xterm_name</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>xterm_name</name> = <name>DFT_TERMTYPE</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>resource</name>.<name>icon_geometry</name> != <name>NULL</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scr</name>, <name>junk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ix</name>, <name>iy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

	<for>for (<init><expr><name>scr</name> = 0</expr>;</init>		<comment type="block">/* yyuucchh */</comment>
	     <condition><expr><call><name>XtScreen</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call> != <call><name>ScreenOfDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</condition>
	     <incr><expr><name>scr</name>++</expr></incr>) <empty_stmt>;</empty_stmt></for>

	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>name</name> = <name>XtNiconX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>name</name> = <name>XtNiconY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XGeometry</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scr</name></expr></argument>, <argument><expr><name>resource</name>.<name>icon_geometry</name></expr></argument>, <argument><expr>""</expr></argument>,
		  <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ix</name></expr></argument>, <argument><expr>&amp;<name>iy</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>ix</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>iy</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>ourTopLevelShellArgs</name></expr></argument>,
		<argument><expr><name>number_ourTopLevelShellArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <comment type="block">/* seems as good a place as any */</comment>
    <expr_stmt><expr><call><name>init_classtab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Parse the rest of the command line */</comment>
    <expr_stmt><expr><call><name>TRACE_ARGV</name><argument_list>(<argument><expr>"After XtOpenApplication"</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</init> <condition><expr><name>argc</name> &gt; 0</expr>;</condition> <incr><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr></incr>) <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
	<if>if <condition>(<expr>**<name>argv</name> != '-'</expr>)</condition><then>
	    <expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if>if <condition>(<expr>**<name>argv</name> != '-'</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then>
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr><name>command_to_exec</name> == 0</expr>)</condition><then>	<comment type="block">/* if no "-e" option */</comment>
		<expr_stmt><expr><name>explicit_shname</name> = <call><name>xtermFindShell</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <continue>continue;</continue>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parsing %s\n", <name><name>argv</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr>0</expr>]</index><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
	<case>case <expr>'h'</expr>:		<comment type="block">/* -help */</comment>
	    <expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	</case><case>case <expr>'v'</expr>:		<comment type="block">/* -version */</comment>
	    <expr_stmt><expr><call><name>Version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	</case><case>case <expr>'C'</expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__sgi</name></cpp:ifndef>
	    <block>{
		<decl_stmt><decl><type>struct <name>stat</name></type> <name>sbuf</name></decl>;</decl_stmt>

		<comment type="block">/* Must be owner and have read/write permission.
		   xdm cooperates to give the console the right user. */</comment>
		<if>if <condition>(<expr>!<call><name>stat</name><argument_list>(<argument><expr>"/dev/console"</expr></argument>, <argument><expr>&amp;<name>sbuf</name></expr></argument>)</argument_list></call> &amp;&amp;
		    (<name>sbuf</name>.<name>st_uid</name> == <name>save_ruid</name>) &amp;&amp;
		    !<call><name>access</name><argument_list>(<argument><expr>"/dev/console"</expr></argument>, <argument><expr><name>R_OK</name> | <name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>Console</name> = <name>True</name></expr>;</expr_stmt>
		}</block></then> <else>else
		    <expr_stmt><expr><name>Console</name> = <name>False</name></expr>;</expr_stmt></else></if>
	    }</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* __sgi */</comment>
	    <expr_stmt><expr><name>Console</name> = <name>True</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __sgi */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCCONS */</comment>
	    <continue>continue;</continue>
	</case><case>case <expr>'S'</expr>:
	    <if>if <condition>(<expr>!<call><name>ParseSccn</name><argument_list>(<argument><expr>*<name>argv</name> + 2</expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <continue>continue;</continue>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	</case><case>case <expr>'D'</expr>:
	    <expr_stmt><expr><name>debug</name> = <name>True</name></expr>;</expr_stmt>
	    <continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>
	</case><case>case <expr>'c'</expr>:		<comment type="block">/* -class param */</comment>
	    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> + 1</expr></argument>, <argument><expr>"class"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
		<expr_stmt><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</expr_stmt></then>
	    <else>else
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	    <continue>continue;</continue>
	</case><case>case <expr>'e'</expr>:
	    <if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then>
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>command_to_exec</name> = ++<name>argv</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr>'i'</expr>:
	    <if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<decl_stmt><decl><type><name>char</name> *</type><name>endPtr</name></decl>;</decl_stmt>
		<expr_stmt><expr>--<name>argc</name></expr>;</expr_stmt>
		<expr_stmt><expr>++<name>argv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>winToEmbedInto</name> = (<name>Window</name>) <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>endPtr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <continue>continue;</continue>

	</case><default>default:
	    <expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>
	<break>break;</break>
    }</block></for>

    <expr_stmt><expr><call><name>SetupMenus</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr>&amp;<name>form_top</name></expr></argument>, <argument><expr>&amp;<name>menu_top</name></expr></argument>, <argument><expr>&amp;<name>menu_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>term</name> = (<name>XtermWidget</name>) <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr>"vt100"</expr></argument>, <argument><expr><name>xtermWidgetClass</name></expr></argument>,
						 <argument><expr><name>form_top</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
						 <argument><expr><name>XtNmenuBar</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
						 <argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
						 <argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
						 <argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XawChainLeft</name></expr></argument>,
						 <argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XawChainRight</name></expr></argument>,
						 <argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XawChainTop</name></expr></argument>,
						 <argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XawChainBottom</name></expr></argument>,
						 <argument><expr><name>XtNmenuHeight</name></expr></argument>, <argument><expr><name>menu_high</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						 <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decode_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>screen</name> = <call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> = 0</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>logInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_LOG</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>signalInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_SIGNAL</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>tekInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_TEK</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * We might start by showing the tek4014 window.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> = <name>False</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>TekInit</name><argument_list>()</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Start the toolbar at this point, after the first window has been setup.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ShowToolbar</name><argument_list>(<argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>sessionMgt</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Enabling session-management callbacks\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>XtNdieCallback</name></expr></argument>, <argument><expr><name>die_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>XtNsaveCallback</name></expr></argument>, <argument><expr><name>save_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Set title and icon name if not specified
     */</comment>
    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<name>resource</name>.<name>title</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>resource</name>.<name>title</name> = <call><name>x_basename</name><argument_list>(<argument><expr><name><name>command_to_exec</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>			<comment type="block">/* else not reached */</comment>
	}</block></then></if>

	<if>if <condition>(<expr>!<name>resource</name>.<name>icon_name</name></expr>)</condition><then>
	    <expr_stmt><expr><name>resource</name>.<name>icon_name</name> = <name>resource</name>.<name>title</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>resource</name>.<name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconName</name></expr></argument>, <argument><expr><name>resource</name>.<name>icon_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setting:\n\ttitle \"%s\"\n\ticon \"%s\"\n\tbased on command \"%s\"\n",
	       <name>resource</name>.<name>title</name>,
	       <name>resource</name>.<name>icon_name</name>,
	       *<name>command_to_exec</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>callfilter</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>u</name> =<init> <expr>(<name>term</name>-&gt;<name>misc</name>.<name>use_encoding</name> ? 2 : 0)</expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> **</type><name>c</name></decl>;</decl_stmt>
	    <for>for (<init><expr><name>n</name> = 0</expr>, <expr><name>c</name> = <name>command_to_exec</name></expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>n</name>++</expr>, <expr><name>c</name>++</expr></incr>) <empty_stmt>;</empty_stmt></for>
	    <expr_stmt><expr><name>c</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>n</name> + 3 + <name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>c</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_LUMALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name> + 2 + <name>u</name></expr></argument>, <argument><expr><name>command_to_exec</name></expr></argument>, <argument><expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>n</name> + 1</expr></argument>)</argument_list></call> * <call><name>sizeof</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>c</name><index>[<expr>0</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>localefilter</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>u</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>c</name><index>[<expr>1</expr>]</index></name> = "-encoding"</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr>2</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>locale_str</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name><name>c</name><index>[<expr>1 + <name>u</name></expr>]</index></name> = "--"</expr>;</expr_stmt>
	    <expr_stmt><expr><name>command_to_exec_with_luit</name> = <name>c</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name><name>luit</name><index>[<expr>6</expr>]</index></name></decl>;</decl_stmt>
	    <expr_stmt><expr><name><name>luit</name><index>[<expr>0</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>localefilter</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>u</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>luit</name><index>[<expr>1</expr>]</index></name> = "-encoding"</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>luit</name><index>[<expr>2</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>locale_str</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>luit</name><index>[<expr>3</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
	    }</block></then> <else>else
		<expr_stmt><expr><name><name>luit</name><index>[<expr>1</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
	    <expr_stmt><expr><name>command_to_exec_with_luit</name> = <name>luit</name></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <block>{
	<comment type="block">/* Set up stderr properly.  Opening this log file cannot be
	   done securely by a privileged xterm process (although we try),
	   so the debug feature is disabled by default. */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dbglogfile</name><index>[<expr>45</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>timestamp_filename</name><argument_list>(<argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr>"xterm.debug.log."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>creat_as</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>, <argument><expr><name>save_rgid</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* mark this file as close on exec */</comment>
	    <expr_stmt><expr>(<name>void</name>) <call><name>fcntl</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

    <expr_stmt><expr><call><name>spawnXTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
    <comment type="block">/* Child process is out there, let's catch its termination */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_POSIX_SIGNALS</name></cpp:ifdef>
    <expr_stmt><expr>(<name>void</name>) <call><name>posix_signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>reapchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>reapchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* Realize procs have now been executed */</comment>

    <if>if <condition>(<expr><name>am_slave</name> &gt;= 0</expr>)</condition><then> <block>{	<comment type="block">/* Write window id so master end can read and use */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"%lx\n"</expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AIXV3</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OSMAJORVERSION</name> &lt; 4)</expr></cpp:if>
    <comment type="block">/* In AIXV3, xterms started from /dev/console have CLOCAL set.
     * This means we need to clear CLOCAL so that SIGHUP gets sent
     * to the slave-pty process when xterm exits.
     */</comment>

    <block>{
	<decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>tio</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_TIOCGETP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name>tio</name>.<name>c_cflag</name> &amp;= ~(<name>CLOCAL</name>)</expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>ttySetAttr</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ANY_SYSV_TERMIO</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr>0 &gt; (<name>mode</name> = <call><name>fcntl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>O_NDELAY</name></cpp:ifdef>
    <expr_stmt><expr><name>mode</name> |= <name>O_NDELAY</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>mode</name> |= <name>O_NONBLOCK</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_NDELAY */</comment>
    <if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_F_SETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !USE_ANY_SYSV_TERMIO */</comment>
    <expr_stmt><expr><name>mode</name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>mode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_FIONBIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_ANY_SYSV_TERMIO, etc */</comment>

    <comment type="block">/* The erase character is used to delete the current completion */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DABBREV</name></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
    <expr_stmt><expr><name>screen</name>-&gt;<name>dabbrev_erase_char</name> = <name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>screen</name>-&gt;<name>dabbrev_erase_char</name> = <name>d_sg</name>.<name>sg_erase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("set dabbrev erase_char %#x\n", <name>screen</name>-&gt;<name>dabbrev_erase_char</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>pty_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>X_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>pty_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>X_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_plus1</name> = ((<name>screen</name>-&gt;<name>respond</name> &lt; <call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call>)
		 ? (1 + <call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call>)
		 : (1 + <name>screen</name>-&gt;<name>respond</name>))</expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !VMS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if>if <condition>(<expr><name>debug</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"debugging on\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>
    <expr_stmt><expr><call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>xerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XSetIOErrorHandler</name><argument_list>(<argument><expr><name>xioerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initPtyData</name><argument_list>(<argument><expr>&amp;<name>VTbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>log_on</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>StartLog</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>winToEmbedInto</name> != <name>None</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XtRealizeWidget</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * This should probably query the tree or check the attributes of
	 * winToEmbedInto in order to verify that it exists, but I'm still not
	 * certain what is the best way to do it -GPS
	 */</comment>
	<expr_stmt><expr><call><name>XReparentWindow</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>winToEmbedInto</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("checking resource values rv %s fg %s, bg %s\n",
	   <call><name>BtoS</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>re_verse0</name></expr></argument>)</argument_list></call>,
	   <call><name>NonNull</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>,
	   <call><name>NonNull</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>reversed</name> &amp;&amp; <name>term</name>-&gt;<name>misc</name>.<name>re_verse0</name>)
	&amp;&amp; ((<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name>
	     &amp;&amp; !<call><name>isDefaultForeground</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)
	    || (<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name>
		&amp;&amp; !<call><name>isDefaultBackground</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)
	)</expr>)</condition><then>
	<expr_stmt><expr><call><name>ReverseVideo</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_COLOR_RES */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>maximized</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>RequestMaximize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	<if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>VTRun</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call> || (<call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_USG_PTYS</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_OPENPTY</name> 1</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>opened_tty</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This function opens up a pty master and stuffs its value into pty.
 *
 * If it finds one, it returns a value of 0.  If it does not find one,
 * it returns a value of !0.  This routine is designed to be re-entrant,
 * so that if a pty master is found and later, we find that the slave
 * has problems, we can re-enter this function and get another one.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>get_pty</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>, <param><decl><type><name>char</name> *<name>from</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PUCC_PTYD</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt><expr><name>result</name> = ((*<name>pty</name> = <call><name>openrpty</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>ptydev</name></expr></argument>,
			       <argument><expr>(<name>resource</name>.<name>utmpInhibit</name> ? <name>OPTY_NOP</name> : <name>OPTY_LOGIN</name>)</expr></argument>,
			       <argument><expr><name>save_ruid</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call>) &lt; 0)</expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_OPENPTY</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt><expr><name>result</name> = <call><name>openpty</name><argument_list>(<argument><expr><name>pty</name></expr></argument>, <argument><expr>&amp;<name>opened_tty</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ISPTS_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block">/*
       The order of this code is *important*.  On SYSV/386 we want to open
       a /dev/ttyp? first if at all possible.  If none are available, then
       we'll try to open a /dev/pts??? device.

       The reason for this is because /dev/ttyp? works correctly, where
       as /dev/pts??? devices have a number of bugs, (won't update
       screen correcly, will hang -- it more or less works, but you
       really don't want to use it).

       Most importantly, for boxes of this nature, one of the major
       "features" is that you can emulate a 8086 by spawning off a UNIX
       program on 80386/80486 in v86 mode.  In other words, you can spawn
       off multiple MS-DOS environments.  On ISC the program that does
       this is named "vpix."  The catcher is that "vpix" will *not* work
       with a /dev/pts??? device, will only work with a /dev/ttyp? device.

       Since we can open either a /dev/ttyp? or a /dev/pts??? device,
       the flag "IsPts" is set here so that we know which type of
       device we're dealing with in routine spawnXTerm().  That's the reason
       for the "if (IsPts)" statement in spawnXTerm(); we have two different
       device types which need to be handled differently.
     */</comment>
    <expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
	<expr_stmt><expr><name>IsPts</name> = 0</expr>;</expr_stmt></then></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_USG_PTYS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GLIBC__</name></cpp:ifdef>		<comment type="block">/* if __GLIBC__ and USE_USG_PTYS, we know glibc &gt;= 2.1 */</comment>
    <comment type="block">/* GNU libc 2 allows us to abstract away from having to know the
       master pty device name. */</comment>
    <if>if <condition>(<expr>(*<name>pty</name> = <call><name>getpt</name><argument_list>()</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr><call><name>ptsname</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>name</name> != 0</expr>)</condition><then> <block>{	<comment type="block">/* if filesystem is trashed, this may be null */</comment>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ISPTS_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>result</name> = ((*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/ptmx"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &lt; 0)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>USE_ISPTS_FLAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><call><name>ptsname</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ISPTS_FLAG</name></cpp:ifdef>
	<expr_stmt><expr><name>IsPts</name> = !<name>result</name></expr>;</expr_stmt>	<comment type="block">/* true if we're successful */</comment>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AIXV3</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/ptc"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><call><name>ttyname</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__convex__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <decl_stmt><decl><type><name>char</name> *</type><name>pty_name</name></decl>;</decl_stmt>
    <function_decl><type><name>extern</name> <name>char</name> *</type><name>getpty</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

    <while>while <condition>(<expr>(<name>pty_name</name> = <call><name>getpty</name><argument_list>()</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
	<if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr><name>pty_name</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>pty_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>pty_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>*<call><name>x_basename</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> = 't'</expr>;</expr_stmt>
	    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
	    <break>break;</break>
	}</block></then></if>
    }</block></while>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sequent</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt><expr><name>result</name> = ((*<name>pty</name> = <call><name>getpseudotty</name><argument_list>(<argument><expr>&amp;<name>ttydev</name></expr></argument>, <argument><expr>&amp;<name>ptydev</name></expr></argument>)</argument_list></call>) &lt; 0)</expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &gt;= 4)</expr></cpp:elif>

    <decl_stmt><decl><type><name>char</name> *</type><name>tty_name</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>tty_name</name> = <call><name>_getpty</name><argument_list>(<argument><expr><name>pty</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr>0622</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tty_name</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>tty_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &lt; 4)) || (<call><name>defined</name><argument_list>(<argument><expr><name>umips</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SYSTYPE_SYSV</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>

    <decl_stmt><decl><type>struct <name>stat</name></type> <name>fstat_buf</name></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/ptc"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>pty</name> &gt;= 0 &amp;&amp; (<call><name>fstat</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>, <argument><expr>&amp;<name>fstat_buf</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr>"/dev/ttyq%d"</expr></argument>, <argument><expr><call><name>minor</name><argument_list>(<argument><expr><name>fstat_buf</name>.<name>st_rdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block">/*
     * Use the clone device if it works, otherwise use pty_search logic.
     */</comment>
    <if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/ptym/clone"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr><call><name>ptsname</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>name</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
	}</block></then> <else>else <block>{		<comment type="block">/* permissions, or other unexpected problem */</comment>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>*<name>pty</name> = -1</expr>;</expr_stmt>
	    <expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <expr_stmt><expr><name>result</name> = <call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("get_pty(ttydev=%s, ptydev=%s) %s fd=%d\n",
	   <name>ttydev</name> != 0 ? <name>ttydev</name> : "?",
	   <name>ptydev</name> != 0 ? <name>ptydev</name> : "?",
	   <name>result</name> ? "FAIL" : "OK",
	   <name>pty</name> != 0 ? *<name>pty</name> : -1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>set_pty_permissions</name><parameter_list>(<param><decl><type><name>uid_t</name></type> <name>uid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>, <param><decl><type><name>mode_t</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TTY_GROUP</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>group</name> *</type><name>ttygrp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>ttygrp</name> = <call><name>getgrnam</name><argument_list>(<argument><expr><name>TTY_GROUP_NAME</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>gid</name> = <name>ttygrp</name>-&gt;<name>gr_gid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mode</name> &amp;= 0660U</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>endgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_TTY_GROUP */</comment>

    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>get_pty</name></cpp:ifdef>			<comment type="block">/* USE_UTMP_SETGID */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>get_pty</name></cpp:undef>
<comment type="block">/*
 * Call the real get_pty() before relinquishing root-setuid, caching the
 * result.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>get_pty</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>, <param><decl><type><name>char</name> *</type><name>from</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>m_pty</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>pty</name> == <name>NULL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>result</name> = <call><name>really_get_pty</name><argument_list>(<argument><expr>&amp;<name>m_pty</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>seteuid</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_pty_permissions</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>, <argument><expr><name>save_rgid</name></expr></argument>, <argument><expr>0600U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>seteuid</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_OPENPTY</name></cpp:ifdef>
	<if>if <condition>(<expr><name>opened_tty</name> &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>opened_tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>opened_tty</name> = -1</expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else <if>if <condition>(<expr><name>m_pty</name> != -1</expr>)</condition><then> <block>{
	<expr_stmt><expr>*<name>pty</name> = <name>m_pty</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Called from get_pty to iterate over likely pseudo terminals
 * we might allocate.  Used on those systems that do not have
 * a functional interface for allocating a pty.
 * Returns 0 if found a pty, 1 if fails.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PTY_SEARCH</name></cpp:ifdef>
<function><type><name>static</name> <name>int</name></type>
<name>pty_search</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>devindex</name> =<init> <expr>0</expr>, <expr><name>letter</name> = 0</expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MVS__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <while>while <condition>(<expr><name>devindex</name> &lt; <name>MAXPTTYS</name></expr>)</condition> <block>{
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>TTYFORMAT</name></expr></argument>, <argument><expr><name>devindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>PTYFORMAT</name></expr></argument>, <argument><expr><name>devindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>devindex</name>++</expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("pty_search(ttydev=%s, ptydev=%s)\n", <name>ttydev</name>, <name>ptydev</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	    <return>return <expr>0</expr>;</return>
	}</block></then></if>
    }</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* CRAY || __MVS__ */</comment>
    <while>while <condition>(<expr><name><name>PTYCHAR1</name><index>[<expr><name>letter</name></expr>]</index></name></expr>)</condition> <block>{
	<expr_stmt><expr><name><name>ttydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> - 2</expr>]</index></name> =
	    <name><name>ptydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>)</argument_list></call> - 2</expr>]</index></name> = <name><name>PTYCHAR1</name><index>[<expr><name>letter</name></expr>]</index></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>PTYCHAR2</name><index>[<expr><name>devindex</name></expr>]</index></name></expr>)</condition> <block>{
	    <expr_stmt><expr><name><name>ttydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> =
		<name><name>ptydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = <name><name>PTYCHAR2</name><index>[<expr><name>devindex</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>devindex</name>++</expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("pty_search(ttydev=%s, ptydev=%s)\n", <name>ttydev</name>, <name>ptydev</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sun</name></cpp:ifdef>
		<comment type="block">/* Need to check the process group of the pty.
		 * If it exists, then the slave pty is in use,
		 * and we need to get another one.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pgrp_rtn</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>, <argument><expr><name>TIOCGPGRP</name></expr></argument>, <argument><expr>&amp;<name>pgrp_rtn</name></expr></argument>)</argument_list></call> == 0 || <name>errno</name> != <name>EIO</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <continue>continue;</continue>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sun */</comment>
		<return>return <expr>0</expr>;</return>
	    }</block></then></if>
	}</block></while>
	<expr_stmt><expr><name>devindex</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>letter</name>++</expr>;</expr_stmt>
    }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRAY else */</comment>
    <comment type="block">/*
     * We were unable to allocate a pty master!  Return an error
     * condition and let our caller terminate cleanly.
     */</comment>
    <return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_PTY_SEARCH */</comment>

<comment type="block">/*
 * The only difference in /etc/termcap between 4014 and 4015 is that
 * the latter has support for switching character sets.  We support the
 * 4015 protocol, but ignore the character switches.  Therefore, we
 * choose 4014 over 4015.
 *
 * Features of the 4014 over the 4012: larger (19") screen, 12-bit
 * graphics addressing (compatible with 4012 10-bit addressing),
 * special point plot mode, incremental plot mode (not implemented in
 * later Tektronix terminals), and 4 character sizes.
 * All of these are supported by xterm.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *</type><name><name>tekterm</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"tek4014"</expr>,
    <expr>"tek4015"</expr>,			<comment type="block">/* 4014 with APL character set support */</comment>
    <expr>"tek4012"</expr>,			<comment type="block">/* 4010 with lower case */</comment>
    <expr>"tek4013"</expr>,			<comment type="block">/* 4012 with APL character set support */</comment>
    <expr>"tek4010"</expr>,			<comment type="block">/* small screen, upper-case only */</comment>
    <expr>"dumb"</expr>,
    <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The VT102 is a VT100 with the Advanced Video Option included standard.
 * It also adds Escape sequences for insert/delete character/line.
 * The VT220 adds 8-bit character sets, selective erase.
 * The VT320 adds a 25th status line, terminal state interrogation.
 * The VT420 has up to 48 lines on the screen.
 */</comment>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *</type><name><name>vtterm</name><index>[]</index></name> =<init>
<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_X11TERM</name></cpp:ifdef>
    <expr>"x11term"</expr>,			<comment type="block">/* for people who want special term name */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>DFT_TERMTYPE</name></expr>,		<comment type="block">/* for people who want special term name */</comment>
    <expr>"xterm"</expr>,			<comment type="block">/* the prefered name, should be fastest */</comment>
    <expr>"vt102"</expr>,
    <expr>"vt100"</expr>,
    <expr>"ansi"</expr>,
    <expr>"dumb"</expr>,
    <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>SIGNAL_T</name></type>
<name>hungtty</name><parameter_list>(<param><decl><type><name>int</name> <name>i</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>siglongjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NO_FDS</name> {-1, -1}</cpp:define>

<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name><name>cp_pipe</name><index>[<expr>2</expr>]</index></name> =<init> <expr><name>NO_FDS</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* this pipe is used for child to parent transfer */</comment>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name><name>pc_pipe</name><index>[<expr>2</expr>]</index></name> =<init> <expr><name>NO_FDS</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* this pipe is used for parent to child transfer */</comment>

<typedef>typedef <type><enum>enum <block>{			<comment type="block">/* c == child, p == parent                        */</comment>
    <expr><name>PTY_BAD</name></expr>,			<comment type="block">/* c-&gt;p: can't open pty slave for some reason     */</comment>
    <expr><name>PTY_FATALERROR</name></expr>,		<comment type="block">/* c-&gt;p: we had a fatal error with the pty        */</comment>
    <expr><name>PTY_GOOD</name></expr>,			<comment type="block">/* c-&gt;p: we have a good pty, let's go on          */</comment>
    <expr><name>PTY_NEW</name></expr>,			<comment type="block">/* p-&gt;c: here is a new pty slave, try this        */</comment>
    <expr><name>PTY_NOMORE</name></expr>,			<comment type="block">/* p-&gt;c; no more pty's, terminate                 */</comment>
    <expr><name>UTMP_ADDED</name></expr>,			<comment type="block">/* c-&gt;p: utmp entry has been added                */</comment>
    <expr><name>UTMP_TTYSLOT</name></expr>,		<comment type="block">/* c-&gt;p: here is my ttyslot                       */</comment>
    <expr><name>PTY_EXEC</name></expr>			<comment type="block">/* p-&gt;c: window has been mapped the first time    */</comment>
}</block></enum></type> <name>status_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fatal_error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tty_slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>handshake_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>trace_handshake</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>handshake_t</name> *</type> <name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>status</name> =<init> <expr>"?"</expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>data</name>-&gt;<name>status</name></expr>)</condition> <block>{
    <case>case <expr><name>PTY_BAD</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_BAD"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>PTY_FATALERROR</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_FATALERROR"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>PTY_GOOD</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_GOOD"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>PTY_NEW</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_NEW"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>PTY_NOMORE</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_NOMORE"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>UTMP_ADDED</name></expr>:
	<expr_stmt><expr><name>status</name> = "UTMP_ADDED"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>UTMP_TTYSLOT</name></expr>:
	<expr_stmt><expr><name>status</name> = "UTMP_TTYSLOT"</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>PTY_EXEC</name></expr>:
	<expr_stmt><expr><name>status</name> = "PTY_EXEC"</expr>;</expr_stmt>
	<break>break;</break>
    </case>}</block></switch>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("handshake %s %s errno=%d, error=%d device \"%s\"\n",
	   <name>tag</name>,
	   <name>status</name>,
	   <name>data</name>-&gt;<name>error</name>,
	   <name>data</name>-&gt;<name>fatal_error</name>,
	   <name>data</name>-&gt;<name>buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TRACE_HANDSHAKE</name>(tag, data) trace_handshake(tag, data)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TRACE_HANDSHAKE</name>(tag, data)</cpp:define>	<comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* HsSysError()
 *
 * This routine does the equivalent of a SysError but it handshakes
 * over the errno and error exit to the master process so that it can
 * display our error message and exit with our exit code so that the
 * user can see it.
 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>HsSysError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>handshake_t</name></type> <name>handshake</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>handshake</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_FATALERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>handshake</name>.<name>error</name> = <name>errno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>handshake</name>.<name>fatal_error</name> = <name>error</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name> &amp;&amp; (<name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name> &gt;= 0)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("HsSysError errno=%d, error=%d device \"%s\"\n",
	       <name>handshake</name>.<name>error</name>,
	       <name>handshake</name>.<name>fatal_error</name>,
	       <name>handshake</name>.<name>buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>IGNORE_RC</name><argument_list>(<argument>write(cp_pipe[1],
			(const char *) &amp;handshake,
			sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"%s: fatal pty error errno=%d, error=%d device \"%s\"\n"</expr></argument>,
		<argument><expr><name>ProgramName</name></expr></argument>,
		<argument><expr><name>handshake</name>.<name>error</name></expr></argument>,
		<argument><expr><name>handshake</name>.<name>fatal_error</name></expr></argument>,
		<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>SysErrorMsg</name><argument_list>(<argument><expr><name>handshake</name>.<name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Reason: %s\n"</expr></argument>, <argument><expr><call><name>SysReasonMsg</name><argument_list>(<argument><expr><name>handshake</name>.<name>fatal_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>first_map_occurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>resource</name>.<name>wait_for_map</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>handshake_t</name></type> <name>handshake</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>handshake</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_EXEC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>handshake</name>.<name>rows</name> = <name>screen</name>-&gt;<name>max_row</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>handshake</name>.<name>cols</name> = <name>screen</name>-&gt;<name>max_col</name></expr>;</expr_stmt>

	<if>if <condition>(<expr><name><name>pc_pipe</name><index>[<expr>1</expr>]</index></name> &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("first_map_occurred: %dx%d\n", <name>handshake</name>.<name>rows</name>, <name>handshake</name>.<name>cols</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <macro><name>IGNORE_RC</name><argument_list>(<argument>write(pc_pipe[1],
			    (const char *) &amp;handshake,
			    sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>resource</name>.<name>wait_for_map</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
 * temporary hack to get xterm working on att ptys
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>HsSysError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>error</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: fatal pty error %d (errno=%d) on tty %s\n"</expr></argument>,
	    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE else !OPT_PTY_HANDSHAKE */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
<function><type><name>static</name> <name>void</name></type>
<name>set_owner</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>, <param><decl><type><name>uid_t</name></type> <name>uid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>, <param><decl><type><name>mode_t</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>why</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("set_owner(%s, uid=%d, gid=%d, mode=%#o\n",
	   <name>device</name>, <name>uid</name>, <name>gid</name>, (<name>unsigned</name>) <name>mode</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>chown</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>why</name> = <name>errno</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>why</name> != <name>ENOENT</name>
	    &amp;&amp; <name>save_ruid</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot chown %s to %ld,%ld: %s\n"</expr></argument>,
		    <argument><expr><name>device</name></expr></argument>, <argument><expr>(<name>long</name>) <name>uid</name></expr></argument>, <argument><expr>(<name>long</name>) <name>gid</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...chown failed: %s\n", <call><name>strerror</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>why</name> = <name>errno</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>why</name> != <name>ENOENT</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type>struct <name>stat</name></type> <name>sb</name></decl>;</decl_stmt>
	    <if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot chmod %s to %03o: %s\n"</expr></argument>,
			<argument><expr><name>device</name></expr></argument>, <argument><expr>(<name>unsigned</name>) <name>mode</name></expr></argument>,
			<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr><name>mode</name> != (<name>sb</name>.<name>st_mode</name> &amp; 0777U)</expr>)</condition><then> <block>{
		<macro><name>fprintf</name><argument_list>(<argument>stderr</argument>,
			<argument>"Cannot chmod %s to %03lo currently %03lo: %s\n"</argument>,
			<argument>device</argument>,
			<argument>(unsigned long) mode</argument>,
			<argument>(unsigned long) (sb.st_mode &amp; 0777U)</argument>,
			<argument>strerror(why)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...stat uid=%d, gid=%d, mode=%#o\n",
		       <name>sb</name>.<name>st_uid</name>, <name>sb</name>.<name>st_gid</name>, (<name>unsigned</name>) <name>sb</name>.<name>st_mode</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if></else></if>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...chmod failed: %s\n", <call><name>strerror</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * getutid() only looks at ut_type and ut_id.
 * But we'll also check ut_line in find_utmp().
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>init_utmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type>struct <name>UTMP_STR</name> *</type><name>tofind</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tofind</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>tofind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tofind</name>-&gt;<name>ut_type</name> = <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>tofind</name>-&gt;<name>ut_id</name></expr></argument>, <argument><expr><call><name>my_utmp_id</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>tofind</name>-&gt;<name>ut_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>tofind</name>-&gt;<name>ut_line</name></expr></argument>, <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>tofind</name>-&gt;<name>ut_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * We could use getutline() if we didn't support old systems.
 */</comment>
<function><type><name>static</name> struct <name>UTMP_STR</name> *</type>
<name>find_utmp</name><parameter_list>(<param><decl><type>struct <name>UTMP_STR</name> *</type><name>tofind</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>UTMP_STR</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>UTMP_STR</name></type> <name>working</name></decl>;</decl_stmt>

    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>working</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>working</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>working</name>.<name>ut_type</name> = <name>tofind</name>-&gt;<name>ut_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>working</name>.<name>ut_id</name></expr></argument>, <argument><expr><name>tofind</name>-&gt;<name>ut_id</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>tofind</name>-&gt;<name>ut_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__digital__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__unix__</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>OSMAJORVERSION</name></expr></argument>)</argument_list></call> &amp;&amp; <name>OSMAJORVERSION</name> &lt; 5)</expr></cpp:if>
	<expr_stmt><expr><name>working</name>.<name>ut_type</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>(<name>result</name> = <call><name>call_getutid</name><argument_list>(<argument><expr>&amp;<name>working</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	    <break>break;</break></then></if>
	<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>result</name>-&gt;<name>ut_line</name></expr></argument>, <argument><expr><name>tofind</name>-&gt;<name>ut_line</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <break>break;</break></then></if>
	<comment type="block">/*
	 * Solaris, IRIX64 and HPUX manpages say to fill the static area
	 * pointed to by the return-value to zeros if searching for multiple
	 * occurrences.  Otherwise it will continue to return the same value.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UTMP... */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>close_fd</name>(fd) close(fd), fd = -1</cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCNOTTY</name></expr></argument>)</argument_list></call> &amp;&amp; (!<call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> || (<name>__GLIBC__</name> &lt; 2) || ((<name>__GLIBC__</name> == 2) &amp;&amp; (<name>__GLIBC_MINOR__</name> &lt; 1)))</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_NO_DEV_TTY</name> 1</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_NO_DEV_TTY</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *  Inits pty and tty and forks a login process.
 *  Does not close fd Xsocket.
 *  If slave, the pty named in passedPty is already open for use
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>spawnXTerm</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>nn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>Bool</name></type> <name>got_handshake_size</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>handshake_t</name></type> <name>handshake</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>initial_erase</name> =<init> <expr><name>VAL_INITIAL_ERASE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>setInitialErase</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttyfd</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>ok_termcap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>newtc</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
    <decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>tio</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
    <decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>gio</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>lmode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCLSET */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>ltchars</name></type> <name>ltc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_LTCHARS */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ldisc</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>discipline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>lmode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>tchars</name></type> <name>tc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>ltchars</name></type> <name>ltc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>sgttyb</name></type> <name>sg</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>jmode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>jtchars</name></type> <name>jtc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>

    <decl_stmt><decl><type><name>char</name> *</type><name>ptr</name>, *<name>shname</name>, *<name>shname_minus</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_NO_DEV_TTY</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>no_dev_tty</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>const</name> <name>char</name> **</type><name>envnew</name></decl>;</decl_stmt>	<comment type="block">/* new environment */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>TermName</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TTYSIZE_STRUCT</name></cpp:ifdef>
    <decl_stmt><decl><type><name>TTYSIZE_STRUCT</name></type> <name>ts</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type>struct <name>passwd</name> *</type><name>pw</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>login_name</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_UTEMPTER</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>UTMP_STR</name></type> <name>utmp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_UTMP</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>UTMP_STR</name> *</type><name>utret</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LASTLOG</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>lastlog</name></type> <name>lastlog</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LASTLOGX</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>lastlogx</name></type> <name>lastlogx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_LASTLOG */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UTMP */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !USE_UTEMPTER */</comment>

    <comment type="block">/* Noisy compilers (suppress some unused-variable warnings) */</comment>
    <expr_stmt><expr>(<name>void</name>) <name>rc</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_UTMP</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr>(<name>void</name>) <name>utret</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>screen</name>-&gt;<name>uid</name> = <name>save_ruid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>gid</name> = <name>save_rgid</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGTTOU</name></cpp:ifdef>
    <comment type="block">/* so that TIOCSWINSZ || TIOCSIZE doesn't block */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>handshake</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>am_slave</name> &gt;= 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>respond</name> = <name>am_slave</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_pty_id</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>passedPty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_PTY_DEVICE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>set_pty_id</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>passedPty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr><call><name>xtermResetIds</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then> <else>else <block>{
	<decl_stmt><decl><type><name>Bool</name></type> <name>tty_got_hung</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sometimes /dev/tty hangs on open (as in the case of a pty
	 * that has gone away).  Simply make up some reasonable
	 * defaults.
	 */</comment>

	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>hungtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* alarm(1) might return too soon */</comment>
	<if>if <condition>(<expr>!<call><name>sigsetjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>ttyfd</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/tty"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tty_got_hung</name> = <name>False</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>tty_got_hung</name> = <name>True</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ttyfd</name> = -1</expr>;</expr_stmt>
	    <expr_stmt><expr><name>errno</name> = <name>ENXIO</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name>pw</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	<expr_stmt><expr><name>got_handshake_size</name> = <name>False</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
	<expr_stmt><expr><name>initial_erase</name> = <name>VAL_INITIAL_ERASE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check results and ignore current control terminal if
	 * necessary.  ENXIO is what is normally returned if there is
	 * no controlling terminal, but some systems (e.g. SunOS 4.0)
	 * seem to return EIO.  Solaris 2.3 is said to return EINVAL.
	 * Cygwin returns ENOENT.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_NO_DEV_TTY</name></expr></cpp:if>
	<expr_stmt><expr><name>no_dev_tty</name> = <name>False</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr><name>ttyfd</name> &lt; 0</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>tty_got_hung</name> || <name>errno</name> == <name>ENXIO</name> || <name>errno</name> == <name>EIO</name> ||
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENODEV</name></cpp:ifdef>
		<name>errno</name> == <name>ENODEV</name> ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__CYGWIN__</name></cpp:ifdef>
		<name>errno</name> == <name>ENOENT</name> ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<name>errno</name> == <name>EINVAL</name> || <name>errno</name> == <name>ENOTTY</name> || <name>errno</name> == <name>EACCES</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_NO_DEV_TTY</name></expr></cpp:if>
		<expr_stmt><expr><name>no_dev_tty</name> = <name>True</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
		<expr_stmt><expr><name>ltc</name> = <name>d_ltc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_LTCHARS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>
		<expr_stmt><expr><name>lmode</name> = <name>d_lmode</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCLSET */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
		<expr_stmt><expr><name>tio</name> = <name>d_tio</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
		<expr_stmt><expr><name>sg</name> = <name>d_sg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tc</name> = <name>d_tc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>discipline</name> = <name>d_disipline</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
		<expr_stmt><expr><name>jmode</name> = <name>d_jmode</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>jtc</name> = <name>d_jtc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_OPDEVTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then> <else>else <block>{

	    <comment type="block">/* Get a copy of the current terminal's state,
	     * if we can.  Some systems (e.g., SVR4 and MacII)
	     * may not have a controlling terminal at this point
	     * if started directly from xdm or xinit,
	     * in which case we just use the defaults as above.
	     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCGLTC</name></expr></argument>, <argument><expr>&amp;<name>ltc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>ltc</name> = <name>d_ltc</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_LTCHARS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCLGET</name></expr></argument>, <argument><expr>&amp;<name>lmode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>lmode</name> = <name>d_lmode</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCLSET */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
	    <expr_stmt><expr><name>rc</name> = <call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>tio</name> = <name>d_tio</name></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
	    <expr_stmt><expr><name>rc</name> = <call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>sg</name> = <name>d_sg</name></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCGETC</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>tc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>tc</name> = <name>d_tc</name></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCGETD</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>discipline</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>discipline</name> = <name>d_disipline</name></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCKGET</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>jmode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>jmode</name> = <name>d_jmode</name></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCKGETC</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>jtc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>jtc</name> = <name>d_jtc</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>

	    <comment type="block">/*
	     * If ptyInitialErase is set, we want to get the pty's
	     * erase value.  Just in case that will fail, first get
	     * the value from /dev/tty, so we will have something
	     * at least.
	     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>resource</name>.<name>ptyInitialErase</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
		<expr_stmt><expr><name>initial_erase</name> = <name>tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
		<expr_stmt><expr><name>initial_erase</name> = <name>sg</name>.<name>sg_erase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("%s initial_erase:%d (from /dev/tty)\n",
		       <name>rc</name> == 0 ? "OK" : "FAIL",
		       <name>initial_erase</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
	    <if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>gio</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>gio</name>.<name>c_cflag</name> &amp;= ~(<name>HUPCL</name> | <name>PARENB</name>)</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ttySetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>gio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>

	    <expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<if>if <condition>(<expr><call><name>get_pty</name><argument_list>(<argument><expr>&amp;<name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><call><name>XDisplayString</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_PTYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
	<if>if <condition>(<expr><name>resource</name>.<name>ptyInitialErase</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
	    <decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>my_tio</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>rc</name> = <call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>my_tio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then>
		<expr_stmt><expr><name>initial_erase</name> = <name>my_tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
	    <decl_stmt><decl><type>struct <name>sgttyb</name></type> <name>my_sg</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>rc</name> = <call><name>ioctl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>my_sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then>
		<expr_stmt><expr><name>initial_erase</name> = <name>my_sg</name>.<name>sg_erase</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("%s initial_erase:%d (from pty)\n",
		   (<name>rc</name> == 0) ? "OK" : "FAIL",
		   <name>initial_erase</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_INITIAL_ERASE */</comment>
    }</block></else></if>

    <comment type="block">/* avoid double MapWindow requests */</comment>
    <expr_stmt><expr><call><name>XtSetMappedWhenManaged</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>wm_delete_window</name> = <call><name>XInternAtom</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"WM_DELETE_WINDOW"</expr></argument>,
				   <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>VTInit</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>		<comment type="block">/* realize now so know window size for tty driver */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if>if <condition>(<expr><name>Console</name></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * Inform any running xconsole program
	 * that we are going to steal the console.
	 */</comment>
	<expr_stmt><expr><call><name>XmuGetHostname</name><argument_list>(<argument><expr><name>mit_console_name</name> + <name>MIT_CONSOLE_LEN</name></expr></argument>, <argument><expr>255</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mit_console</name> = <call><name>XInternAtom</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>mit_console_name</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* the user told us to be the console, so we can use CurrentTime */</comment>
	<expr_stmt><expr><call><name>XtOwnSelection</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		       <argument><expr><name>mit_console</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>,
		       <argument><expr><name>ConvertConsoleSelection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>envnew</name> = <name>tekterm</name></expr>;</expr_stmt>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><name>envnew</name> = <name>vtterm</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/*
     * This used to exit if no termcap entry was found for the specified
     * terminal name.  That's a little unfriendly, so instead we'll allow
     * the program to proceed (but not to set $TERMCAP) if the termcap
     * entry is not found.
     */</comment>
    <expr_stmt><expr><name>ok_termcap</name> = <name>True</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>get_termcap</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>TermName</name> = <name>resource</name>.<name>term_name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>last</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>next</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>TermName</name> = <call><name>x_strdup</name><argument_list>(<argument><expr>*<name>envnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ok_termcap</name> = <name>False</name></expr>;</expr_stmt>
	<while>while <condition>(<expr>*<name>envnew</name> != <name>NULL</name></expr>)</condition> <block>{
	    <if>if <condition>(<expr><name>last</name> == <name>NULL</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr>*<name>envnew</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>next</name> = <call><name>x_strdup</name><argument_list>(<argument><expr>*<name>envnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>get_termcap</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>TermName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>TermName</name> = <name>next</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ok_termcap</name> = <name>True</name></expr>;</expr_stmt>
		    <break>break;</break>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	    }</block></then></if>
	    <expr_stmt><expr><name>last</name> = *<name>envnew</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>envnew</name>++</expr>;</expr_stmt>
	}</block></while>
    }</block></then></if>
    <if>if <condition>(<expr><name>ok_termcap</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>resize_termcap</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Check if ptyInitialErase is not set.  If so, we rely on the termcap
     * (or terminfo) to tell us what the erase mode should be set to.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("resource ptyInitialErase is %sset\n",
	   <name>resource</name>.<name>ptyInitialErase</name> ? "" : "not ")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>setInitialErase</name> = <name>False</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>override_tty_modes</name> &amp;&amp; <name><name>ttymodelist</name><index>[<expr><name>XTTYMODE_erase</name></expr>]</index></name>.<name>set</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>initial_erase</name> = <name><name>ttymodelist</name><index>[<expr><name>XTTYMODE_erase</name></expr>]</index></name>.<name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>setInitialErase</name> = <name>True</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>resource</name>.<name>ptyInitialErase</name></expr>)</condition><then> <block>{
	<empty_stmt>;</empty_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>ok_termcap</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>s</name> =<init> <expr><call><name>get_tcap_erase</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...extracting initial_erase value from termcap\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>s</name> != 0</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>char</name> *</type><name>save</name> =<init> <expr><name>s</name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>initial_erase</name> = <call><name>decode_keyvalue</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>setInitialErase</name> = <name>True</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if></else></if></else></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...initial_erase:%d\n", <name>initial_erase</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("resource backarrowKeyIsErase is %sset\n",
	   <name>resource</name>.<name>backarrow_is_erase</name> ? "" : "not ")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>resource</name>.<name>backarrow_is_erase</name></expr>)</condition><then> <block>{	<comment type="block">/* see input.c */</comment>
	<if>if <condition>(<expr><name>initial_erase</name> == <name>ANSI_DEL</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>UIntClr</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>keyboard</name>.<name>flags</name></expr></argument>, <argument><expr><name>MODE_DECBKM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>xw</name>-&gt;<name>keyboard</name>.<name>flags</name> |= <name>MODE_DECBKM</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>xw</name>-&gt;<name>keyboard</name>.<name>reset_DECBKM</name> = 1</expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...sets DECBKM %s\n",
	       (<name>xw</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECBKM</name>) ? "on" : "off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>xw</name>-&gt;<name>keyboard</name>.<name>reset_DECBKM</name> = 2</expr>;</expr_stmt>
    }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_INITIAL_ERASE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TTYSIZE_STRUCT</name></cpp:ifdef>
    <comment type="block">/* tell tty how big window is */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 38</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 81</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STRUCT_WINSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = <call><name>TFullWidth</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = <call><name>TFullHeight</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STRUCT_WINSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = (<name>ttySize_t</name>) <call><name>FullWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = (<name>ttySize_t</name>) <call><name>FullHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>
    <expr_stmt><expr><call><name>TRACE_RC</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>SET_TTYSIZE</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spawn SET_TTYSIZE %dx%d return %d\n",
	   <call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call>,
	   <call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call>, <name>i</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TTYSIZE_STRUCT */</comment>

    <expr_stmt><expr><name>added_utmp_entry</name> = <name>False</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTEMPTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UTMP</name></cpp:undef>
    <if>if <condition>(<expr>!<name>resource</name>.<name>utmpInhibit</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type>struct <name>UTMP_STR</name></type> <name>dummy</name></decl>;</decl_stmt>

	<comment type="block">/* Note: utempter may trim it anyway */</comment>
	<expr_stmt><expr><call><name>SetUtmpHost</name><argument_list>(<argument><expr><name>dummy</name>.<name>ut_host</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>addToUtmp</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>dummy</name>.<name>ut_host</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>added_utmp_entry</name> = <name>True</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>am_slave</name> &lt; 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	<if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name> &amp;&amp; (<call><name>pipe</name><argument_list>(<argument><expr><name>pc_pipe</name></expr></argument>)</argument_list></call> || <call><name>pipe</name><argument_list>(<argument><expr><name>cp_pipe</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Forking...\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>screen</name>-&gt;<name>pid</name> = <call><name>fork</name><argument_list>()</argument_list></call>) == -1</expr>)</condition><then>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if>if <condition>(<expr><name>screen</name>-&gt;<name>pid</name> == 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_USG_PTYS</name></cpp:ifdef>
	    <decl_stmt><decl><type><name>int</name></type> <name>ptyfd</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> *</type><name>pty_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/*
	     * now in child process
	     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_SOURCE</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__convex__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <decl_stmt><decl><type><name>int</name></type> <name>pgrp</name> =<init> <expr><call><name>setsid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* variable may not be used... */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <decl_stmt><decl><type><name>int</name></type> <name>pgrp</name> =<init> <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><name><name><name>TRACE_CHILD</name></name></name>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_USG_PTYS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ISPTS_FLAG</name></cpp:ifdef>
		if (<name>IsPts</name>) <block>{	<comment type="block">/* SYSV386 supports both, which did we open? */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><call><name>setpgrp</name><argument_list>()</argument_list></call></expr>;</block></expr></expr_stmt>
		<expr_stmt><expr><call><name>grantpt</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unlockpt</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>pty_name</name> = <call><name>ptsname</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_PTSNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <if>if <condition>(<expr>(<name>ptyfd</name> = <call><name>open</name><argument_list>(<argument><expr><name>pty_name</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_OPPTSNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>I_PUSH</name></cpp:ifdef>
		<else>else <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ptyfd</name></expr></argument>, <argument><expr><name>I_PUSH</name></expr></argument>, <argument><expr>"ptem"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_PTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> &amp;&amp; !(<call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
		<else>else <if>if <condition>(<expr>!<call><name>x_getenv</name><argument_list>(<argument><expr>"CONSEM"</expr></argument>)</argument_list></call>
			 &amp;&amp; <call><name>ioctl</name><argument_list>(<argument><expr><name>ptyfd</name></expr></argument>, <argument><expr><name>I_PUSH</name></expr></argument>, <argument><expr>"consem"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_CONSEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SVR4 */</comment>
		<else>else <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ptyfd</name></expr></argument>, <argument><expr><name>I_PUSH</name></expr></argument>, <argument><expr>"ldterm"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_LDTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVR4</name></cpp:ifdef>			<comment type="block">/* from Sony */</comment>
		<else>else <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ptyfd</name></expr></argument>, <argument><expr><name>I_PUSH</name></expr></argument>, <argument><expr>"ttcompat"</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_TTCOMPAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVR4 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* I_PUSH */</comment>
		<expr_stmt><expr><name>ttyfd</name> = <name>ptyfd</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MVS__</name></cpp:ifndef>
		<expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TTYSIZE_STRUCT</name></cpp:ifdef>
		<comment type="block">/* tell tty how big window is */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
		<if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 24</expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 80</expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_STRUCT_WINSIZE</name></cpp:ifdef>
		    <expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = <call><name>TFullWidth</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = <call><name>TFullHeight</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>
		<block>{
		    <expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_STRUCT_WINSIZE</name></cpp:ifdef>
		    <expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = (<name>ttySize_t</name>) <call><name>FullWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = (<name>ttySize_t</name>) <call><name>FullHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TTYSIZE_STRUCT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ISPTS_FLAG</name></cpp:ifdef>
	    }</block></then> <else>else <block>{		<comment type="block">/* else pty, not pts */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_USG_PTYS */</comment>

		<expr_stmt><expr>(<name>void</name>) <name>pgrp</name></expr>;</expr_stmt>	<comment type="block">/* not all branches use this variable */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>		<comment type="block">/* warning, goes for a long ways */</comment>
		<if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name></expr>)</condition><then> <block>{
		    <comment type="block">/* close parent's sides of the pipes */</comment>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <comment type="block">/* Make sure that our sides of the pipes are not in the
		     * 0, 1, 2 range so that we don't fight with stdin, out
		     * or err.
		     */</comment>
		    <if>if <condition>(<expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name> &lt;= 2</expr>)</condition><then> <block>{
			<if>if <condition>(<expr>(<name>i</name> = <call><name>fcntl</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>F_DUPFD</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
			}</block></then></if>
		    }</block></then></if>
		    <if>if <condition>(<expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name> &lt;= 2</expr>)</condition><then> <block>{
			<if>if <condition>(<expr>(<name>i</name> = <call><name>fcntl</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>F_DUPFD</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
			}</block></then></if>
		    }</block></then></if>

		    <comment type="block">/* we don't need the socket, or the pty master anymore */</comment>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MVS__</name></cpp:ifndef>
		    <if>if <condition>(<expr><name>screen</name>-&gt;<name>respond</name> &gt;= 0</expr>)</condition><then>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>

		    <comment type="block">/* Now is the time to set up our process group and
		     * open up the pty slave.
		     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &gt; 5)</expr></cpp:if>
		    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>setpgrp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_PGRP */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>
		    <expr_stmt><expr><call><name>qsetlogin</name><argument_list>(<argument><expr><call><name>getlogin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		    <if>if <condition>(<expr><name>ttyfd</name> &gt;= 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
			<if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>gio</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><name>gio</name>.<name>c_cflag</name> &amp;= ~(<name>HUPCL</name> | <name>PARENB</name>)</expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>ttySetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>gio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__MVS__ */</comment>
			<expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>
		    }</block></then></if>

		    <while>while <condition>(<expr>1</expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_NO_DEV_TTY</name></expr></cpp:if>
			<if>if <condition>(<expr>!<name>no_dev_tty</name>
			    &amp;&amp; (<name>ttyfd</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/tty"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCNOTTY</name></expr></argument>, <argument><expr>(<name>char</name> *) <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_NO_DEV_TTY */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CSRG_BASED</name></cpp:ifdef>
			<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>revoke</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if>if <condition>(<expr>(<name>ttyfd</name> = <call><name>open</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>TCSETCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
			    <comment type="block">/* make /dev/tty work */</comment>
			    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TCSETCTTY</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>((<call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD_kernel__</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>__GNU__</name></expr></argument>)</argument_list></call>) &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>TIOCSCTTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
			    <comment type="block">/* make /dev/tty work */</comment>
			    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSCTTY</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_PGRP</name></cpp:ifdef>
			    <comment type="block">/* We need to make sure that we are actually
			     * the process group leader for the pty.  If
			     * we are, then we should now be able to open
			     * /dev/tty.
			     */</comment>
			    <if>if <condition>(<expr>(<name>i</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/tty"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
				<comment type="block">/* success! */</comment>
				<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_SYSV_PGRP */</comment>
			    <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_PGRP */</comment>
			}</block></then></if>
			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"open ttydev"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCSCTTY</name></cpp:ifdef>
			<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSCTTY</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<comment type="block">/* let our master know that the open failed */</comment>
			<expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_BAD</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>handshake</name>.<name>error</name> = <name>errno</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<macro><name>IGNORE_RC</name><argument_list>(<argument>write(cp_pipe[1],
					(const char *) &amp;handshake,
					sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

			<comment type="block">/* get reply from parent */</comment>
			<expr_stmt><expr><name>i</name> = (<name>int</name>) <call><name>read</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>handshake</name></expr></argument>,
				       <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name> &lt;= 0</expr>)</condition><then> <block>{
			    <comment type="block">/* parent terminated */</comment>
			    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<if>if <condition>(<expr><name>handshake</name>.<name>status</name> == <name>PTY_NOMORE</name></expr>)</condition><then> <block>{
			    <comment type="block">/* No more ptys, let's shutdown. */</comment>
			    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<comment type="block">/* We have a new pty to try */</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ttydev</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></while>

		    <comment type="block">/* use the same tty name that everyone else will use
		     * (from ttyname)
		     */</comment>
		    <if>if <condition>(<expr>(<name>ptr</name> = <call><name>ttyname</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ttydev</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE -- from near fork */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ISPTS_FLAG</name></cpp:ifdef>
	    }</block></else></if>			<comment type="block">/* end of IsPts else clause */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr><call><name>set_pty_permissions</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>,
				<argument><expr><name>screen</name>-&gt;<name>gid</name></expr></argument>,
				<argument><expr>(<name>resource</name>.<name>messages</name>
				 ? 0622U
				 : 0600U)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/*
	     * set up the tty modes
	     */</comment>
	    <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>umips</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<comment type="block">/* If the control tty had its modes screwed around with,
		   eg. by lineedit in the shell, or emacs, etc. then tio
		   will have bad values.  Let's just get termio from the
		   new tty and tailor it.  */</comment>
		<if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_TIOCGETP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>tio</name>.<name>c_lflag</name> |= <name>ECHOE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* umips */</comment>
		<comment type="block">/* Now is also the time to change the modes of the
		 * child pty.
		 */</comment>
		<comment type="block">/* input: nl-&gt;nl, don't ignore cr, cr-&gt;nl */</comment>
		<expr_stmt><expr><call><name>UIntClr</name><argument_list>(<argument><expr><name>tio</name>.<name>c_iflag</name></expr></argument>, <argument><expr>(<name>INLCR</name> | <name>IGNCR</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tio</name>.<name>c_iflag</name> |= <name>ICRNL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>IUTF8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
		<if>if <condition>(<expr><name>command_to_exec_with_luit</name> == 0</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		    <if>if <condition>(<expr><name>screen</name>-&gt;<name>utf8_mode</name></expr>)</condition><then>
			<expr_stmt><expr><name>tio</name>.<name>c_iflag</name> |= <name>IUTF8</name></expr>;</expr_stmt></then></if></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<comment type="block">/* ouput: cr-&gt;cr, nl is not return, no delays, ln-&gt;cr/nl */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_POSIX_TERMIOS</name></cpp:ifndef>
		<expr_stmt><expr><call><name>UIntClr</name><argument_list>(<argument><expr><name>tio</name>.<name>c_oflag</name></expr></argument>,
			<argument><expr>(<name>OCRNL</name>
			 | <name>ONLRET</name>
			 | <name>NLDLY</name>
			 | <name>CRDLY</name>
			 | <name>TABDLY</name>
			 | <name>BSDLY</name>
			 | <name>VTDLY</name>
			 | <name>FFDLY</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLCR</name></cpp:ifdef>
		<expr_stmt><expr><name>tio</name>.<name>c_oflag</name> |= <name>ONLCR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ONLCR */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPOST</name></cpp:ifdef>
		<expr_stmt><expr><name>tio</name>.<name>c_oflag</name> |= <name>OPOST</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPOST */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_POSIX_TERMIOS</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Lynx</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>CBAUD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>CBAUD</name> <name>V_CBAUD</name></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>UIntClr</name><argument_list>(<argument><expr><name>tio</name>.<name>c_cflag</name></expr></argument>, <argument><expr><name>CBAUD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BAUD_0</name></cpp:ifdef>
		<comment type="block">/* baud rate is 0 (don't care) */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIO_C_ISPEED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><name>tio</name>.<name>c_ispeed</name> = <name>tio</name>.<name>c_ospeed</name> = <name>VAL_LINE_SPEED</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !BAUD_0 */</comment>
		<expr_stmt><expr><name>tio</name>.<name>c_cflag</name> |= <name>VAL_LINE_SPEED</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !BAUD_0 */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
		<expr_stmt><expr><call><name>cfsetispeed</name><argument_list>(<argument><expr>&amp;<name>tio</name></expr></argument>, <argument><expr><name>VAL_LINE_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>cfsetospeed</name><argument_list>(<argument><expr>&amp;<name>tio</name></expr></argument>, <argument><expr><name>VAL_LINE_SPEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
		<comment type="block">/* turn off bits that can't be set from the slave side */</comment>
		<expr_stmt><expr><name>tio</name>.<name>c_cflag</name> &amp;= ~(<name>PACKET</name> | <name>PKT3270</name> | <name>PTU3270</name> | <name>PKTXTND</name>)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MVS__ */</comment>
		<comment type="block">/* Clear CLOCAL so that SIGHUP is sent to us
		   when the xterm ends */</comment>
		<expr_stmt><expr><name>tio</name>.<name>c_cflag</name> &amp;= ~<name>CLOCAL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_POSIX_TERMIOS */</comment>
		<comment type="block">/* enable signals, canonical processing (erase, kill, etc),
		 * echo
		 */</comment>
		<expr_stmt><expr><name>tio</name>.<name>c_lflag</name> |= <name>ISIG</name> | <name>ICANON</name> | <name>ECHO</name> | <name>ECHOE</name> | <name>ECHOK</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOKE</name></cpp:ifdef>
		<expr_stmt><expr><name>tio</name>.<name>c_lflag</name> |= <name>ECHOKE</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ECHOCTL</name></cpp:ifdef>
		<expr_stmt><expr><name>tio</name>.<name>c_lflag</name> |= <name>ECHOCTL</name> | <name>IEXTEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<for>for (<init><expr><name>nn</name> = 0</expr>;</init> <condition><expr><name>nn</name> &lt; <call><name>XtNumber</name><argument_list>(<argument><expr><name>known_ttyChars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>nn</name></expr></incr>) <block>{
		    <if>if <condition>(<expr><call><name>validTtyChar</name><argument_list>(<argument><expr><name>tio</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>sysMode</name> =<init> <expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>sysMode</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__MVS__</name></cpp:ifdef>
			<if>if <condition>(<expr><name>tio</name>.<name><name>c_cc</name><index>[<expr><name>sysMode</name></expr>]</index></name> != 0</expr>)</condition><then> <block>{
			    <switch>switch <condition>(<expr><name>sysMode</name></expr>)</condition> <block>{
			    <case>case <expr><name>VEOL</name></expr>:
			    </case><case>case <expr><name>VEOF</name></expr>:
				<continue>continue;</continue>
			    </case>}</block></switch>
			}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>tio</name>.<name><name>c_cc</name><index>[<expr><name>sysMode</name></expr>]</index></name> = <name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>myDefault</name></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></for>

		<if>if <condition>(<expr><name>override_tty_modes</name></expr>)</condition><then> <block>{
		    <for>for (<init><expr><name>nn</name> = 0</expr>;</init> <condition><expr><name>nn</name> &lt; <call><name>XtNumber</name><argument_list>(<argument><expr><name>known_ttyChars</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>nn</name></expr></incr>) <block>{
			<if>if <condition>(<expr><call><name>validTtyChar</name><argument_list>(<argument><expr><name>tio</name></expr></argument>, <argument><expr><name>nn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>myMode</name></expr></argument>,
				  <argument><expr><name>tio</name>.<name><name>c_cc</name><index>[<expr><name><name>known_ttyChars</name><index>[<expr><name>nn</name></expr>]</index></name>.<name>sysMode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		    }</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
		    <comment type="block">/* both SYSV and BSD have ltchars */</comment>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_susp</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_suspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_dsusp</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_dsuspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_rprnt</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_rprntc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_flush</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_flushc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_weras</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_werasc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_lnext</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_lnextc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_LTCHARS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__hpux</name></cpp:ifdef>
		<comment type="block">/* ioctl chokes when the "reserved" process group controls
		 * are not set to _POSIX_VDISABLE */</comment>
		<expr_stmt><expr><name>ltc</name>.<name>t_rprntc</name> = <name>ltc</name>.<name>t_rprntc</name> = <name>ltc</name>.<name>t_flushc</name> =
		    <name>ltc</name>.<name>t_werasc</name> = <name>ltc</name>.<name>t_lnextc</name> = <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __hpux */</comment>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSLTC</name></expr></argument>, <argument><expr>&amp;<name>ltc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAS_LTCHARS */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCLSET</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCLSET</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>lmode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCLSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCLSET */</comment>
		<if>if <condition>(<expr><call><name>ttySetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<comment type="block">/* ignore errors here - some platforms don't work */</comment>
		<expr_stmt><expr><call><name>UIntClr</name><argument_list>(<argument><expr><name>tio</name>.<name>c_cflag</name></expr></argument>, <argument><expr><name>CSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>screen</name>-&gt;<name>input_eight_bits</name></expr>)</condition><then>
		    <expr_stmt><expr><name>tio</name>.<name>c_cflag</name> |= <name>CS8</name></expr>;</expr_stmt></then>
		<else>else
		    <expr_stmt><expr><name>tio</name>.<name>c_cflag</name> |= <name>CS7</name></expr>;</expr_stmt></else></if>
		<expr_stmt><expr>(<name>void</name>) <call><name>ttySetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
		<expr_stmt><expr><name>sg</name>.<name>sg_flags</name> &amp;= ~(<name>ALLDELAY</name> | <name>XTABS</name> | <name>CBREAK</name> | <name>RAW</name>)</expr>;</expr_stmt>
		<expr_stmt><expr><name>sg</name>.<name>sg_flags</name> |= <name>ECHO</name> | <name>CRMOD</name></expr>;</expr_stmt>
		<comment type="block">/* make sure speed is set on pty so that editors work right */</comment>
		<expr_stmt><expr><name>sg</name>.<name>sg_ispeed</name> = <name>VAL_LINE_SPEED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sg</name>.<name>sg_ospeed</name> = <name>VAL_LINE_SPEED</name></expr>;</expr_stmt>
		<comment type="block">/* reset t_brkc to default value */</comment>
		<expr_stmt><expr><name>tc</name>.<name>t_brkc</name> = -1</expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LPASS8</name></cpp:ifdef>
		<if>if <condition>(<expr><name>screen</name>-&gt;<name>input_eight_bits</name></expr>)</condition><then>
		    <expr_stmt><expr><name>lmode</name> |= <name>LPASS8</name></expr>;</expr_stmt></then>
		<else>else
		    <expr_stmt><expr><name>lmode</name> &amp;= ~(<name>LPASS8</name>)</expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
		<expr_stmt><expr><name>jmode</name> &amp;= ~<name>KM_KANJI</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>

		<expr_stmt><expr><name>ltc</name> = <name>d_ltc</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>override_tty_modes</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_intr</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_intrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_quit</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_quitc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_erase</name></expr></argument>, <argument><expr><name>sg</name>.<name>sg_erase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_kill</name></expr></argument>, <argument><expr><name>sg</name>.<name>sg_kill</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_eof</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_eofc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_start</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_startc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_stop</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_stopc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_brk</name></expr></argument>, <argument><expr><name>tc</name>.<name>t_brkc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block">/* both SYSV and BSD have ltchars */</comment>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_susp</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_suspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_dsusp</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_dsuspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_rprnt</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_rprntc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_flush</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_flushc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_weras</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_werasc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TMODE</name><argument_list>(<argument><expr><name>XTTYMODE_lnext</name></expr></argument>, <argument><expr><name>ltc</name>.<name>t_lnextc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>sg</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSETC</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>tc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSETD</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>discipline</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSETD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSLTC</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>ltc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCSLTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCLSET</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>lmode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCLSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sony</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCKSET</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>jmode</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCKSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCKSETC</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>jtc</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><call><name>HsSysError</name><argument_list>(<argument><expr><name>ERROR_TIOCKSETC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* sony */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCCONS</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SRIOCSREDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if>if <condition>(<expr><name>Console</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCCONS</name></cpp:ifdef>
		    <decl_stmt><decl><type><name>int</name></type> <name>on</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
		    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCCONS</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>on</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot open console: %s\n"</expr></argument>,
				<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SRIOCSREDIR</name></cpp:ifdef>
		    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> =<init> <expr><call><name>open</name><argument_list>(<argument><expr>"/dev/console"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if>if <condition>(<expr><name>fd</name> == -1 || <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SRIOCSREDIR</name></expr></argument>, <argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot open console: %s\n"</expr></argument>,
				<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIOCCONS */</comment>
	    }</block>

	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_SIGHUP</name></cpp:ifdef>
	    <comment type="block">/* watch out for extra shells (I don't understand either) */</comment>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* restore various signals to their defaults */</comment>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/*
	     * If we're not asked to let the parent process set the terminal's
	     * erase mode, or if we had the ttyModes erase resource, then set
	     * the terminal's erase mode from our best guess.
	     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("check if we should set erase to %d:%s\n\tptyInitialErase:%d,\n\toveride_tty_modes:%d,\n\tXTTYMODE_erase:%d\n",
		   <name>initial_erase</name>,
		   <name>setInitialErase</name> ? "YES" : "NO",
		   <name>resource</name>.<name>ptyInitialErase</name>,
		   <name>override_tty_modes</name>,
		   <name><name>ttymodelist</name><index>[<expr><name>XTTYMODE_erase</name></expr>]</index></name>.<name>set</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>setInitialErase</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
		<decl_stmt><decl><type><name>int</name></type> <name>old_erase</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><name>tio</name> = <name>d_tio</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
		<expr_stmt><expr><name>old_erase</name> = <name>tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> = <name>initial_erase</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE_RC</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>ttySetAttr</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TERMIO_STRUCT */</comment>
		<if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>sg</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		    <expr_stmt><expr><name>sg</name> = <name>d_sg</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
		<expr_stmt><expr><name>old_erase</name> = <name>sg</name>.<name>sg_erase</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>sg</name>.<name>sg_erase</name> = <name>initial_erase</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>rc</name> = <call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCSETP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>sg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TERMIO_STRUCT */</comment>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("%s setting erase to %d (was %d)\n",
		       <name>rc</name> ? "FAIL" : "OK", <name>initial_erase</name>, <name>old_erase</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr><call><name>xtermCopyEnv</name><argument_list>(<argument><expr><name>environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"TERM"</expr></argument>, <argument><expr><name>TermName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<name>TermName</name></expr>)</condition><then>
		<expr_stmt><expr>*<call><name>get_tcap_buffer</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> = 0</expr>;</expr_stmt></then></if>

	    <macro><name>sprintf</name><argument_list>(<argument>buf</argument>, <argument>"%lu"</argument>,
		    <argument>((unsigned long) XtWindow(SHELL_OF(CURRENT_EMU())))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"WINDOWID"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* put the display into the environment of the shell */</comment>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"DISPLAY"</expr></argument>, <argument><expr><call><name>XDisplayString</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_VERSION"</expr></argument>, <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_LOCALE"</expr></argument>, <argument><expr><call><name>xtermEnvLocale</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* this is the time to go and set up stdin, out, and err
	     */</comment>
	    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>OSMAJORVERSION</name> &gt;= 6)</expr></cpp:if>
		<expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name>open</name><argument_list>(<argument><expr>"/dev/tty"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_OPDEVTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dup</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dup</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* dup the tty */</comment>
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
		    <if>if <condition>(<expr><name>i</name> != <name>ttyfd</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>dup</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if></for>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ATT</name></cpp:ifndef>
		<comment type="block">/* and close the tty */</comment>
		<if>if <condition>(<expr><name>ttyfd</name> &gt; 2</expr>)</condition><then>
		    <expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CRAY */</comment>
	    }</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_PGRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCSCTTY</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>TIOCSCTTY</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>TIOCSPGRP</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>pgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>setpgrp</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>open</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>setpgrp</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <expr_stmt><expr><call><name>tcsetpgrp</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pgrp</name></expr></argument> <comment type="block">/*setsid() */</comment> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !USE_SYSV_PGRP */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Lynx</name></cpp:ifdef>
	    <block>{
		<decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>t</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>ttyGetAttr</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call> &gt;= 0</expr>)</condition><then> <block>{
		    <comment type="block">/* this gets lost somewhere on our way... */</comment>
		    <expr_stmt><expr><name>t</name>.<name>c_oflag</name> |= <name>OPOST</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>ttySetAttr</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP</name></cpp:ifdef>
	    <expr_stmt><expr><name>pw</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>login_name</name> = <name>NULL</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>pw</name> &amp;&amp; <name>pw</name>-&gt;<name>pw_name</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_GETLOGIN</name></cpp:ifdef>
		<comment type="block">/*
		 * If the value from getlogin() differs from the value we
		 * get by looking in the password file, check if it does
		 * correspond to the same uid.  If so, allow that as an
		 * alias for the uid.
		 *
		 * Of course getlogin() will fail if we're started from
		 * a window-manager, since there's no controlling terminal
		 * to fuss with.  In that case, try to get something useful
		 * from the user's $LOGNAME or $USER environment variables.
		 */</comment>
		<if>if <condition>(<expr>((<name>login_name</name> = <call><name>getlogin</name><argument_list>()</argument_list></call>) != <name>NULL</name>
		     || (<name>login_name</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"LOGNAME"</expr></argument>)</argument_list></call>) != <name>NULL</name>
		     || (<name>login_name</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"USER"</expr></argument>)</argument_list></call>) != <name>NULL</name>)
		    &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>login_name</name></expr></argument>, <argument><expr><name>pw</name>-&gt;<name>pw_name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <decl_stmt><decl><type>struct <name>passwd</name> *</type><name>pw2</name> =<init> <expr><call><name>getpwnam</name><argument_list>(<argument><expr><name>login_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if>if <condition>(<expr><name>pw2</name> != 0</expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>uid_t</name></type> <name>uid2</name> =<init> <expr><name>pw2</name>-&gt;<name>pw_uid</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>pw</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>uid_t</name>) <name>pw</name>-&gt;<name>pw_uid</name> != <name>uid2</name></expr>)</condition><then>
			    <expr_stmt><expr><name>login_name</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
		    }</block></then> <else>else <block>{
			<expr_stmt><expr><name>pw</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></else></if>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if>if <condition>(<expr><name>login_name</name> == <name>NULL</name></expr>)</condition><then>
		    <expr_stmt><expr><name>login_name</name> = <name>pw</name>-&gt;<name>pw_name</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>login_name</name> != <name>NULL</name></expr>)</condition><then>
		    <expr_stmt><expr><name>login_name</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>login_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    }</block></then></if>
	    <if>if <condition>(<expr><name>login_name</name> != <name>NULL</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"LOGNAME"</expr></argument>, <argument><expr><name>login_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* for POSIX */</comment>
	    }</block></then></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_UTEMPTER</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UTMP_SETGID</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>setEffectiveGroup</name><argument_list>(<argument><expr><name>save_egid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_UTMP</name></cpp:ifdef>
	    <comment type="block">/* Set up our utmp entry now.  We need to do it here
	     * for the following reasons:
	     *   - It needs to have our correct process id (for
	     *     login).
	     *   - If our parent was to set it after the fork(),
	     *     it might make it out before we need it.
	     *   - We need to do it before we go and change our
	     *     user and group id's.
	     */</comment>
	    <expr_stmt><expr>(<name>void</name>) <call><name>call_setutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>init_utmp</name><argument_list>(<argument><expr><name>DEAD_PROCESS</name></expr></argument>, <argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* position to entry in utmp file */</comment>
	    <comment type="block">/* Test return value: beware of entries left behind: PSz 9 Mar 00 */</comment>
	    <expr_stmt><expr><name>utret</name> = <call><name>find_utmp</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>utret</name> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr>(<name>void</name>) <call><name>call_setutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>init_utmp</name><argument_list>(<argument><expr><name>USER_PROCESS</name></expr></argument>, <argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>utret</name> = <call><name>find_utmp</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>utret</name> == 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr>(<name>void</name>) <call><name>call_setutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
	    <if>if <condition>(<expr>!<name>utret</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("getutid: NULL\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	    <else>else
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("getutid: pid=%d type=%d user=%s line=%s id=%s\n",
		       (<name>int</name>) <name>utret</name>-&gt;<name>ut_pid</name>, <name>utret</name>-&gt;<name>ut_type</name>, <name>utret</name>-&gt;<name>ut_user</name>,
		       <name>utret</name>-&gt;<name>ut_line</name>, <name>utret</name>-&gt;<name>ut_id</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <comment type="block">/* set up the new entry */</comment>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_type</name> = <name>USER_PROCESS</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_XSTATUS</name></cpp:ifdef>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_xstatus</name> = 2</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_user</name></expr></argument>,
			   <argument><expr>(<name>login_name</name> != <name>NULL</name>) ? <name>login_name</name> : "????"</expr></argument>,
			   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* why are we copying this string again?  (see above) */</comment>
	    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_id</name></expr></argument>, <argument><expr><call><name>my_utmp_id</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>,
			   <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_HOST</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>SetUtmpHost</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_host</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_SYSLEN</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>SetUtmpSysLen</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_name</name></expr></argument>,
			   <argument><expr>(<name>login_name</name>) ? <name>login_name</name> : "????"</expr></argument>,
			   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>utmp</name>.<name>ut_pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP_UT_XTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP_UT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_session</name> = <call><name>getsid</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_xtime</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_tv</name>.<name>tv_usec</name> = 0</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_time</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <comment type="block">/* write out the entry */</comment>
	    <if>if <condition>(<expr>!<name>resource</name>.<name>utmpInhibit</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>call_pututline</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("pututline: id %s, line %s, pid %ld, errno %d %s\n",
		       <name>utmp</name>.<name>ut_id</name>,
		       <name>utmp</name>.<name>ut_line</name>,
		       (<name>long</name>) <name>utmp</name>.<name>ut_pid</name>,
		       <name>errno</name>, (<name>errno</name> != 0) ? <call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WTMP</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WTMPX_FILE</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>updwtmpx</name><argument_list>(<argument><expr><name>WTMPX_FILE</name></expr></argument>, <argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>__GLIBC__</name> &gt;= 2) &amp;&amp; !(<call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>__GLIBC__</name> == 2) &amp;&amp; (<name>__GLIBC_MINOR__</name> == 0))</expr></cpp:elif>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>call_updwtmp</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp;
		(<name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_APPEND</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* close the file */</comment>
	    <expr_stmt><expr>(<name>void</name>) <call><name>call_endutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_SYSV_UTMP */</comment>
	    <comment type="block">/* We can now get our ttyslot!  We can also set the initial
	     * utmp entry.
	     */</comment>
	    <expr_stmt><expr><name>tslot</name> = <call><name>ttyslot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>added_utmp_entry</name> = <name>False</name></expr>;</expr_stmt>
	    <block>{
		<if>if <condition>(<expr><name>tslot</name> &gt; 0 &amp;&amp; <name>pw</name> &amp;&amp; !<name>resource</name>.<name>utmpInhibit</name> &amp;&amp;
		    (<name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_utmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>,
				   <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_name</name></expr></argument>, <argument><expr><name>login_name</name></expr></argument>,
				   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_HOST</name></cpp:ifdef>
		    <expr_stmt><expr><call><name>SetUtmpHost</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_host</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP_UT_SYSLEN</name></cpp:ifdef>
		    <expr_stmt><expr><call><name>SetUtmpSysLen</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		    <expr_stmt><expr><name>utmp</name>.<name>ut_time</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>tslot</name> * <call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>added_utmp_entry</name> = <name>True</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WTMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
		    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp;
			(<name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_APPEND</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>status</name> = <call><name>write</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> = <call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MNX_LASTLOG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp;
			(<name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>_U_LASTLOG</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name> *
					 <call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WTMP or MNX_LASTLOG */</comment>
		}</block></then> <else>else
		    <expr_stmt><expr><name>tslot</name> = -<name>tslot</name></expr>;</expr_stmt></else></if>
	    }</block>

	    <comment type="block">/* Let's pass our ttyslot to our parent so that it can
	     * clean up after us.
	     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>handshake</name>.<name>tty_slot</name> = <name>tslot</name></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LASTLOGX</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>lastlogx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>lastlogx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>lastlogx</name>.<name>ll_line</name></expr></argument>,
			       <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>,
			       <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>lastlogx</name>.<name>ll_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>X_GETTIMEOFDAY</name><argument_list>(<argument><expr>&amp;<name>lastlogx</name>.<name>ll_tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetUtmpHost</name><argument_list>(<argument><expr><name>lastlogx</name>.<name>ll_host</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>updlastlogx</name><argument_list>(<argument><expr><name>_PATH_LASTLOGX</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>, <argument><expr>&amp;<name>lastlogx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LASTLOG</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp;
		(<name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_lastlog</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> =<init> <expr><call><name>sizeof</name><argument_list>(<argument>struct <expr><name>lastlog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> =<init> <expr>(<name>screen</name>-&gt;<name>uid</name> * <name>size</name>)</expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>lastlog</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>lastlog</name>.<name>ll_line</name></expr></argument>,
			       <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>,
			       <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>lastlog</name>.<name>ll_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetUtmpHost</name><argument_list>(<argument><expr><name>lastlog</name>.<name>ll_host</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastlog</name>.<name>ll_time</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <call>(<name>off_t</name>) <argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>lastlog</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_LASTLOG */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <expr_stmt><expr><call><name>disableSetGid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	    <comment type="block">/* Let our parent know that we set up our utmp entry
	     * so that it can clean up after us.
	     */</comment>
	    <if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>UTMP_ADDED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>handshake</name>.<name>error</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>handshake</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_UTEMPTER */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UTMP */</comment>

	    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>setgid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAS_BSD_GROUPS</name></cpp:ifdef>
	    <if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call> == 0 &amp;&amp; <name>pw</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><call><name>initgroups</name><argument_list>(<argument><expr><name>login_name</name></expr></argument>, <argument><expr><name>pw</name>-&gt;<name>pw_gid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"initgroups failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_INIGROUPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><call><name>setuid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_SETUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name></expr>)</condition><then> <block>{
		<comment type="block">/* mark the pipes as close on exec */</comment>
		<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We are at the point where we are going to
		 * exec our shell (or whatever).  Let our parent
		 * know we arrived safely.
		 */</comment>
		<expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_GOOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>handshake</name>.<name>error</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr>(<name>void</name>) <call><name>strcpy</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>IGNORE_RC</name><argument_list>(<argument>write(cp_pipe[1],
				(const char *) &amp;handshake,
				sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

		<if>if <condition>(<expr><name>resource</name>.<name>wait_for_map</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>i</name> = (<name>int</name>) <call><name>read</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>handshake</name></expr></argument>,
				   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name>i</name> != <call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call> ||
			<name>handshake</name>.<name>status</name> != <name>PTY_EXEC</name></expr>)</condition><then> <block>{
			<comment type="block">/* some very bad problem occurred */</comment>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_PTY_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		    <if>if <condition>(<expr><name>handshake</name>.<name>rows</name> &gt; 0 &amp;&amp; <name>handshake</name>.<name>cols</name> &gt; 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("handshake ttysize: %dx%d\n",
			       <name>handshake</name>.<name>rows</name>, <name>handshake</name>.<name>cols</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>set_max_row</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>handshake</name>.<name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>set_max_col</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>handshake</name>.<name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TTYSIZE_STRUCT</name></cpp:ifdef>
			<expr_stmt><expr><name>got_handshake_size</name> = <name>True</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = (<name>ttySize_t</name>) <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_STRUCT_WINSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = (<name>ttySize_t</name>) <call><name>FullWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = (<name>ttySize_t</name>) <call><name>FullHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TTYSIZE_STRUCT */</comment>
		    }</block></then></if>
		}</block></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_ENVVARS</name></cpp:ifdef>
	    <block>{
		<decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr>12</expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"COLUMNS"</expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"LINES"</expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UTMP</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>pw</name></expr>)</condition><then> <block>{		<comment type="block">/* SVR4 doesn't provide these */</comment>
		<if>if <condition>(<expr>!<call><name>x_getenv</name><argument_list>(<argument><expr>"HOME"</expr></argument>)</argument_list></call></expr>)</condition><then>
		    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"HOME"</expr></argument>, <argument><expr><name>pw</name>-&gt;<name>pw_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr>!<call><name>x_getenv</name><argument_list>(<argument><expr>"SHELL"</expr></argument>)</argument_list></call></expr>)</condition><then>
		    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"SHELL"</expr></argument>, <argument><expr><name>pw</name>-&gt;<name>pw_shell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UTMP */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OWN_TERMINFO_DIR</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"TERMINFO"</expr></argument>, <argument><expr><name>OWN_TERMINFO_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* USE_SYSV_ENVVARS */</comment>
	    <if>if <condition>(<expr>*(<name>newtc</name> = <call><name>get_tcap_buffer</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>) != '\0'</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>resize_termcap</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>titeInhibit</name> &amp;&amp; !<name>xw</name>-&gt;<name>misc</name>.<name>tiXtraScroll</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"ti="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"te="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="block">/*
		 * work around broken termcap entries */</comment>
		<if>if <condition>(<expr><name>resource</name>.<name>useInsertMode</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"ic="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block">/* don't get duplicates */</comment>
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"im="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"ei="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>"mi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr>*<name>newtc</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr>":im=\\E[4h:ei=\\E[4l:mi:"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<if>if <condition>(<expr>*<name>newtc</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
		    <decl_stmt><decl><type><name>unsigned</name></type> <name>len</name></decl>;</decl_stmt>
		    <expr_stmt><expr><call><name>remove_termcap_entry</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr><name>TERMCAP_ERASE</name> "="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>len</name> = (<name>unsigned</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name>len</name> != 0 &amp;&amp; <name><name>newtc</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == ':'</expr>)</condition><then>
			<expr_stmt><expr><name>len</name>--</expr>;</expr_stmt></then></if>
		    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>newtc</name> + <name>len</name></expr></argument>, <argument><expr>":%s=\\%03o:"</expr></argument>,
			    <argument><expr><name>TERMCAP_ERASE</name></expr></argument>,
			    <argument><expr><call><name>CharOf</name><argument_list>(<argument><expr><name>initial_erase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"TERMCAP"</expr></argument>, <argument><expr><name>newtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_ENVVARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	    <comment type="block">/*
	     * Need to reset after all the ioctl bashing we did above.
	     *
	     * If we expect the waitForMap logic to set the handshake-size,
	     * use that to prevent races.
	     */</comment>
	    <if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name>
		&amp;&amp; <name>resource</name>.<name>ptySttySize</name>
		&amp;&amp; (<name>got_handshake_size</name> || !<name>resource</name>.<name>wait_for_map0</name>)</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TTYSIZE_STRUCT</name></cpp:ifdef>
		<expr_stmt><expr><call><name>TRACE_RC</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>SET_TTYSIZE</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("ptyHandshake SET_TTYSIZE %dx%d return %d\n",
		       <call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call>,
		       <call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call>, <name>i</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TTYSIZE_STRUCT */</comment>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if>if <condition>(<expr>(<name>ptr</name> = <name>explicit_shname</name>) == <name>NULL</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>((<name>ptr</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"SHELL"</expr></argument>)</argument_list></call>) == <name>NULL</name>) &amp;&amp;
		    ((<name>pw</name> == <name>NULL</name> &amp;&amp; (<name>pw</name> = <call><name>getpwuid</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>)</argument_list></call>) == <name>NULL</name>) ||
		     *(<name>ptr</name> = <name>pw</name>-&gt;<name>pw_shell</name>) == 0)</expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>ptr</name> = <call><name>x_strdup</name><argument_list>(<argument><expr>"/bin/sh"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"SHELL"</expr></argument>, <argument><expr><name>explicit_shname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>shname</name> = <call><name>x_basename</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("shell path '%s' leaf '%s'\n", <name>ptr</name>, <name>shname</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
	    <comment type="block">/*
	     * Use two copies of command_to_exec, in case luit is not actually
	     * there, or refuses to run.  In that case we will fall-through to
	     * to command that the user gave anyway.
	     */</comment>
	    <if>if <condition>(<expr><name>command_to_exec_with_luit</name> &amp;&amp; <name>command_to_exec</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>,
			    <argument><expr><call><name>xtermFindShell</name><argument_list>(<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spawning command \"%s\"\n", *<name>command_to_exec_with_luit</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><name>command_to_exec_with_luit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* print error message on screen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s: %s\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot support your locale.\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>,
			    <argument><expr><call><name>xtermFindShell</name><argument_list>(<argument><expr>*<name>command_to_exec</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spawning command \"%s\"\n", *<name>command_to_exec</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr>*<name>command_to_exec</name></expr></argument>, <argument><expr><name>command_to_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>command_to_exec</name><index>[<expr>1</expr>]</index></name> == 0</expr>)</condition><then>
		    <expr_stmt><expr><call><name>execlp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>shname</name></expr></argument>, <argument><expr>"-c"</expr></argument>, <argument><expr><name><name>command_to_exec</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<comment type="block">/* print error message on screen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s: %s\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr>*<name>command_to_exec</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_SIGHUP</name></cpp:ifdef>
	    <comment type="block">/* fix pts sh hanging around */</comment>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	    <expr_stmt><expr><name>shname_minus</name> = <call><name>CastMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>shname</name></expr></argument>)</argument_list></call> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>(<name>void</name>) <call><name>strcpy</name><argument_list>(<argument><expr><name>shname_minus</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>(<name>void</name>) <call><name>strcat</name><argument_list>(<argument><expr><name>shname_minus</name></expr></argument>, <argument><expr><name>shname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>TERMIO_STRUCT</name></cpp:ifndef>
	    <expr_stmt><expr><name>ldisc</name> = <call><name>XStrCmp</name><argument_list>(<argument><expr>"csh"</expr></argument>, <argument><expr><name>shname</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>shname</name></expr></argument>)</argument_list></call> - 3</expr></argument>)</argument_list></call> == 0 ?
		<name>NTTYDISC</name> : 0</expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>TIOCSETD</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>ldisc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !TERMIO_STRUCT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_LOGIN_DASH_P</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp; <name>pw</name> &amp;&amp; <name>added_utmp_entry</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>execl</name><argument_list>(<argument><expr><name>bin_login</name></expr></argument>, <argument><expr>"login"</expr></argument>, <argument><expr>"-p"</expr></argument>, <argument><expr>"-f"</expr></argument>, <argument><expr><name>login_name</name></expr></argument>, <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>command_to_exec_with_luit</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then> <block>{
		    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
		    <expr_stmt><expr><name>u</name> = (<name>term</name>-&gt;<name>misc</name>.<name>use_encoding</name> ? 2 : 0)</expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>command_to_exec_with_luit</name><index>[<expr><name>u</name> + 1</expr>]</index></name> = <call><name>x_strdup</name><argument_list>(<argument><expr>"-argv0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>command_to_exec_with_luit</name><index>[<expr><name>u</name> + 2</expr>]</index></name> = <name>shname_minus</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>command_to_exec_with_luit</name><index>[<expr><name>u</name> + 3</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><name>command_to_exec_with_luit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Exec failed. */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s: %s\n"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>,
			<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>execlp</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>,
		   <argument><expr>(<name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> ? <name>shname_minus</name> : <name>shname</name>)</expr></argument>,
		   <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* Exec failed. */</comment>
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Could not exec %s: %s\n"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>,
		    <argument><expr><name>ptr</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>sleep</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="block">/* end if in child after fork */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
	<if>if <condition>(<expr><name>resource</name>.<name>ptyHandshake</name></expr>)</condition><then> <block>{
	    <comment type="block">/* Parent process.  Let's handle handshaked requests to our
	     * child process.
	     */</comment>

	    <comment type="block">/* close childs's sides of the pipes */</comment>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <for>for (<init><expr><name>done</name> = 0</expr>;</init> <condition><expr>!<name>done</name></expr>;</condition><incr/>) <block>{
		<if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>,
			 <argument><expr>(<name>char</name> *) &amp;<name>handshake</name></expr></argument>,
			 <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handshake</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
		    <comment type="block">/* Our child is done talking to us.  If it terminated
		     * due to an error, we will catch the death of child
		     * and clean up.
		     */</comment>
		    <break>break;</break>
		}</block></then></if>

		<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"read"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>handshake</name>.<name>status</name></expr>)</condition> <block>{
		<case>case <expr><name>PTY_GOOD</name></expr>:
		    <comment type="block">/* Success!  Let's free up resources and
		     * continue.
		     */</comment>
		    <expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
		    <break>break;</break>

		</case><case>case <expr><name>PTY_BAD</name></expr>:
		    <comment type="block">/* The open of the pty failed!  Let's get
		     * another one.
		     */</comment>
		    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><call><name>get_pty</name><argument_list>(<argument><expr>&amp;<name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><call><name>XDisplayString</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<comment type="block">/* no more ptys! */</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
				<argument><expr>"%s: child process can find no available ptys: %s\n"</expr></argument>,
				<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_NOMORE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<macro><name>IGNORE_RC</name><argument_list>(<argument>write(pc_pipe[1],
					(const char *) &amp;handshake,
					sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_PTYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		    <expr_stmt><expr><name>handshake</name>.<name>status</name> = <name>PTY_NEW</name></expr>;</expr_stmt>
		    <expr_stmt><expr>(<name>void</name>) <call><name>strcpy</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>, <argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TRACE_HANDSHAKE</name><argument_list>(<argument><expr>"writing"</expr></argument>, <argument><expr>&amp;<name>handshake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <macro><name>IGNORE_RC</name><argument_list>(<argument>write(pc_pipe[1],
				    (const char *) &amp;handshake,
				    sizeof(handshake))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
		    <break>break;</break>

		</case><case>case <expr><name>PTY_FATALERROR</name></expr>:
		    <expr_stmt><expr><name>errno</name> = <name>handshake</name>.<name>error</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>handshake</name>.<name>fatal_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <comment type="block">/*NOTREACHED */</comment>

		</case><case>case <expr><name>UTMP_ADDED</name></expr>:
		    <comment type="block">/* The utmp entry was set by our slave.  Remember
		     * this so that we can reset it later.
		     */</comment>
		    <expr_stmt><expr><name>added_utmp_entry</name> = <name>True</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>	<name>USE_SYSV_UTMP</name></cpp:ifndef>
		    <expr_stmt><expr><name>tslot</name> = <name>handshake</name>.<name>tty_slot</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>
		    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>ttydev</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>handshake</name>.<name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <break>break;</break>
		</case><case>case <expr><name>PTY_NEW</name></expr>:
		</case><case>case <expr><name>PTY_NOMORE</name></expr>:
		</case><case>case <expr><name>UTMP_TTYSLOT</name></expr>:
		</case><case>case <expr><name>PTY_EXEC</name></expr>:
		</case><default>default:
		    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: unexpected handshake status %d\n"</expr></argument>,
			    <argument><expr><name>ProgramName</name></expr></argument>,
			    <argument><expr>(<name>int</name>) <name>handshake</name>.<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</default>}</block></switch>
	    }</block></for>
	    <comment type="block">/* close our sides of the pipes */</comment>
	    <if>if <condition>(<expr>!<name>resource</name>.<name>wait_for_map</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cp_pipe</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pc_pipe</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
    }</block></function>

    <comment type="block">/* end if no slave */</comment>
    <comment type="block">/*
     * still in parent (xterm process)
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_SIGHUP</name></cpp:ifdef>
    <comment type="block">/* hung sh problem? */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Unfortunately, System V seems to have trouble divorcing the child process
 * from the process group of xterm.  This is a problem because hitting the
 * INTR or QUIT characters on the keyboard will cause xterm to go away if we
 * don't ignore the signals.  This is annoying.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_SIGNALS</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYSV</name></cpp:ifndef>
    <comment type="block">/* hung shell problem */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <comment type="block">/* if we were spawned by a jobcontrol smart shell (like ksh or csh),
     * then our pgrp and pid will be the same.  If we were spawned by
     * a jobcontrol dumb shell (like /bin/sh), then we will be in our
     * parent's pgrp, and we must ignore keyboard signals, or we will
     * tank on everything.
     */</comment>
    <if>if <condition>(<expr><call><name>getpid</name><argument_list>()</argument_list></call> == <call><name>getpgrp</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SYSV */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>Exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_SIGNALS and not SIGTSTP */</comment>

    <return>return <expr>0</expr>;</return>
}				<comment type="block">/* end spawnXTerm */</comment>

<function><type><name>SIGNAL_T</name></type>
<name>Exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UTEMPTER</name></cpp:ifdef>
    <if>if <condition>(<expr>!<name>resource</name>.<name>utmpInhibit</name> &amp;&amp; <name>added_utmp_entry</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>removeFromUtmp</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_UTMP</name></cpp:ifdef>
    <decl_stmt><decl><type>struct <name>UTMP_STR</name></type> <name>utmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>UTMP_STR</name> *</type><name>utptr</name></decl>;</decl_stmt>

    <comment type="block">/* don't do this more than once */</comment>
    <if>if <condition>(<expr><name>xterm_exiting</name></expr>)</condition><then>
	<expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>xterm_exiting</name> = <name>True</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PUCC_PTYD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>closepty</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>ptydev</name></expr></argument>, <argument><expr>(<name>resource</name>.<name>utmpInhibit</name> ? <name>OPTY_NOP</name> : <name>OPTY_LOGIN</name>)</expr></argument>, <argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* PUCC_PTYD */</comment>

    <comment type="block">/* cleanup the utmp entry we forged earlier */</comment>
    <if>if <condition>(<expr>!<name>resource</name>.<macro><name>utmpInhibit</name></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>		<comment type="block">/* without handshake, no way to know */</comment>
	&amp;&amp; (<name>resource</name>.<name>ptyHandshake</name> &amp;&amp; <name>added_utmp_entry</name>)</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE */</comment>
	)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>setEffectiveGroup</name><argument_list>(<argument><expr><name>save_egid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>init_utmp</name><argument_list>(<argument><expr><name>USER_PROCESS</name></expr></argument>, <argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>(<name>void</name>) <call><name>call_setutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We could use getutline() if we didn't support old systems.
	 */</comment>
	<while>while <condition>(<expr>(<name>utptr</name> = <call><name>find_utmp</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition> <block>{
	    <if>if <condition>(<expr><name>utptr</name>-&gt;<name>ut_pid</name> == <name>screen</name>-&gt;<name>pid</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>utptr</name>-&gt;<name>ut_type</name> = <name>DEAD_PROCESS</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP_UT_XTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UTMP_UT_SESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>utptr</name>-&gt;<name>ut_session</name> = <call><name>getsid</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>utptr</name>-&gt;<name>ut_xtime</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>utptr</name>-&gt;<name>ut_tv</name>.<name>tv_usec</name> = 0</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr>*<name>utptr</name>-&gt;<name>ut_user</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>utptr</name>-&gt;<name>ut_time</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr>(<name>void</name>) <call><name>call_pututline</name><argument_list>(<argument><expr><name>utptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WTMP</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WTMPX_FILE</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__SCO__</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then>
		    <expr_stmt><expr><call><name>updwtmpx</name><argument_list>(<argument><expr><name>WTMPX_FILE</name></expr></argument>, <argument><expr><name>utptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>linux</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>__GLIBC__</name> &gt;= 2) &amp;&amp; !(<call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>__GLIBC__</name> == 2) &amp;&amp; (<name>__GLIBC_MINOR__</name> == 0))</expr></cpp:elif>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>, <argument><expr><name>utptr</name>-&gt;<name>ut_line</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then>
		    <expr_stmt><expr><call><name>call_updwtmp</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr><name>utptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* set wtmp entry if wtmp file exists */</comment>
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name></expr>)</condition><then> <block>{
		    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
		    <if>if <condition>(<expr>(<name>fd</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_APPEND</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>utptr</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>utptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	    }</block></then></if>
	    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>utptr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>utptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* keep searching */</comment>
	}</block></while>
	<expr_stmt><expr>(<name>void</name>) <call><name>call_endutent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UTMP_SETGID</name></cpp:ifdef>
	<expr_stmt><expr><call><name>disableSetGid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* not USE_SYSV_UTMP */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>wfd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>utmp</name></type> <name>utmp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>resource</name>.<name>utmpInhibit</name> &amp;&amp; <name>added_utmp_entry</name> &amp;&amp;
	(<name>am_slave</name> &lt; 0 &amp;&amp; <name>tslot</name> &gt; 0)</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_UTMP_SETGID</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>setEffectiveGroup</name><argument_list>(<argument><expr><name>save_egid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>(<name>wfd</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_utmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>utmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>, <argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><name>tslot</name> * <call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WTMP</name></cpp:ifdef>
	<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>login_shell</name> &amp;&amp;
	    (<name>wfd</name> = <call><name>open</name><argument_list>(<argument><expr><name>etc_wtmp</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_APPEND</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr>(<name>void</name>) <call><name>strncpy</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>,
			   <argument><expr><call><name>my_pty_name</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name>.<name>ut_line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>utmp</name>.<name>ut_time</name> = <call><name>time</name><argument_list>(<argument><expr>(<name>time_t</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>utmp</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>utmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WTMP */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UTMP_SETGID</name></cpp:ifdef>
	<expr_stmt><expr><call><name>disableSetGid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_UTMP */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UTMP */</comment>

    <comment type="block">/*
     * Flush pending data before releasing ownership, so nobody else can write
     * in the middle of the data.
     */</comment>
    <expr_stmt><expr><call><name>ttyFlush</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>am_slave</name> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>TRACE_IDS</name></expr>;</expr_stmt>
	<comment type="block">/* restore ownership of tty and pty */</comment>
	<expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0666U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>USE_PTY_DEVICE</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__sgi</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__hpux</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
	<expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0666U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <comment type="block">/*
     * Close after releasing ownership to avoid race condition: other programs 
     * grabbing it, and *then* having us release ownership....
     */</comment>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* close explicitly to avoid race with slave side */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>logging</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>CloseLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_LEAKS</name></cpp:ifdef>
    <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Freeing memory leaks\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>Display</name> *</type><name>dpy</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>display</name></expr></init></decl>;</decl_stmt>

	    <if>if <condition>(<expr><name>toplevel</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("destroyed top-level widget\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><call><name>sortedOpts</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>noleaks_charproc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>noleaks_ptydata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>noleaks_CharacterClass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* XrmSetDatabase(dpy, 0); increases leaks ;-) */</comment>
	    <expr_stmt><expr><call><name>XtCloseDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>XtDestroyApplicationContext</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>IceRemoveConnectionWatch</name><argument_list>(<argument><expr><name>icewatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("closed display\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE_CLOSE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>resize_termcap</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>newtc</name> =<init> <expr><call><name>get_tcap_buffer</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_SYSV_ENVVARS</name></cpp:ifndef>
    <if>if <condition>(<expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>newtc</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>ptr1</name>, *<name>ptr2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>li_first</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>temp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>oldtc</name><index>[<expr><name>TERMCAP_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr><name>newtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("resize %s\n", <name>oldtc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>ptr1</name> = <call><name>x_strindex</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"co#"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"co#80:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ptr1</name> = <call><name>x_strindex</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"co#"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr>(<name>ptr2</name> = <call><name>x_strindex</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"li#"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"li#24:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ptr2</name> = <call><name>x_strindex</name><argument_list>(<argument><expr><name>oldtc</name></expr></argument>, <argument><expr>"li#"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>ptr1</name> &gt; <name>ptr2</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>li_first</name>++</expr>;</expr_stmt>
	    <expr_stmt><expr><name>temp</name> = <name>ptr1</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ptr1</name> = <name>ptr2</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ptr2</name> = <name>temp</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>ptr1</name> += 3</expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> += 3</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>newtc</name></expr></argument>, <argument><expr><name>oldtc</name></expr></argument>, <argument><expr><name>i</name> = <call>(<name>size_t</name>) <argument_list>(<argument><expr><name>ptr1</name> - <name>oldtc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name> = <name>newtc</name> + <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>(<name>li_first</name>
			     ? <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>
			     : <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr1</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name>i</name> = <call>(<name>size_t</name>) <argument_list>(<argument><expr><name>ptr2</name> - <name>ptr1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name> += <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>(<name>li_first</name>
			     ? <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>
			     : <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr2</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>ptr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("   ==&gt; %s\n", <name>newtc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("   new size %dx%d\n", <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>, <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_SYSV_ENVVARS */</comment>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! VMS */</comment>

<comment type="block">/*
 * Does a non-blocking wait for a child process.  If the system
 * doesn't support non-blocking wait, do nothing.
 * Returns the pid of the child, or 0 or -1 if none or error.
 */</comment>
<function><type><name>int</name></type>
<name>nonblocking_wait</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_POSIX_WAIT</name></cpp:ifdef>
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> = <call><name>waitpid</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SYSV_SIGNALS</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>CRAY</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>
    <comment type="block">/* cannot do non-blocking wait */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>pid</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* defined(USE_SYSV_SIGNALS) &amp;&amp; (defined(CRAY) || !defined(SIGTSTP)) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Lynx</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type>union <name>wait</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> = <call><name>wait3</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>, <argument><expr>(struct <name>rusage</name> *) <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* USE_POSIX_WAIT else */</comment>
    <return>return <expr><name>pid</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>SIGNAL_T</name></type>
<name>reapchild</name><parameter_list>(<param><decl><type><name>int</name> <name>n</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>olderrno</name> =<init> <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> = <call><name>wait</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SYSV_SIGNALS</name></cpp:ifdef>
    <comment type="block">/* cannot re-enable signal before waiting for child
     * because then SVR4 loops.  Sigh.  HP-UX 9.01 too.
     */</comment>
    <expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>reapchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <do>do <block>{
	<if>if <condition>(<expr><name>pid</name> == <call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>pid</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>debug</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"Exiting\n"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr>!<name>hold_screen</name></expr>)</condition><then>
		<expr_stmt><expr><name>need_cleanup</name> = <name>True</name></expr>;</expr_stmt></then></if>
	}</block></then></if>
    }</block> while <condition>(<expr>(<name>pid</name> = <call><name>nonblocking_wait</name><argument_list>()</argument_list></call>) &gt; 0</expr>)</condition>;</do>

    <expr_stmt><expr><name>errno</name> = <name>olderrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !VMS */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>remove_termcap_entry</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>base</name> =<init> <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>first</name> =<init> <expr><name>base</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("*** remove_termcap_entry('%s', '%s')\n", <name>str</name>, <name>buf</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr>*<name>buf</name> != 0</expr>)</condition> <block>{
	<if>if <condition>(<expr>!<name>count</name> &amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <while>while <condition>(<expr>*<name>buf</name> != 0</expr>)</condition> <block>{
		<if>if <condition>(<expr>*<name>buf</name> == '\\'</expr>)</condition><then>
		    <expr_stmt><expr><name>buf</name>++</expr>;</expr_stmt></then>
		<else>else <if>if <condition>(<expr>*<name>buf</name> == ':'</expr>)</condition><then>
		    <break>break;</break></then></if></else></if>
		<if>if <condition>(<expr>*<name>buf</name> != 0</expr>)</condition><then>
		    <expr_stmt><expr><name>buf</name>++</expr>;</expr_stmt></then></if>
	    }</block></while>
	    <while>while <condition>(<expr>(*<name>first</name>++ = *<name>buf</name>++) != 0</expr>)</condition> <empty_stmt>;</empty_stmt></while>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...removed_termcap_entry('%s', '%s')\n", <name>str</name>, <name>base</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	}</block></then> <else>else <if>if <condition>(<expr>*<name>buf</name> == '\\'</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>buf</name>++</expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr>*<name>buf</name> == ':'</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>first</name> = <name>buf</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr>!<call><name>isspace</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
	}</block></then></if></else></if></else></if></else></if>
	<if>if <condition>(<expr>*<name>buf</name> != 0</expr>)</condition><then>
	    <expr_stmt><expr><name>buf</name>++</expr>;</expr_stmt></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...cannot remove\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * parse_tty_modes accepts lines of the following form:
 *
 *         [SETTING] ...
 *
 * where setting consists of the words in the modelist followed by a character
 * or ^char.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>parse_tty_modes</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type>struct <name>_xttymodes</name> *</type><name>modelist</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>_xttymodes</name> *</type><name>mp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parse_tty_modes\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>1</expr>)</condition> <block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<while>while <condition>(<expr>*<name>s</name> &amp;&amp; <call><name>isascii</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	    <expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></while>
	<if>if <condition>(<expr>!*<name>s</name></expr>)</condition><then>
	    <return>return <expr><name>count</name></expr>;</return></then></if>

	<for>for (<init><expr><name>len</name> = 0</expr>;</init> <condition><expr><call><name>isalnum</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>len</name></expr></incr>) <empty_stmt>;</empty_stmt></for>
	<for>for (<init><expr><name>mp</name> = <name>modelist</name></expr>;</init> <condition><expr><name>mp</name>-&gt;<name>name</name></expr>;</condition> <incr><expr><name>mp</name>++</expr></incr>) <block>{
	    <if>if <condition>(<expr><name>len</name> == <name>mp</name>-&gt;<name>len</name>
		&amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mp</name>-&gt;<name>name</name></expr></argument>, <argument><expr><name>mp</name>-&gt;<name>len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
		<break>break;</break></then></if>
	}</block></for>
	<if>if <condition>(<expr>!<name>mp</name>-&gt;<name>name</name></expr>)</condition><then>
	    <return>return <expr>-1</expr>;</return></then></if>

	<expr_stmt><expr><name>s</name> += <name>mp</name>-&gt;<name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr>*<name>s</name> &amp;&amp; <call><name>isascii</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	    <expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></while>
	<if>if <condition>(<expr>!*<name>s</name></expr>)</condition><then>
	    <return>return <expr>-1</expr>;</return></then></if>

	<if>if <condition>(<expr>(<name>c</name> = <call><name>decode_keyvalue</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>mp</name>-&gt;<name>value</name> = <name>c</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>mp</name>-&gt;<name>set</name> = 1</expr>;</expr_stmt>
	    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...parsed #%d: %s=%#x\n", <name>count</name>, <name>mp</name>-&gt;<name>name</name>, <name>c</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></while>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>			<comment type="block">/* don't use pipes on OpenVMS */</comment>
<function><type><name>int</name></type>
<name>GetBytesAvailable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIONREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>arg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>int</name>) <name>arg</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>fd_set</name></type> <name>set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>timeval</name></type> <name>select_timeout</name> =<init>
    <expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>Select</name><argument_list>(<argument><expr><name>fd</name> + 1</expr></argument>, <argument><expr>&amp;<name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>select_timeout</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
	<return>return <expr>1</expr>;</return></then>
    <else>else
	<return>return <expr>0</expr>;</return></else></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FIORDCK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <return>return <expr>(<call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIORDCHK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !FIORDCK */</comment>
    <decl_stmt><decl><type>struct <name>pollfd</name></type> <name><name>pollfds</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pollfds</name><index>[<expr>0</expr>]</index></name>.<name>fd</name> = <name>fd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pollfds</name><index>[<expr>0</expr>]</index></name>.<name>events</name> = <name>POLLIN</name></expr>;</expr_stmt>
    <return>return <expr><call><name>poll</name><argument_list>(<argument><expr><name>pollfds</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !VMS */</comment>

<comment type="block">/* Utility function to try to hide system differences from
   everybody who used to call killpg() */</comment>

<function><type><name>int</name></type>
<name>kill_process_group</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pid</name></decl></param>, <param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("kill_process_group(pid=%d, sig=%d)\n", <name>pid</name>, <name>sig</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVR4</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SYSV</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>X_NOT_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return <expr><call><name>kill</name><argument_list>(<argument><expr>-<name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>killpg</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_EBCDIC</name></expr></cpp:if>
<function><type><name>int</name></type>
<name>A2E</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> = <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__atoe_l</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>E2A</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>c</name> = <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>__etoa_l</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__QNXNTO__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/proc_msg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/kernel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type>struct <name>_proc_session</name></type> <name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>_proc_session_reply</name></type> <name>rps</name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>qsetlogin</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>login</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ttyname</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>v</name> =<init> <expr><call><name>getsid</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>rps</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>rps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ps</name>.<name>type</name> = <name>_PROC_SESSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ps</name>.<name>subtype</name> = <name>_PROC_SUB_ACTION1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ps</name>.<name>sid</name> = <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ps</name>.<name>name</name></expr></argument>, <argument><expr><name>login</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Send</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr>&amp;<name>rps</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>rps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rps</name>.<name>status</name> &lt; 0</expr>)</condition><then>
	<return>return <expr>(<name>rps</name>.<name>status</name>)</expr>;</return></then></if>

    <expr_stmt><expr><name>ps</name>.<name>type</name> = <name>_PROC_SESSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ps</name>.<name>subtype</name> = <name>_PROC_SUB_ACTION2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ps</name>.<name>sid</name> = <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ps</name>.<name>name</name></expr></argument>, <argument><expr>"//%d%s"</expr></argument>, <argument><expr><call><name>getnid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ttyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Send</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr>&amp;<name>rps</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>rps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>rps</name>.<name>status</name>)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
