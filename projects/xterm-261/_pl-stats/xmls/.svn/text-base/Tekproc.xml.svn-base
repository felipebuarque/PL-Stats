<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="Tekproc.c"><comment type="block">/* $XTermId: Tekproc.c,v 1.182 2010/06/20 21:34:37 tom Exp $ */</comment>

<comment type="block">/*
 *
 * Copyright 2001-2009,2010 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 *
 * Copyright 1988  The Open Group
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of The Open Group shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from The Open Group.
 *
 * Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 *
 *                         All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation, and that the name of Digital Equipment
 * Corporation not be used in advertising or publicity pertaining to
 * distribution of the software without specific, written prior permission.
 *
 *
 * DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
 * DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */</comment>

<comment type="block">/* Tekproc.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RES_OFFSET</name>(field)	XtOffsetOf(TekWidgetRec, field)</cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xatom.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/CharSet.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW3D</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAWPLUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TOOLBAR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Tekparse.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;menu.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>DefaultGCID</name> <name>XGContextFromGC</name>(DefaultGC(XtDisplay(tw), DefaultScreen(XtDisplay(tw))))</cpp:define>

<comment type="block">/* Tek defines */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive>	<name>DOTDASHEDLINE</name>	2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>DOTTEDLINE</name>	1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>EAST</name>		01</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>LINEMASK</name>	07</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>LONGDASHEDLINE</name>	4</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>MARGIN1</name>		0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>MARGIN2</name>		1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MAX_PTS</name>		150</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MAX_VTX</name>		300</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>NORTH</name>		04</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>PENDOWN</name>		1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>PENUP</name>		0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>SHORTDASHEDLINE</name>	3</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>SOLIDLINE</name>	0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>SOUTH</name>		010</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKBOTTOMPAD</name>	23</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKDEFHEIGHT</name>	565</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKDEFWIDTH</name>	750</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKHEIGHT</name>	3072</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKHOME</name>		( (TekChar[tekscr-&gt;page.fontsize].nlines - 1) \
			 * TekChar[tekscr-&gt;page.fontsize].vsize)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKMINHEIGHT</name>	452</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKMINWIDTH</name>	600</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKTOPPAD</name>	34</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TEKWIDTH</name>	4096</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>WEST</name>		02</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TekMove</name>(tw,x,y)	tekscr-&gt;cur_X = x; tekscr-&gt;cur_Y = y</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>input</name>()		Tinput(tw)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>unput</name>(c)	*Tpushback++ = (Char) c</cpp:define>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> struct</type> <name>Tek_Char</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>hsize</name></decl>;</decl_stmt>			<comment type="block">/* in Tek units */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>vsize</name></decl>;</decl_stmt>			<comment type="block">/* in Tek units */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>charsperline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>;</decl_stmt>
}</block></decl></decl_stmt> <expr_stmt><expr><name><name>TekChar</name><index>[<expr><name>TEKNUMFONTS</name></expr>]</index></name> = <block>{
    <expr><block>{<expr>56</expr>, <expr>88</expr>, <expr>74</expr>, <expr>35</expr>}</block></expr>,		<comment type="block">/* large */</comment>
    <expr><block>{<expr>51</expr>, <expr>82</expr>, <expr>81</expr>, <expr>38</expr>}</block></expr>,		<comment type="block">/* #2 */</comment>
    <expr><block>{<expr>34</expr>, <expr>53</expr>, <expr>121</expr>, <expr>58</expr>}</block></expr>,		<comment type="block">/* #3 */</comment>
    <expr><block>{<expr>31</expr>, <expr>48</expr>, <expr>133</expr>, <expr>64</expr>}</block></expr>,		<comment type="block">/* small */</comment>
}</block></expr>;</expr_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<decl_stmt><decl><type><name>static</name> <name>Cursor</name></type> <name>GINcursor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>XSegment</name> *</type><name>line_pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>nplot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>TekLink</name></type> <name>Tek0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>jmp_buf</name></type> <name>Tekjump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>TekLink</name> *</type><name>TekRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>XSegment</name> *</type><name>Tline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>Const</name> <name>int</name> *</type><name>curstate</name> =<init> <expr><name>Talptable</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>Const</name> <name>int</name> *</type><name>Tparsestate</name> =<init> <expr><name>Talptable</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>defaultTranslations</name><index>[]</index></name> =<init> <expr>"\
                ~Meta&lt;KeyPress&gt;: insert-seven-bit() \n\
                 Meta&lt;KeyPress&gt;: insert-eight-bit() \n\
               !Ctrl &lt;Btn1Down&gt;: popup-menu(mainMenu) \n\
          !Lock Ctrl &lt;Btn1Down&gt;: popup-menu(mainMenu) \n\
!Lock Ctrl @Num_Lock &lt;Btn1Down&gt;: popup-menu(mainMenu) \n\
     !Ctrl @Num_Lock &lt;Btn1Down&gt;: popup-menu(mainMenu) \n\
               !Ctrl &lt;Btn2Down&gt;: popup-menu(tekMenu) \n\
          !Lock Ctrl &lt;Btn2Down&gt;: popup-menu(tekMenu) \n\
!Lock Ctrl @Num_Lock &lt;Btn2Down&gt;: popup-menu(tekMenu) \n\
     !Ctrl @Num_Lock &lt;Btn2Down&gt;: popup-menu(tekMenu) \n\
          Shift ~Meta&lt;Btn1Down&gt;: gin-press(L) \n\
                ~Meta&lt;Btn1Down&gt;: gin-press(l) \n\
          Shift ~Meta&lt;Btn2Down&gt;: gin-press(M) \n\
                ~Meta&lt;Btn2Down&gt;: gin-press(m) \n\
          Shift ~Meta&lt;Btn3Down&gt;: gin-press(R) \n\
                ~Meta&lt;Btn3Down&gt;: gin-press(r)"</expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> <name>XtActionsRec</name></type> <name><name>actionsList</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"string"</expr>,	<expr><name>HandleStringEvent</name></expr> }</block></expr>,
    <expr><block>{ <expr>"insert"</expr>,	<expr><name>HandleKeyPressed</name></expr> }</block></expr>,	<comment type="block">/* alias for insert-seven-bit */</comment>
    <expr><block>{ <expr>"insert-seven-bit"</expr>,	<expr><name>HandleKeyPressed</name></expr> }</block></expr>,
    <expr><block>{ <expr>"insert-eight-bit"</expr>,	<expr><name>HandleEightBitKeyPressed</name></expr> }</block></expr>,
    <expr><block>{ <expr>"gin-press"</expr>,		<expr><name>HandleGINInput</name></expr> }</block></expr>,
    <expr><block>{ <expr>"secure"</expr>,			<expr><name>HandleSecure</name></expr> }</block></expr>,
    <expr><block>{ <expr>"create-menu"</expr>,		<expr><name>HandleCreateMenu</name></expr> }</block></expr>,
    <expr><block>{ <expr>"popup-menu"</expr>,		<expr><name>HandlePopupMenu</name></expr> }</block></expr>,
    <comment type="block">/* menu actions */</comment>
    <expr><block>{ <expr>"allow-send-events"</expr>,	<expr><name>HandleAllowSends</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-visual-bell"</expr>,	<expr><name>HandleSetVisualBell</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <expr><block>{ <expr>"set-logging"</expr>,		<expr><name>HandleLogging</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"redraw"</expr>,			<expr><name>HandleRedraw</name></expr> }</block></expr>,
    <expr><block>{ <expr>"send-signal"</expr>,		<expr><name>HandleSendSignal</name></expr> }</block></expr>,
    <expr><block>{ <expr>"quit"</expr>,			<expr><name>HandleQuit</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-scrollbar"</expr>,		<expr><name>HandleScrollbar</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-jumpscroll"</expr>,		<expr><name>HandleJumpscroll</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-reverse-video"</expr>,	<expr><name>HandleReverseVideo</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-autowrap"</expr>,		<expr><name>HandleAutoWrap</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-reversewrap"</expr>,	<expr><name>HandleReverseWrap</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-autolinefeed"</expr>,	<expr><name>HandleAutoLineFeed</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-appcursor"</expr>,		<expr><name>HandleAppCursor</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-appkeypad"</expr>,		<expr><name>HandleAppKeypad</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-scroll-on-key"</expr>,	<expr><name>HandleScrollKey</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-scroll-on-tty-output"</expr>, <expr><name>HandleScrollTtyOutput</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-allow132"</expr>,		<expr><name>HandleAllow132</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-cursesemul"</expr>,		<expr><name>HandleCursesEmul</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-marginbell"</expr>,		<expr><name>HandleMarginBell</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-altscreen"</expr>,		<expr><name>HandleAltScreen</name></expr> }</block></expr>,
    <expr><block>{ <expr>"soft-reset"</expr>,		<expr><name>HandleSoftReset</name></expr> }</block></expr>,
    <expr><block>{ <expr>"hard-reset"</expr>,		<expr><name>HandleHardReset</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-terminal-type"</expr>,	<expr><name>HandleSetTerminalType</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-visibility"</expr>,		<expr><name>HandleVisibility</name></expr> }</block></expr>,
    <expr><block>{ <expr>"set-tek-text"</expr>,		<expr><name>HandleSetTekText</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tek-page"</expr>,		<expr><name>HandleTekPage</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tek-reset"</expr>,		<expr><name>HandleTekReset</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tek-copy"</expr>,		<expr><name>HandleTekCopy</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr><block>{ <expr>"set-toolbar"</expr>,		<expr><name>HandleToolbar</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<decl_stmt><decl><type><name>static</name> <name>Dimension</name></type> <name>defOne</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_NONE_STR</name>	"none"</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_CR_STR</name>		"CRonly"</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_EOT_STR</name>	"CR&amp;EOT"</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_NONE</name>	0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_CR</name>	1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>GIN_TERM_EOT</name>	2</cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DFT_FONT_SMALL</name> "FIXED"</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DFT_FONT_SMALL</name> "6x10"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>static</name> <name>XtResource</name></type> <name><name>resources</name><index>[]</index></name> =<init>
<expr><block>{
    <expr><block>{<expr><name>XtNwidth</name></expr>, <expr><name>XtCWidth</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>CoreRec</name></expr></argument>, <argument><expr><name>core</name>.<name>width</name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRDimension</name></expr>, <expr>(<name>caddr_t</name>) &amp; <name>defOne</name></expr>}</block></expr>,
    <expr><block>{<expr><name>XtNheight</name></expr>, <expr><name>XtCHeight</name></expr>, <expr><name>XtRDimension</name></expr>, <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>Dimension</name></expr></argument>)</argument_list></call></expr>,
     <expr><call><name>XtOffsetOf</name><argument_list>(<argument><expr><name>CoreRec</name></expr></argument>, <argument><expr><name>core</name>.<name>height</name></expr></argument>)</argument_list></call></expr>, <expr><name>XtRDimension</name></expr>, <expr>(<name>caddr_t</name>) &amp; <name>defOne</name></expr>}</block></expr>,
    <expr><call><name>Fres</name><argument_list>(<argument><expr>"fontLarge"</expr></argument>, <argument><expr><name>XtCFont</name></expr></argument>, <argument><expr><name>tek</name>.<name><name>Tfont</name><index>[<expr><name>TEK_FONT_LARGE</name></expr>]</index></name></expr></argument>, <argument><expr>"9x15"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Fres</name><argument_list>(<argument><expr>"font2"</expr></argument>, <argument><expr><name>XtCFont</name></expr></argument>, <argument><expr><name>tek</name>.<name><name>Tfont</name><index>[<expr><name>TEK_FONT_2</name></expr>]</index></name></expr></argument>, <argument><expr>"6x13"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Fres</name><argument_list>(<argument><expr>"font3"</expr></argument>, <argument><expr><name>XtCFont</name></expr></argument>, <argument><expr><name>tek</name>.<name><name>Tfont</name><index>[<expr><name>TEK_FONT_3</name></expr>]</index></name></expr></argument>, <argument><expr>"8x13"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Fres</name><argument_list>(<argument><expr>"fontSmall"</expr></argument>, <argument><expr><name>XtCFont</name></expr></argument>, <argument><expr><name>tek</name>.<name><name>Tfont</name><index>[<expr><name>TEK_FONT_SMALL</name></expr>]</index></name></expr></argument>, <argument><expr><name>DFT_FONT_SMALL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNinitialFont</name></expr></argument>, <argument><expr><name>XtCInitialFont</name></expr></argument>, <argument><expr><name>tek</name>.<name>initial_font</name></expr></argument>, <argument><expr>"large"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"ginTerminator"</expr></argument>, <argument><expr>"GinTerminator"</expr></argument>, <argument><expr><name>tek</name>.<name>gin_terminator_str</name></expr></argument>, <argument><expr><name>GIN_TERM_NONE_STR</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr><call><name>Wres</name><argument_list>(<argument><expr><name>XtNmenuBar</name></expr></argument>, <argument><expr><name>XtCMenuBar</name></expr></argument>, <argument><expr><name>tek</name>.<name>tb_info</name>.<name>menu_bar</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Ires</name><argument_list>(<argument><expr><name>XtNmenuHeight</name></expr></argument>, <argument><expr><name>XtCMenuHeight</name></expr></argument>, <argument><expr><name>tek</name>.<name>tb_info</name>.<name>menu_height</name></expr></argument>, <argument><expr>25</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>static</name> <name>IChar</name></type> <name>Tinput</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>getpoint</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TCursorBack</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TCursorDown</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TCursorForward</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TCursorUp</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekBackground</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> ,
			  <param><decl><type><name>TScreen</name> *</type></decl></param> <comment type="block">/* screen */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekConfigure</name><parameter_list>(<param><decl><type><name>Widget</name></type></decl></param> <comment type="block">/* w */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekDraw</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> ,
		    <param><decl><type><name>int</name></type></decl></param> <comment type="block">/* x */</comment> ,
		    <param><decl><type><name>int</name></type></decl></param> <comment type="block">/* y */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekEnq</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> ,
		   <param><decl><type><name>unsigned</name></type></decl></param> <comment type="block">/* status */</comment> ,
		   <param><decl><type><name>int</name></type></decl></param> <comment type="block">/* x */</comment> ,
		   <param><decl><type><name>int</name></type></decl></param> <comment type="block">/* y */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekFlush</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekInitialize</name><parameter_list>(<param><decl><type><name>Widget</name></type></decl></param> <comment type="block">/* request */</comment> ,
			  <param><decl><type><name>Widget</name></type></decl></param> <comment type="block">/* wnew */</comment> ,
			  <param><decl><type><name>ArgList</name></type></decl></param> <comment type="block">/* args */</comment> ,
			  <param><decl><type><name>Cardinal</name> *</type></decl></param> <comment type="block">/* num_args */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekPage</name><parameter_list>(<param><decl><type><name>TekWidget</name></type></decl></param> <comment type="block">/* tw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>TekRealize</name><parameter_list>(<param><decl><type><name>Widget</name></type></decl></param> <comment type="block">/* gw */</comment> ,
		       <param><decl><type><name>XtValueMask</name> *</type></decl></param> <comment type="block">/* valuemaskp */</comment> ,
		       <param><decl><type><name>XSetWindowAttributes</name> *</type></decl></param> <comment type="block">/* values */</comment> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>static</name> <name>WidgetClassRec</name></type> <name>tekClassRec</name> =<init>
<expr><block>{
    <expr><block>{
<comment type="block">/* core_class fields */</comment>
	<expr>(<name>WidgetClass</name>) &amp; <name>widgetClassRec</name></expr>,		<comment type="block">/* superclass     */</comment>
	<expr>"Tek4014"</expr>,		<comment type="block">/* class_name                   */</comment>
	<expr><call><name>sizeof</name><argument_list>(<argument><expr><name>TekWidgetRec</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* widget_size                  */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* class_initialize             */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* class_part_initialize        */</comment>
	<expr><name>False</name></expr>,			<comment type="block">/* class_inited                 */</comment>
	<expr><name>TekInitialize</name></expr>,		<comment type="block">/* initialize                   */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* initialize_hook              */</comment>
	<expr><name>TekRealize</name></expr>,		<comment type="block">/* realize                      */</comment>
	<expr><name>actionsList</name></expr>,		<comment type="block">/* actions                      */</comment>
	<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actionsList</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* num_actions                  */</comment>
	<expr><name>resources</name></expr>,		<comment type="block">/* resources                    */</comment>
	<expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* num_resources                */</comment>
	<expr><name>NULLQUARK</name></expr>,		<comment type="block">/* xrm_class                    */</comment>
	<expr><name>True</name></expr>,			<comment type="block">/* compress_motion              */</comment>
	<expr><name>True</name></expr>,			<comment type="block">/* compress_exposure            */</comment>
	<expr><name>True</name></expr>,			<comment type="block">/* compress_enterleave          */</comment>
	<expr><name>False</name></expr>,			<comment type="block">/* visible_interest             */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* destroy                      */</comment>
	<expr><name>TekConfigure</name></expr>,		<comment type="block">/* resize                       */</comment>
	<expr><name>TekExpose</name></expr>,		<comment type="block">/* expose                       */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* set_values                   */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* set_values_hook              */</comment>
	<expr><name>XtInheritSetValuesAlmost</name></expr>,	<comment type="block">/* set_values_almost    */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* get_values_hook              */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* accept_focus                 */</comment>
	<expr><name>XtVersion</name></expr>,		<comment type="block">/* version                      */</comment>
	<expr><name>NULL</name></expr>,			<comment type="block">/* callback_offsets             */</comment>
	<expr><name>defaultTranslations</name></expr>,	<comment type="block">/* tm_table                     */</comment>
	<expr><name>XtInheritQueryGeometry</name></expr>,	<comment type="block">/* query_geometry               */</comment>
	<expr><name>XtInheritDisplayAccelerator</name></expr>,	<comment type="block">/* display_accelerator  */</comment>
	<expr><name>NULL</name></expr>			<comment type="block">/* extension                    */</comment>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WidgetClass</name></type> <name>tekWidgetClass</name> =<init> <expr>(<name>WidgetClass</name>) &amp; <name>tekClassRec</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>Tfailed</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>TekInit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Widget</name></type> <name>form_top</name>, <name>menu_top</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>menu_high</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>Tfailed</name>
	&amp;&amp; <name>tekWidget</name> == 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>Cardinal</name></type> <name>nargs</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Arg</name></type> <name><name>myArgs</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Boolean</name></type> <name>iconic</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekInit\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>myArgs</name><index>[<expr><name>nargs</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconic</name></expr></argument>, <argument><expr>&amp;<name>iconic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>nargs</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtGetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>myArgs</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nargs</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>myArgs</name><index>[<expr><name>nargs</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconic</name></expr></argument>, <argument><expr><name>iconic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>nargs</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>myArgs</name><index>[<expr><name>nargs</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNallowShellResize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>nargs</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>myArgs</name><index>[<expr><name>nargs</name></expr>]</index></name></expr></argument>, <argument><expr><name>XtNinput</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>nargs</name></expr>;</expr_stmt>

	<comment type="block">/* this causes the Initialize method to be called */</comment>
	<expr_stmt><expr><name>tekshellwidget</name> =
	    <call><name>XtCreatePopupShell</name><argument_list>(<argument><expr>"tektronix"</expr></argument>, <argument><expr><name>topLevelShellWidgetClass</name></expr></argument>,
			       <argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>myArgs</name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetupMenus</name><argument_list>(<argument><expr><name>tekshellwidget</name></expr></argument>, <argument><expr>&amp;<name>form_top</name></expr></argument>, <argument><expr>&amp;<name>menu_top</name></expr></argument>, <argument><expr>&amp;<name>menu_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* this causes the Realize method to be called */</comment>
	<expr_stmt><expr><name>tekWidget</name> = (<name>TekWidget</name>)
	    <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr>"tek4014"</expr></argument>,
				    <argument><expr><name>tekWidgetClass</name></expr></argument>, <argument><expr><name>form_top</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
				    <argument><expr><name>XtNmenuBar</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
				    <argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
				    <argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
				    <argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XawChainTop</name></expr></argument>,
				    <argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XawChainLeft</name></expr></argument>,
				    <argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XawChainRight</name></expr></argument>,
				    <argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XawChainBottom</name></expr></argument>,
				    <argument><expr><name>XtNmenuHeight</name></expr></argument>, <argument><expr><name>menu_high</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				    <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
	<expr_stmt><expr><call><name>ShowToolbar</name><argument_list>(<argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
    <return>return <expr>(!<name>Tfailed</name>)</expr>;</return>
}</block></function>

<comment type="block">/*
 * If we haven't allocated the PtyData struct, do so.
 */</comment>
<function><type><name>int</name></type>
<name>TekPtyData</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>Tpushb</name> == 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>Tpushb</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>Char</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>) == <name>NULL</name>
	    || (<name>Tline</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>XSegment</name></expr></argument>, <argument><expr><name>MAX_VTX</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Not enough core for Tek mode\n"</expr></argument>, <argument><expr><name>xterm_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>Tpushb</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>Tpushb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tfailed</name> = <name>True</name></expr>;</expr_stmt>
	    <return>return <expr>0</expr>;</return>
	}</block></then></if>
    }</block></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Tekparse</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name>, <name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IChar</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IChar</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nextstate</name></decl>;</decl_stmt>

    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
	<expr_stmt><expr><name>c</name> = <call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * The parsing tables all have 256 entries.  If we're supporting
	 * wide characters, we handle them by treating them the same as
	 * printing characters.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	<if>if <condition>(<expr><name>c</name> &gt; 255</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>nextstate</name> = (<name>Tparsestate</name> == <name>Talptable</name>)
		? <name>CASE_PRINT</name>
		: <name>CASE_IGNORE</name></expr>;</expr_stmt>
	}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><name>nextstate</name> = <name><name>Tparsestate</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></else></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Tekparse %04X -&gt; %d\n", <name>c</name>, <name>nextstate</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>nextstate</name></expr>)</condition> <block>{
	<case>case <expr><name>CASE_REPORT</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: report address\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TekEnqMouse</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><name>c</name> = 064</expr>;</expr_stmt>	<comment type="block">/* has hard copy unit */</comment>
		<if>if <condition>(<expr><name>tekscr</name>-&gt;<name>margin</name> == <name>MARGIN2</name></expr>)</condition><then>
		    <expr_stmt><expr><name>c</name> |= 02</expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>TekEnq</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur_X</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur_Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <expr_stmt><expr><name>TekRecord</name>-&gt;<name><name>ptr</name><index>[<expr>-1</expr>]</index></name> = <name>ANSI_NAK</name></expr>;</expr_stmt>	<comment type="block">/* remove from recording */</comment>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_VT_MODE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: special return to vt102 mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>TekRecord</name>-&gt;<name><name>ptr</name><index>[<expr>-1</expr>]</index></name> = <name>ANSI_NAK</name></expr>;</expr_stmt>	<comment type="block">/* remove from recording */</comment>
	    <expr_stmt><expr><call><name>FlushLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>

	</case><case>case <expr><name>CASE_SPT_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Enter Special Point Plot mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Tspttable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_GIN</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Do Tek GIN mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>TekGIN</name> = &amp;<name>TekRecord</name>-&gt;<name><name>ptr</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
	    <comment type="block">/* Set cross-hair cursor raster array */</comment>
	    <if>if <condition>(<expr>(<name>GINcursor</name> =
		 <call><name>make_colored_cursor</name><argument_list>(<argument><expr><name>XC_tcross</name></expr></argument>,
				     <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_FG</name></expr></argument>)</argument_list></call></expr></argument>,
				     <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><name>GINcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>Tbyptable</name></expr>;</expr_stmt>	<comment type="block">/* Bypass mode */</comment>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_BEL</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: BEL\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr>!<name>tekRefreshList</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_TerminalBell</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_BS</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: BS\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <expr_stmt><expr><call><name>TCursorBack</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PT_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Enter Tek Point Plot mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Tpttable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PLT_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Enter Tek Plot mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Tplttable</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr>(<name>c</name> = <call><name>input</name><argument_list>()</argument_list></call>) == <name>ANSI_BEL</name></expr>)</condition><then>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>pen</name> = <name>PENDOWN</name></expr>;</expr_stmt></then>
	    <else>else <block>{
		<expr_stmt><expr><call><name>unput</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>pen</name> = <name>PENUP</name></expr>;</expr_stmt>
	    }</block></else></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_TAB</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: HT\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <expr_stmt><expr><call><name>TCursorForward</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_IPL_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Enter Tek Incremental Plot mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Tipltable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_ALP_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Enter Tek Alpha mode from any other mode\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <comment type="block">/* if in one of graphics states, move alpha cursor */</comment>
	    <if>if <condition>(<expr><name>nplot</name> &gt; 0</expr>)</condition><then>	<comment type="block">/* flush line VTbuffer */</comment>
		<expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Talptable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_UP</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: cursor up\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <expr_stmt><expr><call><name>TCursorUp</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_COPY</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: make copy\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>TekCopy</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>TekRecord</name>-&gt;<name><name>ptr</name><index>[<expr>-1</expr>]</index></name> = <name>ANSI_NAK</name></expr>;</expr_stmt>	<comment type="block">/* remove from recording */</comment>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PAGE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Page Function\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>TekPage</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* clear bypass condition */</comment>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_BES_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Byp: an escape char\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>Tbestable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_BYP_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: set bypass condition\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>Tbyptable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_IGNORE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Esc: totally ignore CR, ESC, LF, ~\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_ASCII</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Select ASCII char set\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* ignore for now */</comment>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_APL</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Select APL char set\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* ignore for now */</comment>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_CHAR_SIZE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: character size selector\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>c</name> &amp; 03</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_BEAM_VEC</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: beam and vector selector\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* only line types */</comment>
	    <if>if <condition>(<expr>(<name>c</name> &amp;= <name>LINEMASK</name>) != <name>tekscr</name>-&gt;<name>cur</name>.<name>linetype</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>nplot</name> &gt; 0</expr>)</condition><then>
		    <expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>c</name> &lt;= <name>TEKNUMLINES</name></expr>)</condition><then>
		    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>linetype</name> = <name>c</name></expr>;</expr_stmt></then></if>
	    }</block></then></if>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_CURSTATE</name></expr>:
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PENUP</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Ipl: penup\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>pen</name> = <name>PENUP</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PENDOWN</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Ipl: pendown\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>pen</name> = <name>PENDOWN</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_IPL_POINT</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Ipl: point\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> = <name>tekscr</name>-&gt;<name>cur_X</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> = <name>tekscr</name>-&gt;<name>cur_Y</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>c</name> &amp; <name>NORTH</name></expr>)</condition><then>
		<expr_stmt><expr><name>y</name>++</expr>;</expr_stmt></then>
	    <else>else <if>if <condition>(<expr><name>c</name> &amp; <name>SOUTH</name></expr>)</condition><then>
		<expr_stmt><expr><name>y</name>--</expr>;</expr_stmt></then></if></else></if>
	    <if>if <condition>(<expr><name>c</name> &amp; <name>EAST</name></expr>)</condition><then>
		<expr_stmt><expr><name>x</name>++</expr>;</expr_stmt></then>
	    <else>else <if>if <condition>(<expr><name>c</name> &amp; <name>WEST</name></expr>)</condition><then>
		<expr_stmt><expr><name>x</name>--</expr>;</expr_stmt></then></if></else></if>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>pen</name> == <name>PENDOWN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekDraw</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	    <else>else
		<expr_stmt><expr><call><name>TekMove</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PLT_VEC</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Plt: vector\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>unput</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>getpoint</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>tekscr</name>-&gt;<name>pen</name> == <name>PENDOWN</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>TekDraw</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><call><name>TekMove</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>pen</name> = <name>PENDOWN</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PT_POINT</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Pt: point\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>unput</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>getpoint</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TekMove</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TekDraw</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_SPT_POINT</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: Spt: point\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* ignore intensity character in c */</comment>
	    <if>if <condition>(<expr><call><name>getpoint</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TekMove</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TekDraw</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_CR</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: CR\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr><name>nplot</name> &gt; 0</expr>)</condition><then>	<comment type="block">/* flush line VTbuffer */</comment>
		<expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = <name>tekscr</name>-&gt;<name>margin</name> == <name>MARGIN1</name> ? 0 :
		<name>TEKWIDTH</name> / 2</expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Talptable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_ESC_STATE</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: ESC\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>Tesctable</name></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_LF</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: LF\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>TCursorDown</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<name>tekRefreshList</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>do_xevents</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_SP</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: SP\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TCursorForward</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>

	</case><case>case <expr><name>CASE_PRINT</name></expr>:
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: printable character\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ch</name> = <name>c</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>tekscr</name>-&gt;<name>cur_X</name> * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		+ <name>screen</name>-&gt;<name>border</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> - <name>tekscr</name>-&gt;<name>cur_Y</name>) * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
		+ <name>screen</name>-&gt;<name>border</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>wide_chars</name>
		&amp;&amp; (<name>ch</name> &gt; 255)</expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>XChar2b</name></type> <name>sbuf</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>sbuf</name>.<name>byte2</name> = <call><name>LO_BYTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sbuf</name>.<name>byte1</name> = <call><name>HI_BYTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XDrawImageString16</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>,
				   <argument><expr><name>x</name></expr></argument>,
				   <argument><expr><name>y</name></expr></argument>,
				   <argument><expr>&amp;<name>sbuf</name></expr></argument>,
				   <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <block>{
		<decl_stmt><decl><type><name>char</name></type> <name>ch2</name> =<init> <expr>(<name>char</name>) <name>ch</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>XDrawString</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
			    <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>,
			    <argument><expr><name>x</name></expr></argument>,
			    <argument><expr><name>y</name></expr></argument>,
			    <argument><expr>&amp;<name>ch2</name></expr></argument>,
			    <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <expr_stmt><expr><call><name>TCursorForward</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>CASE_OSC</name></expr>:
	    <comment type="block">/* FIXME:  someone should disentangle the input queues
	     * of this code so that it can be state-driven.
	     */</comment>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("case: do osc escape\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <block>{
		<comment type="block">/*
		 * do_osc() can call TekExpose(), which calls TekRefresh(),
		 * and sends us recurring here - don't do that...
		 */</comment>
		<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>nested</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Char</name></type> <name><name>buf2</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IChar</name></type> <name>c2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr>(<name>c2</name> = <call><name>input</name><argument_list>()</argument_list></call>) != <name>ANSI_BEL</name></expr>)</condition> <block>{
		    <if>if <condition>(<expr>!<call><name>isprint</name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>c2</name> &amp; 0x7f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
			|| <name>len</name> + 2 &gt;= (<name>int</name>) <call><name>sizeof</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<break>break;</break></then></if>
		    <expr_stmt><expr><name><name>buf2</name><index>[<expr><name>len</name>++</expr>]</index></name> = (<name>Char</name>) <name>c2</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name><name>buf2</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
		<if>if <condition>(<expr>!<name>nested</name>++</expr>)</condition><then> <block>{
		    <if>if <condition>(<expr><name>c2</name> == <name>ANSI_BEL</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>do_osc</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ANSI_BEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr>--<name>nested</name></expr>;</expr_stmt>
	    }</block>
	    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case>}</block></switch>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>rcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>rptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>PtySelect</name></type> <name>Tselect_mask</name></decl>;</decl_stmt>

<function><type><name>static</name> <name>IChar</name></type>
<name>Tinput</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekLink</name> *</type><name>tek</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>Tpushback</name> &gt; <name>Tpushb</name></expr>)</condition><then>
	<return>return <expr>(*--<name>Tpushback</name>)</expr>;</return></then></if>
    <if>if <condition>(<expr><name>tekRefreshList</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>rcnt</name>-- &gt; 0</expr>)</condition><then>
	    <return>return <expr><call>(<name>IChar</name>) <argument_list>(<argument><expr>*<name>rptr</name>++</expr></argument>)</argument_list></call></expr>;</return></then></if>
	<if>if <condition>(<expr>(<name>tek</name> = <name>tekRefreshList</name>-&gt;<name>next</name>) != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>tekRefreshList</name> = <name>tek</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>rptr</name> = <name>tek</name>-&gt;<name>data</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>rcnt</name> = <name>tek</name>-&gt;<name>count</name> - 1</expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>tek</name>-&gt;<name>fontsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><call>(<name>IChar</name>) <argument_list>(<argument><expr>*<name>rptr</name>++</expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>tekRefreshList</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>Tekjump</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <label><name>again</name>:</label>
    <if>if <condition>(<expr><name>VTbuffer</name>-&gt;<name>next</name> &gt;= <name>VTbuffer</name>-&gt;<name>last</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>update</name> =<init> <expr><name>VTbuffer</name>-&gt;<name>update</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>nplot</name> &gt; 0</expr>)</condition><then>		<comment type="block">/* flush line */</comment>
	    <expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
	<expr_stmt><expr><name>Tselect_mask</name> = <name>pty_mask</name></expr>;</expr_stmt>	<comment type="block">/* force a read */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* VMS */</comment>
	<expr_stmt><expr><call><name>XFD_COPYSET</name><argument_list>(<argument><expr>&amp;<name>pty_mask</name></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* VMS */</comment>
	<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CRAY</name></cpp:ifdef>
	    <decl_stmt><decl><type>struct <name>timeval</name></type> <name>crocktimeout</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>crocktimeout</name>.<name>tv_sec</name> = 0</expr>;</expr_stmt>
	    <expr_stmt><expr><name>crocktimeout</name>.<name>tv_usec</name> = 0</expr>;</expr_stmt>
	    <expr_stmt><expr>(<name>void</name>) <call><name>Select</name><argument_list>(<argument><expr><name>max_plus1</name></expr></argument>,
			  <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			  <argument><expr>&amp;<name>crocktimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><call><name>readPtyData</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>, <argument><expr><name>VTbuffer</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<break>break;</break>
	    }</block></then></if>
	    <if>if <condition>(<expr><name>Ttoggled</name> &amp;&amp; <name>curstate</name> == <name>Talptable</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>Ttoggled</name> = <name>False</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <if>if <condition>(<expr><call><name>XtAppPending</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>)</argument_list></call> &amp; <name>XtIMXEvent</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
		<expr_stmt><expr><name>Tselect_mask</name> = <name>X_mask</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* VMS */</comment>
		<expr_stmt><expr><call><name>XFD_COPYSET</name><argument_list>(<argument><expr>&amp;<name>X_mask</name></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* VMS */</comment>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
		<expr_stmt><expr><name>Tselect_mask</name> = <name>Select_mask</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* VMS */</comment>
		<expr_stmt><expr><call><name>XFD_COPYSET</name><argument_list>(<argument><expr>&amp;<name>Select_mask</name></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>Select</name><argument_list>(<argument><expr><name>max_plus1</name></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
		    <if>if <condition>(<expr><name>errno</name> != <name>EINTR</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_TSELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		    <continue>continue;</continue>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* VMS */</comment>
	    }</block></else></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>Tselect_mask</name> &amp; <name>X_mask</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xevents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>VTbuffer</name>-&gt;<name>update</name> != <name>update</name></expr>)</condition><then>
		    <goto>goto <name>again</name>;</goto></then></if>
	    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* VMS */</comment>
	    <if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>Tselect_mask</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xevents</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>VTbuffer</name>-&gt;<name>update</name> != <name>update</name></expr>)</condition><then>
		    <goto>goto <name>again</name>;</goto></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* VMS */</comment>
	}</block></for>
	<if>if <condition>(<expr>!<name>Ttoggled</name> &amp;&amp; <name>curstate</name> == <name>Talptable</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>tek</name> = <name>TekRecord</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tek</name>-&gt;<name>count</name> &gt;= <name>TEK_LINK_BLOCK_SIZE</name>
	|| <name>tek</name>-&gt;<name>fontsize</name> != <name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>TekRecord</name> = <name>tek</name>-&gt;<name>next</name> = <call><name>CastMalloc</name><argument_list>(<argument><expr><name>TekLink</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Panic</name><argument_list>(<argument><expr>"Tinput: malloc error (%d)\n"</expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>tek</name> = <name>tek</name>-&gt;<name>next</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tek</name>-&gt;<name>next</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
	    <expr_stmt><expr><name>tek</name>-&gt;<name>fontsize</name> = (<name>unsigned</name> <name>short</name>) <name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tek</name>-&gt;<name>count</name> = 0</expr>;</expr_stmt>
	    <expr_stmt><expr><name>tek</name>-&gt;<name>ptr</name> = <name>tek</name>-&gt;<name>data</name></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><name>tek</name>-&gt;<name>count</name>++</expr>;</expr_stmt>

    <expr_stmt><expr>(<name>void</name>) <call><name>morePtyData</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call>(<name>IChar</name>) <argument_list>(<argument><expr>*<name>tek</name>-&gt;<name>ptr</name>++ = (<name>char</name>) <call><name>nextPtyData</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>VTbuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekClear</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>XClearWindow</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<comment type="block">/* this should become the Tek Widget's Resize proc */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>TekConfigure</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekWidget</name></type> <name>tw</name> =<init> <expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>border</name> =<init> <expr>2 * <name>screen</name>-&gt;<name>border</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TekClear</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>w</name>-&gt;<name>core</name>.<name>width</name> - <name>border</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>THeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>w</name>-&gt;<name>core</name>.<name>height</name> - <name>border</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>double</name>) <call><name>TWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> / <name>TEKWIDTH</name></expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>d</name> = (<name>double</name>) <call><name>THeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> / (<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> + <name>TEKBOTTOMPAD</name>))
	    &lt; <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>d</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>TFullWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>w</name>-&gt;<name>core</name>.<name>width</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TFullHeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>w</name>-&gt;<name>core</name>.<name>height</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*ARGSUSED*/</comment>
<function><type><name>void</name></type>
<name>TekExpose</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>Region</name> <name>region</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekWidget</name></type> <name>tw</name> =<init> <expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekExpose {{\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>lint</name></cpp:ifdef>
	<expr_stmt><expr><name>region</name> = <name>region</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if>if <condition>(<expr>!<name>Ttoggled</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>CLEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>Tpushback</name> = <name>Tpushb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>TEKHOME</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name> = <name>tekscr</name>-&gt;<name>page</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>margin</name> = <name>MARGIN1</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>TekGIN</name> = <name>NULL</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>tekRefreshList</name> = &amp;<name>Tek0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rptr</name> = <name>tekRefreshList</name>-&gt;<name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rcnt</name> = <name>tekRefreshList</name>-&gt;<name>count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Talptable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekExpose resets data to replay %d bytes\n", <name>rcnt</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>first_map_occurred</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<name>tekscr</name>-&gt;<name>waitrefresh</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekRefresh</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("}} TekExpose\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>TekRefresh</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>static</name> <name>Cursor</name></type> <name>wait_cursor</name> =<init> <expr><name>None</name></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>wait_cursor</name> == <name>None</name></expr>)</condition><then>
	    <expr_stmt><expr><name>wait_cursor</name> = <call><name>make_colored_cursor</name><argument_list>(<argument><expr><name>XC_watch</name></expr></argument>,
					      <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_FG</name></expr></argument>)</argument_list></call></expr></argument>,
					      <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wait_cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>setjmp</name><argument_list>(<argument><expr><name>Tekjump</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>Tekparse</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr>(<name>tekscr</name>-&gt;<name>TekGIN</name> &amp;&amp; <name>GINcursor</name>) ? <name>GINcursor</name> : <name>tekscr</name>-&gt;<name>arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>TekRepaint</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekRepaint\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TekClear</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TekExpose</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>tw</name></expr></argument>, <argument><expr>(<name>XEvent</name> *) <name>NULL</name></expr></argument>, <argument><expr>(<name>Region</name>) <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekPage</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekLink</name> *</type><name>tek</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TekClear</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>TEKHOME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>margin</name> = <name>MARGIN1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>page</name> = <name>tekscr</name>-&gt;<name>cur</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>tek</name> = <name>TekRecord</name> = &amp;<name>Tek0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>fontsize</name> = (<name>unsigned</name> <name>short</name>) <name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>count</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>ptr</name> = <name>tek</name>-&gt;<name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name> = <name>tek</name>-&gt;<name>next</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tek</name></expr>)</condition><then>
	<do>do <block>{
	    <decl_stmt><decl><type><name>TekLink</name> *</type><name>tek2</name> =<init> <expr><name>tek</name>-&gt;<name>next</name></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tek</name> = <name>tek2</name></expr>;</expr_stmt>
	}</block> while <condition>(<expr><name>tek</name></expr>)</condition>;</do></then></if>
    <expr_stmt><expr><name>TekRecord</name>-&gt;<name>next</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tekRefreshList</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>Tparsestate</name> = <name>curstate</name> = <name>Talptable</name></expr>;</expr_stmt>		<comment type="block">/* Tek Alpha mode */</comment>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>	<name>EXTRABITS</name>	017</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>FIVEBITS</name>	037</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>HIBITS</name>		(FIVEBITS &lt;&lt; SHIFTHI)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>LOBITS</name>		(FIVEBITS &lt;&lt; SHIFTLO)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>SHIFTHI</name>		7</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>SHIFTLO</name>		2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>TWOBITS</name>		03</cpp:define>

<function><type><name>static</name> <name>int</name></type>
<name>getpoint</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name>, <name>x</name>, <name>y</name>, <name>e</name>, <name>lo_y</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> = <name>tekscr</name>-&gt;<name>cur</name>.<name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> = <name>tekscr</name>-&gt;<name>cur</name>.<name>y</name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
	<if>if <condition>(<expr>(<name>c</name> = (<name>int</name>) <call><name>input</name><argument_list>()</argument_list></call>) &lt; ' '</expr>)</condition><then> <block>{	<comment type="block">/* control character */</comment>
	    <expr_stmt><expr><call><name>unput</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr>(0)</expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>c</name> &lt; '@'</expr>)</condition><then> <block>{		<comment type="block">/* Hi X or Hi Y */</comment>
	    <if>if <condition>(<expr><name>lo_y</name></expr>)</condition><then> <block>{		<comment type="block">/* seen a Lo Y, so this must be Hi X */</comment>
		<expr_stmt><expr><name>x</name> &amp;= ~<name>HIBITS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> |= (<name>c</name> &amp; <name>FIVEBITS</name>) &lt;&lt; <name>SHIFTHI</name></expr>;</expr_stmt>
		<continue>continue;</continue>
	    }</block></then></if>
	    <comment type="block">/* else Hi Y */</comment>
	    <expr_stmt><expr><name>y</name> &amp;= ~<name>HIBITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> |= (<name>c</name> &amp; <name>FIVEBITS</name>) &lt;&lt; <name>SHIFTHI</name></expr>;</expr_stmt>
	    <continue>continue;</continue>
	}</block></then></if>
	<if>if <condition>(<expr><name>c</name> &lt; '`'</expr>)</condition><then> <block>{		<comment type="block">/* Lo X */</comment>
	    <expr_stmt><expr><name>x</name> &amp;= ~<name>LOBITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> |= (<name>c</name> &amp; <name>FIVEBITS</name>) &lt;&lt; <name>SHIFTLO</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>x</name> = <name>x</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>y</name> = <name>y</name></expr>;</expr_stmt>
	    <return>return <expr>(1)</expr>;</return>		<comment type="block">/* OK */</comment>
	}</block></then></if>
	<comment type="block">/* else Lo Y */</comment>
	<if>if <condition>(<expr><name>lo_y</name></expr>)</condition><then> <block>{		<comment type="block">/* seen a Lo Y, so other must be extra bits */</comment>
	    <expr_stmt><expr><name>e</name> = (<name>y</name> &gt;&gt; <name>SHIFTLO</name>) &amp; <name>EXTRABITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> &amp;= ~<name>TWOBITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> |= <name>e</name> &amp; <name>TWOBITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> &amp;= ~<name>TWOBITS</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> |= (<name>e</name> &gt;&gt; <name>SHIFTLO</name>) &amp; <name>TWOBITS</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>y</name> &amp;= ~<name>LOBITS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> |= (<name>c</name> &amp; <name>FIVEBITS</name>) &lt;&lt; <name>SHIFTLO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lo_y</name>++</expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TCursorBack</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>Tek_Char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name>, <name>l</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>x</name> = (<name>tekscr</name>-&gt;<name>cur_X</name> -=
	 (<name>t</name> = &amp;<name><name>TekChar</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>]</index></name>)-&gt;<name>hsize</name>
	)</expr>;</expr_stmt>

    <if>if <condition>(<expr>((<name>tekscr</name>-&gt;<name>margin</name> == <name>MARGIN1</name>) &amp;&amp; (<name>x</name> &lt; 0))
	|| ((<name>tekscr</name>-&gt;<name>margin</name> == <name>MARGIN2</name>) &amp;&amp; (<name>x</name> &lt; <name>TEKWIDTH</name> / 2))</expr>)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>l</name> = (<name>tekscr</name>-&gt;<name>cur_Y</name> + (<name>t</name>-&gt;<name>vsize</name> - 1)) / <name>t</name>-&gt;<name>vsize</name> + 1) &gt;=
	    <name>t</name>-&gt;<name>nlines</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>margin</name> = !<name>tekscr</name>-&gt;<name>margin</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>l</name> = 0</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>l</name> * <name>t</name>-&gt;<name>vsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = (<name>t</name>-&gt;<name>charsperline</name> - 1) * <name>t</name>-&gt;<name>hsize</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TCursorForward</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>Tek_Char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>tekscr</name>-&gt;<name>cur_X</name> +=
	 (<name>t</name> = &amp;<name><name>TekChar</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>]</index></name>)-&gt;<name>hsize</name>
	) &gt; <name>TEKWIDTH</name></expr>
	)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>l</name> = <name>tekscr</name>-&gt;<name>cur_Y</name> / <name>t</name>-&gt;<name>vsize</name> - 1) &lt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>margin</name> = !<name>tekscr</name>-&gt;<name>margin</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>l</name> = <name>t</name>-&gt;<name>nlines</name> - 1</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>l</name> * <name>t</name>-&gt;<name>vsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = <name>tekscr</name>-&gt;<name>margin</name> == <name>MARGIN1</name> ? 0 : <name>TEKWIDTH</name> / 2</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TCursorUp</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>Tek_Char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> = &amp;<name><name>TekChar</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>]</index></name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>l</name> = (<name>tekscr</name>-&gt;<name>cur_Y</name> + (<name>t</name>-&gt;<name>vsize</name> - 1)) / <name>t</name>-&gt;<name>vsize</name> + 1) &gt;= <name>t</name>-&gt;<name>nlines</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>l</name> = 0</expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>tekscr</name>-&gt;<name>margin</name> = !<name>tekscr</name>-&gt;<name>margin</name>) != <name>MARGIN1</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>cur_X</name> &lt; <name>TEKWIDTH</name> / 2</expr>)</condition><then>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> += <name>TEKWIDTH</name> / 2</expr>;</expr_stmt></then></if>
	}</block></then> <else>else <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>cur_X</name> &gt;= <name>TEKWIDTH</name> / 2</expr>)</condition><then>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> -= <name>TEKWIDTH</name> / 2</expr>;</expr_stmt></then></if></else></if>
    }</block></then></if>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>l</name> * <name>t</name>-&gt;<name>vsize</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TCursorDown</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>Tek_Char</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> = &amp;<name><name>TekChar</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>]</index></name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>l</name> = <name>tekscr</name>-&gt;<name>cur_Y</name> / <name>t</name>-&gt;<name>vsize</name> - 1) &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>l</name> = <name>t</name>-&gt;<name>nlines</name> - 1</expr>;</expr_stmt>
	<if>if <condition>(<expr>(<name>tekscr</name>-&gt;<name>margin</name> = !<name>tekscr</name>-&gt;<name>margin</name>) != <name>MARGIN1</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>cur_X</name> &lt; <name>TEKWIDTH</name> / 2</expr>)</condition><then>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> += <name>TEKWIDTH</name> / 2</expr>;</expr_stmt></then></if>
	}</block></then> <else>else <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>cur_X</name> &gt;= <name>TEKWIDTH</name> / 2</expr>)</condition><then>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> -= <name>TEKWIDTH</name> / 2</expr>;</expr_stmt></then></if></else></if>
    }</block></then></if>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>l</name> * <name>t</name>-&gt;<name>vsize</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>AddToDraw</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>int</name></type> <name>x1</name></decl></param>, <param><decl><type><name>int</name></type> <name>y1</name></decl></param>, <param><decl><type><name>int</name></type> <name>x2</name></decl></param>, <param><decl><type><name>int</name></type> <name>y2</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XSegment</name> *</type><name>lp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("AddToDraw (%d,%d) (%d,%d)\n", <name>x1</name>, <name>y1</name>, <name>x2</name>, <name>y2</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>nplot</name> &gt;= <name>MAX_PTS</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>lp</name> = <name>line_pt</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name>lp</name>-&gt;<name>x1</name> = <call>(<name>short</name>) <argument_list>(<argument><expr><name>x1</name> * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> + <name>screen</name>-&gt;<name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lp</name>-&gt;<name>y1</name> = <call>(<name>short</name>) <argument_list>(<argument><expr>(<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> - <name>y1</name>) * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> +
		      <name>screen</name>-&gt;<name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lp</name>-&gt;<name>x2</name> = <call>(<name>short</name>) <argument_list>(<argument><expr><name>x2</name> * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> + <name>screen</name>-&gt;<name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lp</name>-&gt;<name>y2</name> = <call>(<name>short</name>) <argument_list>(<argument><expr>(<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> - <name>y2</name>) * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> +
		      <name>screen</name>-&gt;<name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nplot</name>++</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...AddToDraw %d points\n", <name>nplot</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekDraw</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>nplot</name> == 0 || <name>T_lastx</name> != <name>tekscr</name>-&gt;<name>cur_X</name> || <name>T_lasty</name> != <name>tekscr</name>-&gt;<name>cur_Y</name></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * We flush on each unconnected line segment if the line
	 * type is not solid.  This solves a bug in X when drawing
	 * points while the line type is not solid.
	 */</comment>
	<if>if <condition>(<expr><name>nplot</name> &gt; 0 &amp;&amp; <name>tekscr</name>-&gt;<name>cur</name>.<name>linetype</name> != <name>SOLIDLINE</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekFlush</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>AddToDraw</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur_X</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>cur_Y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>T_lastx</name> = <name>tekscr</name>-&gt;<name>cur_X</name> = <name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>T_lasty</name> = <name>tekscr</name>-&gt;<name>cur_Y</name> = <name>y</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekFlush</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekFlush\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XDrawSegments</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
		  <argument><expr>((<name>tekscr</name>-&gt;<name>cur</name>.<name>linetype</name> == <name>SOLIDLINE</name>)
		   ? <name>tekscr</name>-&gt;<name>TnormalGC</name>
		   : <name>tekscr</name>-&gt;<name><name>linepat</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>linetype</name> - 1</expr>]</index></name>)</expr></argument>,
		  <argument><expr><name>Tline</name></expr></argument>, <argument><expr><name>nplot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nplot</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>line_pt</name> = <name>Tline</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>TekGINoff</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekGINoff\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>GINcursor</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>XFreeCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GINcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name></expr>)</condition><then> <block>{
	<expr_stmt><expr>*<name>tekscr</name>-&gt;<name>TekGIN</name> = <name>ANSI_CAN</name></expr>;</expr_stmt>	<comment type="block">/* modify recording */</comment>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>TekGIN</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>TekEnqMouse</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list>	<comment type="block">/* character pressed */</comment>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mousex</name>, <name>mousey</name>, <name>rootx</name>, <name>rooty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl>;</decl_stmt>		<comment type="block">/* XQueryPointer */</comment>
    <decl_stmt><decl><type><name>Window</name></type> <name>root</name>, <name>subw</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekEnqMouse\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XQueryPointer</name><argument_list>(
		     <argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
		     <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr>&amp;<name>subw</name></expr></argument>,
		     <argument><expr>&amp;<name>rootx</name></expr></argument>, <argument><expr>&amp;<name>rooty</name></expr></argument>,
		     <argument><expr>&amp;<name>mousex</name></expr></argument>, <argument><expr>&amp;<name>mousey</name></expr></argument>,
		     <argument><expr>&amp;<name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>mousex</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>mousex</name> - <name>screen</name>-&gt;<name>border</name>) / <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
	<expr_stmt><expr><name>mousex</name> = 0</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>mousex</name> &gt;= <name>TEKWIDTH</name></expr>)</condition><then>
	<expr_stmt><expr><name>mousex</name> = <name>TEKWIDTH</name> - 1</expr>;</expr_stmt></then></if></else></if>
    <if>if <condition>(<expr>(<name>mousey</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> - (<name>mousey</name> - <name>screen</name>-&gt;<name>border</name>) /
			 <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then>
	<expr_stmt><expr><name>mousey</name> = 0</expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>mousey</name> &gt;= <name>TEKHEIGHT</name></expr>)</condition><then>
	<expr_stmt><expr><name>mousey</name> = <name>TEKHEIGHT</name> - 1</expr>;</expr_stmt></then></if></else></if>
    <expr_stmt><expr><call><name>TekEnq</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr>(<name>unsigned</name>) <name>c</name></expr></argument>, <argument><expr><name>mousex</name></expr></argument>, <argument><expr><name>mousey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekEnq</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>,
       <param><decl><type><name>unsigned</name></type> <name>status</name></decl></param>,
       <param><decl><type><name>int</name></type> <name>x</name></decl></param>,
       <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Char</name></type> <name><name>cplot</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>adj</name> =<init> <expr>(<name>status</name> != 0) ? 0 : 1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekEnq\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cplot</name><index>[<expr>0</expr>]</index></name> = (<name>Char</name>) <name>status</name></expr>;</expr_stmt>
    <comment type="block">/* Translate x and y to Tektronix code */</comment>
    <expr_stmt><expr><name><name>cplot</name><index>[<expr>1</expr>]</index></name> = <call>(<name>Char</name>) <argument_list>(<argument><expr>040 | ((<name>x</name> &gt;&gt; <name>SHIFTHI</name>) &amp; <name>FIVEBITS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cplot</name><index>[<expr>2</expr>]</index></name> = <call>(<name>Char</name>) <argument_list>(<argument><expr>040 | ((<name>x</name> &gt;&gt; <name>SHIFTLO</name>) &amp; <name>FIVEBITS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cplot</name><index>[<expr>3</expr>]</index></name> = <call>(<name>Char</name>) <argument_list>(<argument><expr>040 | ((<name>y</name> &gt;&gt; <name>SHIFTHI</name>) &amp; <name>FIVEBITS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cplot</name><index>[<expr>4</expr>]</index></name> = <call>(<name>Char</name>) <argument_list>(<argument><expr>040 | ((<name>y</name> &gt;&gt; <name>SHIFTLO</name>) &amp; <name>FIVEBITS</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>gin_terminator</name> != <name>GIN_TERM_NONE</name></expr>)</condition><then>
	<expr_stmt><expr><name><name>cplot</name><index>[<expr><name>len</name>++</expr>]</index></name> = '\r'</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>tekscr</name>-&gt;<name>gin_terminator</name> == <name>GIN_TERM_EOT</name></expr>)</condition><then>
	<expr_stmt><expr><name><name>cplot</name><index>[<expr><name>len</name>++</expr>]</index></name> = '\004'</expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>tt_write</name><argument_list>(<argument><expr><name>cplot</name> + <name>adj</name></expr></argument>, <argument><expr><name>len</name> - <name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* VMS */</comment>
    <expr_stmt><expr><call><name>v_write</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>cplot</name> + <name>adj</name></expr></argument>, <argument><expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>len</name> - <name>adj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* VMS */</comment>
}</block></function>

<function><type><name>void</name></type>
<name>TekRun</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>xw</name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tekWidget</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TekInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>tekWidget</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekRun ...\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>!<call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>set_tek_visibility</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>update_vttekmode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_vtshow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_tekshow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_tekhide_sensitivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>Tpushback</name> = <name>Tpushb</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>setjmp</name><argument_list>(<argument><expr><name>Tekend</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>Tekparse</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if>if <condition>(<expr>!<name>Ttoggled</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>, <argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> = <name>False</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> = <name>False</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>VWindow</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Exit</name><argument_list>(<argument><expr><name>ERROR_TINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></else></if>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>DOTTED_LENGTH</name> 2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DOT_DASHED_LENGTH</name> 4</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SHORT_DASHED_LENGTH</name> 2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>LONG_DASHED_LENGTH</name> 2</cpp:define>

<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name><name>dash_length</name><index>[<expr><name>TEKNUMLINES</name></expr>]</index></name> =<init>
<expr><block>{
    <expr><name>DOTTED_LENGTH</name></expr>,
    <expr><name>DOT_DASHED_LENGTH</name></expr>,
    <expr><name>SHORT_DASHED_LENGTH</name></expr>,
    <expr><name>LONG_DASHED_LENGTH</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name></type> <name><name>dotted</name><index>[<expr><name>DOTTED_LENGTH</name></expr>]</index></name> =<init>
<expr><block>{<expr>3</expr>, <expr>1</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name></type> <name><name>dot_dashed</name><index>[<expr><name>DOT_DASHED_LENGTH</name></expr>]</index></name> =<init>
<expr><block>{<expr>3</expr>, <expr>4</expr>, <expr>3</expr>, <expr>1</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name></type> <name><name>short_dashed</name><index>[<expr><name>SHORT_DASHED_LENGTH</name></expr>]</index></name> =<init>
<expr><block>{<expr>4</expr>, <expr>4</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name></type> <name><name>long_dashed</name><index>[<expr><name>LONG_DASHED_LENGTH</name></expr>]</index></name> =<init>
<expr><block>{<expr>4</expr>, <expr>7</expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name> *</type><name><name>dashes</name><index>[<expr><name>TEKNUMLINES</name></expr>]</index></name> =<init>
<expr><block>{
    <expr><name>dotted</name></expr>,
    <expr><name>dot_dashed</name></expr>,
    <expr><name>short_dashed</name></expr>,
    <expr><name>long_dashed</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * The following is called to create the tekWidget
 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>TekInitialize</name><parameter_list>(<param><decl><type><name>Widget</name> <name>request</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>Widget</name> <name>wnew</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>ArgList</name> <name>args</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *<name>num_args</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Widget</name></type> <name>tekparent</name> =<init> <expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>wnew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr>(<name>TekWidget</name>) <name>wnew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekInitialize\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* look for focus related events on the shell, because we need
     * to care about the shell's border being part of our focus.
     */</comment>
    <expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>tekparent</name></expr></argument>, <argument><expr><name>EnterWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
		      <argument><expr><name>HandleEnterWindow</name></expr></argument>, <argument><expr>(<name>Opaque</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>tekparent</name></expr></argument>, <argument><expr><name>LeaveWindowMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
		      <argument><expr><name>HandleLeaveWindow</name></expr></argument>, <argument><expr>(<name>Opaque</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>tekparent</name></expr></argument>, <argument><expr><name>FocusChangeMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
		      <argument><expr><name>HandleFocusChange</name></expr></argument>, <argument><expr>(<name>Opaque</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtAddEventHandler</name><argument_list>(<argument><expr><name>wnew</name></expr></argument>, <argument><expr><name>PropertyChangeMask</name></expr></argument>, <argument><expr><name>False</name></expr></argument>,
		      <argument><expr><name>HandleBellPropertyChange</name></expr></argument>, <argument><expr>(<name>Opaque</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
    <expr_stmt><expr><name>screen</name>-&gt;<name>whichTwin</name> = &amp;(<name>screen</name>-&gt;<name>fullTwin</name>)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>

}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekRealize</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtValueMask</name> *</type> <name>valuemaskp</name></decl></param>,
	   <param><decl><type><name>XSetWindowAttributes</name> *</type> <name>values</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekWidget</name></type> <name>tw</name> =<init> <expr>(<name>TekWidget</name>) <name>gw</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekLink</name> *</type><name>tek</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>border</name> =<init> <expr>2 * <name>screen</name>-&gt;<name>border</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XGCValues</name></type> <name>gcv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>winX</name>, <name>winY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>width</name>, <name>height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>Tdefault</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>TEKgcFontMask</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekRealize\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>whichTwin</name> = &amp;<name>tekscr</name>-&gt;<name>fullTwin</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>

    <expr_stmt><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> = <call><name>BorderPixel</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tekscr</name>-&gt;<name>arrow</name> = <call><name>make_colored_cursor</name><argument_list>(<argument><expr><name>XC_left_ptr</name></expr></argument>,
					<argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_FG</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>MOUSE_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>TEKNUMFONTS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	<if>if <condition>(<expr>!<name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>XQueryFont</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DefaultGCID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Tfont[%d] %dx%d\n",
	       <name>i</name>,
	       <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>ascent</name> +
	       <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>descent</name>,
	       <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tw</name>-&gt;<name>tek</name>.<name><name>tobaseline</name><index>[<expr><name>i</name></expr>]</index></name> = <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>ascent</name></expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr>!<call><name>TekPtyData</name><argument_list>()</argument_list></call></expr>)</condition><then>
	<return>return;</return></then></if>

    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>T_geometry</name> == <name>NULL</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>defwidth</name>, <name>defheight</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>tekSmall</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>defwidth</name> = <name>TEKMINWIDTH</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>defheight</name> = <name>TEKMINHEIGHT</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>defwidth</name> = <name>TEKDEFWIDTH</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>defheight</name> = <name>TEKDEFHEIGHT</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>Tdefault</name></expr></argument>, <argument><expr>"=%dx%d"</expr></argument>, <argument><expr><name>defwidth</name> + <name>border</name></expr></argument>, <argument><expr><name>defheight</name> + <name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name>T_geometry</name> = <name>Tdefault</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>winX</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>winY</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>width</name> = <call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>TEKDEFWIDTH</name> + <name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name> = <call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>TEKDEFHEIGHT</name> + <name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parsing T_geometry %s\n", <call><name>NonNull</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name>.<name>T_geometry</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pr</name> = <call><name>XParseGeometry</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name>.<name>T_geometry</name></expr></argument>,
			<argument><expr>&amp;<name>winX</name></expr></argument>,
			<argument><expr>&amp;<name>winY</name></expr></argument>,
			<argument><expr>&amp;<name>width</name></expr></argument>,
			<argument><expr>&amp;<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... position %d,%d size %dx%d\n", <name>winY</name>, <name>winX</name>, <name>height</name>, <name>width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>pr</name> &amp; <name>XValue</name>) &amp;&amp; (<name>pr</name> &amp; <name>XNegative</name>)</expr>)</condition><then>
	<expr_stmt><expr><name>winX</name> += <call><name>DisplayWidth</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
	    - (<name>int</name>) <name>width</name> - (<call><name>BorderWidth</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> * 2)</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>(<name>pr</name> &amp; <name>YValue</name>) &amp;&amp; (<name>pr</name> &amp; <name>YNegative</name>)</expr>)</condition><then>
	<expr_stmt><expr><name>winY</name> += <call><name>DisplayHeight</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
	    - (<name>int</name>) <name>height</name> - (<call><name>BorderWidth</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> * 2)</expr>;</expr_stmt></then></if>

    <comment type="block">/* set up size hints */</comment>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>min_width</name> = <name>TEKMINWIDTH</name> + <name>border</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>min_height</name> = <name>TEKMINHEIGHT</name> + <name>border</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>width_inc</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>height_inc</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> = <name>PMinSize</name> | <name>PResizeInc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>x</name> = <name>winX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>y</name> = <name>winY</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>XValue</name> &amp; <name>pr</name>) || (<name>YValue</name> &amp; <name>pr</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> |= <name>USSize</name> | <name>USPosition</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> |= <name>PWinGravity</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>pr</name> &amp; (<name>XNegative</name> | <name>YNegative</name>)</expr>)</condition> <block>{
	<case>case <expr>0</expr>:
	    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>win_gravity</name> = <name>NorthWestGravity</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>XNegative</name></expr>:
	    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>win_gravity</name> = <name>NorthEastGravity</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>YNegative</name></expr>:
	    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>win_gravity</name> = <name>SouthWestGravity</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><default>default:
	    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>win_gravity</name> = <name>SouthEastGravity</name></expr>;</expr_stmt>
	    <break>break;</break>
	</default>}</block></switch>
    }</block></then> <else>else <block>{
	<comment type="block">/* set a default size, but do *not* set position */</comment>
	<expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> |= <name>PSize</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>width</name> = (<name>int</name>) <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>height</name> = (<name>int</name>) <name>height</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>WidthValue</name> &amp; <name>pr</name>) || (<name>HeightValue</name> &amp; <name>pr</name>)</expr>)</condition><then>
	<expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> |= <name>USSize</name></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> |= <name>PSize</name></expr>;</expr_stmt></else></if>

    <expr_stmt><expr>(<name>void</name>) <call><name>REQ_RESIZE</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>tw</name></expr></argument>,
		      <argument><expr>(<name>Dimension</name>) <name>width</name></expr></argument>, <argument><expr>(<name>Dimension</name>) <name>height</name></expr></argument>,
		      <argument><expr>&amp;<name>tw</name>-&gt;<name>core</name>.<name>width</name></expr></argument>, <argument><expr>&amp;<name>tw</name>-&gt;<name>core</name>.<name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* XXX This is bogus.  We are parsing geometries too late.  This
     * is information that the shell widget ought to have before we get
     * realized, so that it can do the right thing.
     */</comment>
    <if>if <condition>(<expr><name>tw</name>-&gt;<name>hints</name>.<name>flags</name> &amp; <name>USPosition</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>XMoveWindow</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TShellWindow</name></expr></argument>, <argument><expr><name>tw</name>-&gt;<name>hints</name>.<name>x</name></expr></argument>, <argument><expr><name>tw</name>-&gt;<name>hints</name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>XSetWMNormalHints</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TShellWindow</name></expr></argument>, <argument><expr>&amp;<name>tw</name>-&gt;<name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XFlush</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* get it out to window manager */</comment>

    <expr_stmt><expr><name>values</name>-&gt;<name>win_gravity</name> = <name>NorthWestGravity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>values</name>-&gt;<name>background_pixel</name> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> = <call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> =
	<call><name>XCreateWindow</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><name>tw</name>-&gt;<name>core</name>.<name>x</name></expr></argument>, <argument><expr><name>tw</name>-&gt;<name>core</name>.<name>y</name></expr></argument>,
		      <argument><expr><name>tw</name>-&gt;<name>core</name>.<name>width</name></expr></argument>, <argument><expr><name>tw</name>-&gt;<name>core</name>.<name>height</name></expr></argument>,
		      <argument><expr><call><name>BorderWidth</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr>(<name>int</name>) <name>tw</name>-&gt;<name>core</name>.<name>depth</name></expr></argument>,
		      <argument><expr><name>InputOutput</name></expr></argument>, <argument><expr><name>CopyFromParent</name></expr></argument>,
		      <argument><expr>((*<name>valuemaskp</name>) | <name>CWBackPixel</name> | <name>CWWinGravity</name>)</expr></argument>,
		      <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TFullWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>Dimension</name>) <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TFullHeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>Dimension</name>) <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>int</name>) <name>width</name> - <name>border</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>THeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>int</name>) <name>height</name> - <name>border</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = (<name>double</name>) <call><name>TWidth</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> / <name>TEKWIDTH</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>d</name> = (<name>double</name>) <call><name>THeight</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> / (<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> +
					 <name>TEKBOTTOMPAD</name>)) &lt; <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call> = <name>d</name></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name> = <name>TEK_FONT_LARGE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tw</name>-&gt;<name>tek</name>.<name>initial_font</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name>TekGetFontSize</name><argument_list>(<argument><expr><name>tw</name>-&gt;<name>tek</name>.<name>initial_font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>result</name> &gt;= 0</expr>)</condition><then>
	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name> = <name>result</name></expr>;</expr_stmt></then></if>
    }</block></then></if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TestGIN</name>(s) XmuCompareISOLatin1(tw-&gt;tek.gin_terminator_str, s)</cpp:define>

    <if>if <condition>(<expr><call><name>TestGIN</name><argument_list>(<argument><expr><name>GIN_TERM_NONE_STR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>gin_terminator</name> = <name>GIN_TERM_NONE</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>TestGIN</name><argument_list>(<argument><expr><name>GIN_TERM_CR_STR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>gin_terminator</name> = <name>GIN_TERM_CR</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>TestGIN</name><argument_list>(<argument><expr><name>GIN_TERM_EOT_STR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>gin_terminator</name> = <name>GIN_TERM_EOT</name></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: illegal GIN terminator setting \"%s\"\n"</expr></argument>,
		<argument><expr><name>xterm_name</name></expr></argument>, <argument><expr><name>tw</name>-&gt;<name>tek</name>.<name>gin_terminator_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>

    <expr_stmt><expr><name>gcv</name>.<name>graphics_exposures</name> = <name>True</name></expr>;</expr_stmt>	<comment type="block">/* default */</comment>
    <expr_stmt><expr><name>gcv</name>.<name>font</name> = <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>]</index></name>-&gt;<name>fid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>foreground</name> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>background</name> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if font wasn't successfully opened, then gcv.font will contain
       the Default GC's ID, meaning that we must use the server default font.
     */</comment>
    <expr_stmt><expr><name>TEKgcFontMask</name> = (<name>unsigned</name> <name>long</name>) ((<name>gcv</name>.<name>font</name> == <name>DefaultGCID</name>) ? 0 : <name>GCFont</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>TnormalGC</name> = <call><name>XCreateGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr>(<name>TEKgcFontMask</name> | <name>GCGraphicsExposures</name> |
				   <name>GCForeground</name> | <name>GCBackground</name>)</expr></argument>,
				  <argument><expr>&amp;<name>gcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gcv</name>.<name>function</name> = <name>GXinvert</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>plane_mask</name> = (<call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call> ^
		      <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>join_style</name> = <name>JoinMiter</name></expr>;</expr_stmt>	<comment type="block">/* default */</comment>
    <expr_stmt><expr><name>gcv</name>.<name>line_width</name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>TcursorGC</name> = <call><name>XCreateGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr>(<name>GCFunction</name> | <name>GCPlaneMask</name>)</expr></argument>, <argument><expr>&amp;<name>gcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>gcv</name>.<name>foreground</name> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>line_style</name> = <name>LineOnOffDash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>gcv</name>.<name>line_width</name> = 0</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>TEKNUMLINES</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	<expr_stmt><expr><name>tekscr</name>-&gt;<name><name>linepat</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>XCreateGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
				       <argument><expr>(<name>GCForeground</name> | <name>GCLineStyle</name>)</expr></argument>, <argument><expr>&amp;<name>gcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XSetDashes</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name><name>linepat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>,
		   <argument><expr>(<name>char</name> *) <name><name>dashes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dash_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>TekBackground</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tekscr</name>-&gt;<name>margin</name> = <name>MARGIN1</name></expr>;</expr_stmt>	<comment type="block">/* Margin 1             */</comment>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>TekGIN</name> = <name>False</name></expr>;</expr_stmt>	<comment type="block">/* GIN off              */</comment>

    <expr_stmt><expr><call><name>XDefineCursor</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{				<comment type="block">/* there's gotta be a better way... */</comment>
	<decl_stmt><decl><type><name>static</name> <name>Arg</name></type> <name><name>args</name><index>[]</index></name> =<init>
	<expr><block>{
	    <expr><block>{<expr><name>XtNtitle</name></expr>, <expr>(<name>XtArgVal</name>) <name>NULL</name></expr>}</block></expr>,
	    <expr><block>{<expr><name>XtNiconName</name></expr>, <expr>(<name>XtArgVal</name>) <name>NULL</name></expr>}</block></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>icon_name</name>, *<name>title</name>, *<name>tek_icon_name</name>, *<name>tek_title</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) &amp; <name>icon_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) &amp; <name>title</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtGetValues</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tek_icon_name</name> = <call><name>XtMalloc</name><argument_list>(<argument><expr>(<name>Cardinal</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>icon_name</name></expr></argument>)</argument_list></call> + 7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tek_icon_name</name></expr></argument>, <argument><expr><name>icon_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tek_icon_name</name></expr></argument>, <argument><expr>"(Tek)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tek_title</name> = <call><name>XtMalloc</name><argument_list>(<argument><expr>(<name>Cardinal</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call> + 7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tek_title</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tek_title</name></expr></argument>, <argument><expr>"(Tek)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>tek_icon_name</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>tek_title</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>tek_icon_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtFree</name><argument_list>(<argument><expr><name>tek_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><name>tek</name> = <name>TekRecord</name> = &amp;<name>Tek0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>next</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>fontsize</name> = (<name>unsigned</name> <name>short</name>) <name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>count</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tek</name>-&gt;<name>ptr</name> = <name>tek</name>-&gt;<name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>Tpushback</name> = <name>Tpushb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>TEKHOME</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>line_pt</name> = <name>Tline</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>Ttoggled</name> = <name>True</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tekscr</name>-&gt;<name>page</name> = <name>tekscr</name>-&gt;<name>cur</name></expr>;</expr_stmt>
    <return>return;</return>
}</block></function>

<function><type><name>int</name></type>
<name>TekGetFontSize</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>param</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"l"</expr></argument>)</argument_list></call> == 0 ||
	<call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"large"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>result</name> = <name>TEK_FONT_LARGE</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call> == 0 ||
	     <call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"two"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>result</name> = <name>TEK_FONT_2</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call> == 0 ||
	     <call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"three"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>result</name> = <name>TEK_FONT_3</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> == 0 ||
	     <call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr>"small"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>result</name> = <name>TEK_FONT_SMALL</name></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt></else></if></else></if></else></if></else></if>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>TekSetFontSize</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>fromMenu</name></decl></param>, <param><decl><type><name>int</name></type> <name>newitem</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>oldsize</name> =<init> <expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> =<init> <expr><call><name>MI2FS</name><argument_list>(<argument><expr><name>newitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Font</name></type> <name>fid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TekSetFontSize(%d) size %d -&gt;%d\n", <name>newitem</name>, <name>oldsize</name>, <name>newsize</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>newsize</name> &lt; 0 || <name>newsize</name> &gt;= <name>TEKNUMFONTS</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>oldsize</name> != <name>newsize</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr>!<name>Ttoggled</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>set_tekfont_menu_item</name><argument_list>(<argument><expr><name>oldsize</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name> = <name>newsize</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>fromMenu</name></expr>)</condition><then>
		<expr_stmt><expr><name>tekscr</name>-&gt;<name>page</name>.<name>fontsize</name> = <name>newsize</name></expr>;</expr_stmt></then></if>

	    <expr_stmt><expr><name>fid</name> = <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>newsize</name></expr>]</index></name>-&gt;<name>fid</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>fid</name> == <name>DefaultGCID</name></expr>)</condition><then> <block>{
		<comment type="block">/* we didn't succeed in opening a real font
		   for this size.  Instead, use server default. */</comment>
		<expr_stmt><expr><call><name>XCopyGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>DefaultGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>GCFont</name></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>XSetFont</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>

	    <expr_stmt><expr><call><name>set_tekfont_menu_item</name><argument_list>(<argument><expr><name>newsize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<name>Ttoggled</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>TCursorToggle</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	    <if>if <condition>(<expr><name>fromMenu</name></expr>)</condition><then> <block>{
		<comment type="block">/* we'll get an exposure event after changing fontsize, so we
		 * have to clear the screen to avoid painting over the previous
		 * text.
		 */</comment>
		<expr_stmt><expr><call><name>TekClear</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if></else></if>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>ChangeTekColors</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>ScrnColors</name> *</type> <name>pNew</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XGCValues</name></type> <name>gcv</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>COLOR_DEFINED</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call> = <call><name>COLOR_VALUE</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... TEK_FG: %#lx\n", <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>COLOR_DEFINED</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call> = <call><name>COLOR_VALUE</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... TEK_BG: %#lx\n", <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>COLOR_DEFINED</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call> = <call><name>COLOR_VALUE</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... TEK_CURSOR: %#lx\n", <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... TEK_CURSOR: %#lx\n", <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>tw</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>,
		       <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XSetBackground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>,
		       <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> == <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>XSetWindowBorder</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>TEKNUMLINES</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name><name>linepat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			   <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>gcv</name>.<name>plane_mask</name> = (<call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call> ^
			  <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XChangeGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TcursorGC</name></expr></argument>, <argument><expr><name>GCPlaneMask</name></expr></argument>, <argument><expr>&amp;<name>gcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TekBackground</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return;</return>
}</block></function>

<function><type><name>void</name></type>
<name>TekReverseVideo</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pixel</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XGCValues</name></type> <name>gcv</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>EXCHANGE</name><argument_list>(<argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>tw</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>, <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XSetBackground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TnormalGC</name></expr></argument>, <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> == <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> = <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>XSetWindowBorder</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>BorderPixel</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>TEKNUMLINES</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><call><name>XSetForeground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name><name>linepat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			   <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_FG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>gcv</name>.<name>plane_mask</name> = (<call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call> ^
			  <call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_CURSOR</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XChangeGC</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tekscr</name>-&gt;<name>TcursorGC</name></expr></argument>, <argument><expr><name>GCPlaneMask</name></expr></argument>, <argument><expr>&amp;<name>gcv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TekBackground</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>TekBackground</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>XSetWindowBackground</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
			     <argument><expr><call><name>T_COLOR</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>TEK_BG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<comment type="block">/*
 * Toggles cursor on or off at cursor position in screen.
 */</comment>
<function><type><name>void</name></type>
<name>TCursorToggle</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>int</name></type> <name>toggle</name></decl></param>)</parameter_list>		<comment type="block">/* TOGGLE or CLEAR */</comment>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name>, <name>x</name>, <name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cellwidth</name>, <name>cellheight</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return;</return></then></if>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("TCursorToggle %s\n", (<name>toggle</name> == <name>TOGGLE</name>) ? "toggle" : "clear")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> = <name>tekscr</name>-&gt;<name>cur</name>.<name>fontsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cellwidth</name> = (<name>unsigned</name>) <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>c</name></expr>]</index></name>-&gt;<name>max_bounds</name>.<name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cellheight</name> = <call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>c</name></expr>]</index></name>-&gt;<name>ascent</name> +
			     <name>tw</name>-&gt;<name>tek</name>.<name><name>Tfont</name><index>[<expr><name>c</name></expr>]</index></name>-&gt;<name>descent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>x</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>(<name>tekscr</name>-&gt;<name>cur_X</name> * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call>) + <name>screen</name>-&gt;<name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> = <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>TEKHEIGHT</name> + <name>TEKTOPPAD</name> - <name>tekscr</name>-&gt;<name>cur_Y</name>) * <call><name>TekScale</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call>)
	       + <name>screen</name>-&gt;<name>border</name> - <name>tw</name>-&gt;<name>tek</name>.<name><name>tobaseline</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>toggle</name> == <name>TOGGLE</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>screen</name>-&gt;<name>select</name> || <name>screen</name>-&gt;<name>always_highlight</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>tekscr</name>-&gt;<name>TcursorGC</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
			   <argument><expr><name>cellwidth</name></expr></argument>, <argument><expr><name>cellheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else <block>{			<comment type="block">/* fix to use different GC! */</comment>
	    <expr_stmt><expr><call><name>XDrawRectangle</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>tekscr</name>-&gt;<name>TcursorGC</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
			   <argument><expr><name>cellwidth</name> - 1</expr></argument>, <argument><expr><name>cellheight</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then> <else>else <block>{
	<comment type="block">/* Clear the entire rectangle, even though we may only
	 * have drawn an outline.  This fits with our refresh
	 * scheme of redrawing the entire window on any expose
	 * event and is easier than trying to figure out exactly
	 * which part of the cursor needs to be erased.
	 */</comment>
	<expr_stmt><expr><call><name>XClearArea</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TWindow</name><argument_list>(<argument><expr><name>tekscr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
		   <argument><expr><name>cellwidth</name></expr></argument>, <argument><expr><name>cellheight</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>TekSimulatePageButton</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>reset</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>reset</name></expr>)</condition><then> <block>{
	    <macro><name>memset</name><argument_list>(<argument>&amp;tekscr-&gt;cur</argument>, <argument>0</argument>, <argument>sizeof tekscr-&gt;cur</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>tekRefreshList</name> = (<name>TekLink</name> *) 0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TekPage</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_X</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>tekscr</name>-&gt;<name>cur_Y</name> = <name>TEKHOME</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/* write copy of screen to a file */</comment>

<function><type><name>void</name></type>
<name>TekCopy</name><parameter_list>(<param><decl><type><name>TekWidget</name></type> <name>tw</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TekLink</name> *</type><name>Tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>initbuf</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tekcopyfd</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>timestamp_filename</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"COPY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> &gt;= 0
	    &amp;&amp; <call><name>access</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	}</block></then></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
	<if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr>"."</expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{	<comment type="block">/* can't write in directory */</comment>
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>tekcopyfd</name> = <call><name>open_userfile</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>gid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>tekcopyfd</name> &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>initbuf</name></expr></argument>, <argument><expr>"%c%c%c%c"</expr></argument>,
		    <argument><expr><name>ANSI_ESC</name></expr></argument>, <argument><expr><call>(<name>char</name>) <argument_list>(<argument><expr><name>tekscr</name>-&gt;<name>page</name>.<name>fontsize</name> + '8'</expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><name>ANSI_ESC</name></expr></argument>, <argument><expr><call>(<name>char</name>) <argument_list>(<argument><expr><name>tekscr</name>-&gt;<name>page</name>.<name>linetype</name> + '`'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>tekcopyfd</name></expr></argument>, <argument><expr><name>initbuf</name></expr></argument>, <argument><expr>(<name>size_t</name>) 4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>Tp</name> = &amp;<name>Tek0</name></expr>;</expr_stmt>
	    <do>do <block>{
		<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>tekcopyfd</name></expr></argument>, <argument><expr><name>Tp</name>-&gt;<name>data</name></expr></argument>, <argument><expr>(<name>size_t</name>) <name>Tp</name>-&gt;<name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>Tp</name> = <name>Tp</name>-&gt;<name>next</name></expr>;</expr_stmt>
	    }</block> while <condition>(<expr><name>Tp</name></expr>)</condition>;</do>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tekcopyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*ARGSUSED*/</comment>
<function><type><name>void</name></type>
<name>HandleGINInput</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>String</name> *</type> <name>param_list</name></decl></param>,
	       <param><decl><type><name>Cardinal</name> *</type><name>nparamsp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TekWidget</name></type> <name>tw</name> =<init> <expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>tw</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TekScreen</name> *</type><name>tekscr</name> =<init> <expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>tekscr</name>-&gt;<name>TekGIN</name> &amp;&amp; *<name>nparamsp</name> == 1</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><name><name>param_list</name><index>[<expr>0</expr>]</index><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
	    <case>case <expr>'l'</expr>:
	    </case><case>case <expr>'m'</expr>:
	    </case><case>case <expr>'r'</expr>:
	    </case><case>case <expr>'L'</expr>:
	    </case><case>case <expr>'M'</expr>:
	    </case><case>case <expr>'R'</expr>:
		<break>break;</break>
	    </case><default>default:
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* let them know they goofed */</comment>
		<expr_stmt><expr><name>c</name> = 'l'</expr>;</expr_stmt>	<comment type="block">/* provide a default */</comment>
	    </default>}</block></switch>
	    <expr_stmt><expr><call><name>TekEnqMouse</name><argument_list>(<argument><expr><name>tw</name></expr></argument>, <argument><expr><name>c</name> | 0x80</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TekGINoff</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Check if the current widget, or any parent, is the VT100 "xterm" widget.
 */</comment>
<function><type><name>TekWidget</name></type>
<name>getTekWidget</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TekWidget</name></type> <name>xw</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>w</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>xw</name> = (<name>TekWidget</name>) <call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>IsTekWidget</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>xw</name> = 0</expr>;</expr_stmt>
	}</block></then></if>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>IsTekWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>xw</name> = (<name>TekWidget</name>) <name>w</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>xw</name> = <call><name>getTekWidget</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr><call><name>TRACE2</name><argument_list>(<argument><expr>("getTekWidget %p -&gt; %p\n", <name>w</name>, <name>xw</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xw</name></expr>;</return>
}</block></function>
</unit>
