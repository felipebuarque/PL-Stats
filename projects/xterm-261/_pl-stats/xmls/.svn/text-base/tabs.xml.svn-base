<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="tabs.c"><comment type="block">/* $XTermId: tabs.c,v 1.38 2010/04/17 17:11:43 tom Exp $ */</comment>

<comment type="block">/*
 * Copyright 2000-2009,2010 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 *
 * Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.
 *
 *                         All Rights Reserved
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in
 * supporting documentation, and that the name of Digital Equipment
 * Corporation not be used in advertising or publicity pertaining to
 * distribution of the software without specific, written prior permission.
 *
 *
 * DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
 * DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */</comment>

<comment type="block">/* tabs.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>TAB_INDEX</name>(n) ((n) &gt;&gt; TAB_BITS_SHIFT)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TAB_MASK</name>(n)  (1 &lt;&lt; ((n) &amp; (TAB_BITS_WIDTH-1)))</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>SET_TAB</name>(tabs,n) UIntSet(tabs[TAB_INDEX(n)], TAB_MASK(n))</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CLR_TAB</name>(tabs,n) UIntClr(tabs[TAB_INDEX(n)], TAB_MASK(n))</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TST_TAB</name>(tabs,n) (tabs[TAB_INDEX(n)] &amp; (unsigned) TAB_MASK(n))</cpp:define>

<comment type="block">/*
 * places tabstops at only every 8 columns
 */</comment>
<function><type><name>void</name></type>
<name>TabReset</name><parameter_list>(<param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TabZonk</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>MAX_TABS</name></expr>;</condition> <incr><expr><name>i</name> += 8</expr></incr>)
	<expr_stmt><expr><call><name>TabSet</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>

<comment type="block">/*
 * places a tabstop at col
 */</comment>
<function><type><name>void</name></type>
<name>TabSet</name><parameter_list>(<param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>col</name> &gt;= 0 &amp;&amp; <name>col</name> &lt; <name>MAX_TABS</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>SET_TAB</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * clears a tabstop at col
 */</comment>
<function><type><name>void</name></type>
<name>TabClear</name><parameter_list>(<param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>col</name> &gt;= 0 &amp;&amp; <name>col</name> &lt; <name>MAX_TABS</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>CLR_TAB</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * returns the column of the next tabstop
 * (or MAX_TABS - 1 if there are no more).
 * A tabstop at col is ignored.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>TabNext</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>curses</name> &amp;&amp; <name>screen</name>-&gt;<name>do_wrap</name> &amp;&amp; (<name>xw</name>-&gt;<name>flags</name> &amp; <name>WRAPAROUND</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>xtermIndex</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_cur_col</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>col</name> = 0</expr>;</expr_stmt>
	<expr_stmt><expr><name>screen</name>-&gt;<name>do_wrap</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then></if>
    <for>for (<init><expr>++<name>col</name></expr>;</init> <condition><expr><name>col</name> &lt; <name>MAX_TABS</name></expr>;</condition> <incr><expr>++<name>col</name></expr></incr>)
	<if>if <condition>(<expr><call><name>TST_TAB</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr>(<name>col</name>)</expr>;</return></then></if></for>

    <return>return <expr>(<name>MAX_TABS</name> - 1)</expr>;</return>
}</block></function>

<comment type="block">/*
 * returns the column of the previous tabstop
 * (or 0 if there are no more).
 * A tabstop at col is ignored.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>TabPrev</name><parameter_list>(<param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>)</parameter_list>
<block>{
    <for>for (<init><expr>--<name>col</name></expr>;</init> <condition><expr><name>col</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>col</name></expr></incr>)
	<if>if <condition>(<expr>(<name>col</name> &lt; <name>MAX_TABS</name>) &amp;&amp; <call><name>TST_TAB</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr>(<name>col</name>)</expr>;</return></then></if></for>

    <return>return <expr>(0)</expr>;</return>
}</block></function>

<comment type="block">/*
 * Tab to the next stop, returning true if the cursor moved
 */</comment>
<function><type><name>Bool</name></type>
<name>TabToNextStop</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>saved_column</name> =<init> <expr><name>screen</name>-&gt;<name>cur_col</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>next</name> =<init> <expr><call><name>TabNext</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>tabs</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>cur_col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> =<init> <expr><call><name>LineMaxCol</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><call><name>getLineData</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>cur_row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>next</name> &gt; <name>max</name></expr>)</condition><then>
	<expr_stmt><expr><name>next</name> = <name>max</name></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>set_cur_col</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>screen</name>-&gt;<name>cur_col</name> &gt; <name>saved_column</name>)</expr>;</return>
}</block></function>

<comment type="block">/*
 * Tab to the previous stop, returning true if the cursor moved
 */</comment>
<function><type><name>Bool</name></type>
<name>TabToPrevStop</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>saved_column</name> =<init> <expr><name>screen</name>-&gt;<name>cur_col</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>set_cur_col</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><call><name>TabPrev</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>tabs</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>cur_col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>screen</name>-&gt;<name>cur_col</name> &lt; <name>saved_column</name>)</expr>;</return>
}</block></function>

<comment type="block">/*
 * clears all tabs
 */</comment>
<function><type><name>void</name></type>
<name>TabZonk</name><parameter_list>(<param><decl><type><name>Tabs</name></type> <name>tabs</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tabs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>tabs</name></expr></argument>)</argument_list></call> * <name>TAB_ARRAY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
