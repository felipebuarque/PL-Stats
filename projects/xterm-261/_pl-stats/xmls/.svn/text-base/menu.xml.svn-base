<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="menu.c"><comment type="block">/* $XTermId: menu.c,v 1.267 2010/06/20 21:09:10 tom Exp $ */</comment>

<comment type="block">/*
 *
 * Copyright 1999-2009,2010 by Thomas E. Dickey
 *
 *                         All Rights Reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the
 * sale, use or other dealings in this Software without prior written
 * authorization.
 *
 * Copyright 1989  The Open Group
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of The Open Group shall not be
 * used in advertising or otherwise to promote the sale, use or other dealings
 * in this Software without prior written authorization from The Open Group.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;menu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xstrings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/CharSet.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>app_con</name> <name>Xaw_app_con</name></cpp:define>	<comment type="block">/* quiet a warning from SimpleMenu.h */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SimpleMenu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Box.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SmeBSB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/MenuButton.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW3D</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/SimpleMenu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/Box.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/SmeBSB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/MenuButton.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SimpleMenu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Box.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SmeBSB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/MenuButton.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAWPLUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/SimpleMenu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/Box.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/SmeBSB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/SmeLine.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/MenuButton.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>app_con</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>ToggleFlag</name>(flag) flag = (Boolean) !flag</cpp:define>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_8bit_control</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allow132</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowsends</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_altscreen</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_appcursor</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_appkeypad</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_autolinefeed</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_autowrap</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_backarrow</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_bellIsUrgent</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_clearsavedlines</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_continue</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_delete_del</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_hardreset</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_interrupt</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_jumpscroll</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_kill</name></type>            <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_old_fkeys</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_poponbell</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_print</name></type>           <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_print_redir</name></type>     <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_quit</name></type>            <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_redraw</name></type>          <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_reversevideo</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_reversewrap</name></type>     <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_scrollbar</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_scrollkey</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_scrollttyoutput</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_securekbd</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_keepSelection</name></type>   <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_selectClipboard</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_softreset</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_suspend</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_terminate</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_titeInhibit</name></type>     <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_visualbell</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_vtfont</name></type>          <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_logging</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_activeicon</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ALLOW_XXX_OPS</name></expr></cpp:if>
<function_decl><type><name>static</name> <name>void</name></type> <name>enable_allow_xxx_ops</name> <parameter_list>(<param><decl><type><name>Bool</name></type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowColorOps</name></type>   <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowFontOps</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowTcapOps</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowTitleOps</name></type>   <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_allowWindowOps</name></type>  <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BLINK_CURS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_cursorblink</name></type>     <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_boxchars</name></type>   <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_packed</name></type>     <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_doublesize</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_loadable</name></type>   <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_hp_fkeys</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_alt_esc</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_num_lock</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_meta_esc</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_renderfont</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_sco_fkeys</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_sun_fkeys</name></type>       <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_sun_kbd</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tcap_fkeys</name></type>      <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekcopy</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekhide</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekmode</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekonoff</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekpage</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekreset</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tekshow</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tektext2</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tektext3</name></type>        <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tektextlarge</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_tektextsmall</name></type>    <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_vthide</name></type>          <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_vtmode</name></type>          <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_vtonoff</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_vtshow</name></type>          <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<function_decl><type><name>static</name> <name>void</name></type> <name>handle_tekshow</name>     <parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>allowswitch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>handle_vtshow</name>      <parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>allowswitch</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_toolbar</name></type>         <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_utf8_mode</name></type>  <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>do_font_utf8_title</name></type> <name>PROTO_XT_CALLBACK_ARGS</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The order of entries MUST match the values given in menu.h
 */</comment>
<decl_stmt><decl><type><name>MenuEntry</name></type> <name><name>mainMenuEntries</name><index>[]</index></name> =<init> <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr><block>{ <expr>"toolbar"</expr>,	<expr><name>do_toolbar</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"securekbd"</expr>,	<expr><name>do_securekbd</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allowsends"</expr>,	<expr><name>do_allowsends</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"redraw"</expr>,		<expr><name>do_redraw</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line1"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <expr><block>{ <expr>"logging"</expr>,	<expr><name>do_logging</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"print"</expr>,		<expr><name>do_print</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"print-redir"</expr>,	<expr><name>do_print_redir</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line2"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"8-bit control"</expr>,	<expr><name>do_8bit_control</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"backarrow key"</expr>,	<expr><name>do_backarrow</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
    <expr><block>{ <expr>"num-lock"</expr>,	<expr><name>do_num_lock</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"alt-esc"</expr>,	<expr><name>do_alt_esc</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"meta-esc"</expr>,	<expr><name>do_meta_esc</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"delete-is-del"</expr>,	<expr><name>do_delete_del</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"oldFunctionKeys"</expr>,<expr><name>do_old_fkeys</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
    <expr><block>{ <expr>"tcapFunctionKeys"</expr>,<expr><name>do_tcap_fkeys</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
    <expr><block>{ <expr>"hpFunctionKeys"</expr>,	<expr><name>do_hp_fkeys</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
    <expr><block>{ <expr>"scoFunctionKeys"</expr>,<expr><name>do_sco_fkeys</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
    <expr><block>{ <expr>"sunFunctionKeys"</expr>,<expr><name>do_sun_fkeys</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
    <expr><block>{ <expr>"sunKeyboard"</expr>,	<expr><name>do_sun_kbd</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"line3"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"suspend"</expr>,	<expr><name>do_suspend</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"continue"</expr>,	<expr><name>do_continue</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"interrupt"</expr>,	<expr><name>do_interrupt</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"hangup"</expr>,		<expr><name>do_hangup</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"terminate"</expr>,	<expr><name>do_terminate</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"kill"</expr>,		<expr><name>do_kill</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line4"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"quit"</expr>,		<expr><name>do_quit</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MenuEntry</name></type> <name><name>vtMenuEntries</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"scrollbar"</expr>,	<expr><name>do_scrollbar</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"jumpscroll"</expr>,	<expr><name>do_jumpscroll</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"reversevideo"</expr>,	<expr><name>do_reversevideo</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"autowrap"</expr>,	<expr><name>do_autowrap</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"reversewrap"</expr>,	<expr><name>do_reversewrap</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"autolinefeed"</expr>,	<expr><name>do_autolinefeed</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"appcursor"</expr>,	<expr><name>do_appcursor</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"appkeypad"</expr>,	<expr><name>do_appkeypad</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"scrollkey"</expr>,	<expr><name>do_scrollkey</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"scrollttyoutput"</expr>,<expr><name>do_scrollttyoutput</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow132"</expr>,	<expr><name>do_allow132</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"keepSelection"</expr>,	<expr><name>do_keepSelection</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"selectToClipboard"</expr>,<expr><name>do_selectClipboard</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"visualbell"</expr>,	<expr><name>do_visualbell</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"bellIsUrgent"</expr>,	<expr><name>do_bellIsUrgent</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"poponbell"</expr>,	<expr><name>do_poponbell</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BLINK_CURS</name></expr></cpp:if>
    <expr><block>{ <expr>"cursorblink"</expr>,	<expr><name>do_cursorblink</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"titeInhibit"</expr>,	<expr><name>do_titeInhibit</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
    <expr><block>{ <expr>"activeicon"</expr>,	<expr><name>do_activeicon</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
    <expr><block>{ <expr>"line1"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"softreset"</expr>,	<expr><name>do_softreset</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"hardreset"</expr>,	<expr><name>do_hardreset</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"clearsavedlines"</expr>,<expr><name>do_clearsavedlines</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line2"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <expr><block>{ <expr>"tekshow"</expr>,	<expr><name>do_tekshow</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tekmode"</expr>,	<expr><name>do_tekmode</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"vthide"</expr>,		<expr><name>do_vthide</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>"altscreen"</expr>,	<expr><name>do_altscreen</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MenuEntry</name></type> <name><name>fontMenuEntries</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"fontdefault"</expr>,	<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font1"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font2"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font3"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font4"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font5"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font6"</expr>,		<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <comment type="block">/* this is after the last builtin font; the other entries are special */</comment>
    <expr><block>{ <expr>"fontescape"</expr>,	<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"fontsel"</expr>,	<expr><name>do_vtfont</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <comment type="block">/* down to here should match NMENUFONTS in ptyx.h */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name> || <name>OPT_BOX_CHARS</name> || <name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
    <expr><block>{ <expr>"line1"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
    <expr><block>{ <expr>"font-linedrawing"</expr>,<expr><name>do_font_boxchars</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"font-packed"</expr>,	<expr><name>do_font_packed</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
    <expr><block>{ <expr>"font-doublesize"</expr>,<expr><name>do_font_doublesize</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
    <expr><block>{ <expr>"font-loadable"</expr>,	<expr><name>do_font_loadable</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* toggles for DEC font extensions */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name> || <name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <expr><block>{ <expr>"line2"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
    <expr><block>{ <expr>"render-font"</expr>,	<expr><name>do_font_renderfont</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <expr><block>{ <expr>"utf8-mode"</expr>,	<expr><name>do_font_utf8_mode</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"utf8-title"</expr>,	<expr><name>do_font_utf8_title</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* toggles for other font extensions */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ALLOW_XXX_OPS</name></expr></cpp:if>
    <expr><block>{ <expr>"line3"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow-color-ops"</expr>,<expr><name>do_allowColorOps</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow-font-ops"</expr>,	<expr><name>do_allowFontOps</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow-tcap-ops"</expr>,	<expr><name>do_allowTcapOps</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow-title-ops"</expr>,<expr><name>do_allowTitleOps</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"allow-window-ops"</expr>,<expr><name>do_allowWindowOps</name></expr>,<expr><name>NULL</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<decl_stmt><decl><type><name>MenuEntry</name></type> <name><name>tekMenuEntries</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"tektextlarge"</expr>,	<expr><name>do_tektextlarge</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tektext2"</expr>,	<expr><name>do_tektext2</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tektext3"</expr>,	<expr><name>do_tektext3</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tektextsmall"</expr>,	<expr><name>do_tektextsmall</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line1"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tekpage"</expr>,	<expr><name>do_tekpage</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tekreset"</expr>,	<expr><name>do_tekreset</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tekcopy"</expr>,	<expr><name>do_tekcopy</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"line2"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"vtshow"</expr>,		<expr><name>do_vtshow</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"vtmode"</expr>,		<expr><name>do_vtmode</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>,
    <expr><block>{ <expr>"tekhide"</expr>,	<expr><name>do_tekhide</name></expr>,	<expr><name>NULL</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>internal_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MenuEntry</name> *</type><name>entry_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>entry_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>MenuHeader</name>;</typedef>

    <comment type="block">/* This table is ordered to correspond with MenuIndex */</comment>
<decl_stmt><decl><type><name>static</name> <name>MenuHeader</name></type> <name><name>menu_names</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"mainMenu"</expr>, <expr><name>mainMenuEntries</name></expr>, <macro><name>XtNumber</name><argument_list>(<argument>mainMenuEntries</argument>)</argument_list></macro> }</block></expr>,
    <expr><block>{ <expr>"vtMenu"</expr>,   <expr><name>vtMenuEntries</name></expr>,   <macro><name>XtNumber</name><argument_list>(<argument>vtMenuEntries</argument>)</argument_list></macro>   }</block></expr>,
    <expr><block>{ <expr>"fontMenu"</expr>, <expr><name>fontMenuEntries</name></expr>, <macro><name>XtNumber</name><argument_list>(<argument>fontMenuEntries</argument>)</argument_list></macro> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <expr><block>{ <expr>"tekMenu"</expr>,  <expr><name>tekMenuEntries</name></expr>,  <macro><name>XtNumber</name><argument_list>(<argument>tekMenuEntries</argument>)</argument_list></macro>  }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr>0</expr>,          <expr>0</expr>,               <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<comment type="block">/*
 * FIXME:  These are global data rather than in the xterm widget because they
 * are initialized before the widget is created.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>Widget</name></type> <name>b</name></decl>;</decl_stmt>			<comment type="block">/* the toolbar's buttons */</comment>
    <decl_stmt><decl><type><name>Widget</name></type> <name>w</name></decl>;</decl_stmt>			<comment type="block">/* the popup shell activated by the button */</comment>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>MenuList</name>;</typedef>

<decl_stmt><decl><type><name>static</name> <name>MenuList</name></type> <name><name>vt_shell</name><index>[<expr><name>NUM_POPUP_MENUS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name> &amp;&amp; <name>OPT_TOOLBAR</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>MenuList</name></type> <name><name>tek_shell</name><index>[<expr><name>NUM_POPUP_MENUS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>static</name> <name>String</name></type>
<name>setMenuLocale</name><parameter_list>(<param><decl><type><name>Bool</name></type> <name>before</name></decl></param>, <param><decl><type><name>String</name></type> <name>substitute</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>before</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>result</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>(<name>void</name>) <call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>substitute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setMenuLocale %s:%s\n",
	   (<name>before</name>
	    ? "before"
	    : "after"),
	   <call><name>NonNull</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>before</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *) <name>substitute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Returns a pointer to the MenuList entry that matches the popup menu.
 */</comment>
<function><type><name>static</name> <name>MenuList</name> *</type>
<name>select_menu</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>, <param><decl><type><name>MenuIndex</name></type> <name>num</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name> &amp;&amp; <name>OPT_TOOLBAR</name></expr></cpp:if>
    <while>while <condition>(<expr><name>w</name> != 0</expr>)</condition> <block>{
	<if>if <condition>(<expr><name>w</name> == <name>tekshellwidget</name></expr>)</condition><then> <block>{
	    <return>return <expr>&amp;<name><name>tek_shell</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>w</name> = <call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>&amp;<name><name>vt_shell</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Returns a pointer to the given popup menu shell
 */</comment>
<function><type><name>static</name> <name>Widget</name></type>
<name>obtain_menu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>, <param><decl><type><name>MenuIndex</name></type> <name>num</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>select_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call>-&gt;<name>w</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Returns the number of entries in the given popup menu shell
 */</comment>
<function><type><name>static</name> <name>Cardinal</name></type>
<name>sizeof_menu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>, <param><decl><type><name>MenuIndex</name></type> <name>num</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>select_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call>-&gt;<name>entries</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * create_menu - create a popup shell and stuff the menu into it.
 */</comment>

<function><type><name>static</name> <name>Widget</name></type>
<name>create_menu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>, <param><decl><type><name>XtermWidget</name></type> <name>xtw</name></decl></param>, <param><decl><type><name>MenuIndex</name></type> <name>num</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>XtCallbackRec</name></type> <name><name>cb</name><index>[<expr>2</expr>]</index></name> =<init>
    <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>Arg</name></type> <name>arg</name> =<init>
    <expr><block>{<expr><name>XtNcallback</name></expr>, <expr>(<name>XtArgVal</name>) <name>cb</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xtw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MenuHeader</name> *</type><name>data</name> =<init> <expr>&amp;<name><name>menu_names</name><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MenuList</name> *</type><name>list</name> =<init> <expr><call><name>select_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>_MenuEntry</name> *</type><name>entries</name> =<init> <expr><name>data</name>-&gt;<name>entry_list</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>nentries</name> =<init> <expr><name>data</name>-&gt;<name>entry_len</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>OPT_TOOLBAR</name></expr></cpp:if>
    <decl_stmt><decl><type><name>String</name></type> <name>saveLocale</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>menu_item_bitmap</name> == <name>None</name></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * we really want to do these dynamically
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>check_width</name> 9</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>check_height</name> 8</cpp:define>
	<decl_stmt><decl><type><name>static</name> <name>unsigned</name> <name>char</name></type> <name><name>check_bits</name><index>[]</index></name> =<init>
	<expr><block>{
	    <expr>0x00</expr>, <expr>0x01</expr>, <expr>0x80</expr>, <expr>0x01</expr>, <expr>0xc0</expr>, <expr>0x00</expr>, <expr>0x60</expr>, <expr>0x00</expr>,
	    <expr>0x31</expr>, <expr>0x00</expr>, <expr>0x1b</expr>, <expr>0x00</expr>, <expr>0x0e</expr>, <expr>0x00</expr>, <expr>0x04</expr>, <expr>0x00</expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>screen</name>-&gt;<name>menu_item_bitmap</name> =
	    <call><name>XCreateBitmapFromData</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>xtw</name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><call><name>RootWindowOfScreen</name><argument_list>(<argument><expr><call><name>XtScreen</name><argument_list>(<argument><expr><name>xtw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr>(<name>char</name> *) <name>check_bits</name></expr></argument>, <argument><expr><name>check_width</name></expr></argument>, <argument><expr><name>check_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr_stmt><expr><name>saveLocale</name> = <call><name>setMenuLocale</name><argument_list>(<argument><expr><name>True</name></expr></argument>, <argument><expr><name>resource</name>.<name>menuLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>list</name>-&gt;<name>w</name> = <call><name>XtCreatePopupShell</name><argument_list>(<argument><expr><name>data</name>-&gt;<name>internal_name</name></expr></argument>,
				 <argument><expr><name>simpleMenuWidgetClass</name></expr></argument>,
				 <argument><expr><name>toplevel</name></expr></argument>,
				 <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>list</name>-&gt;<name>w</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>list</name>-&gt;<name>entries</name> = <name>nentries</name></expr>;</expr_stmt>

	<for>for (<init>;</init> <condition><expr><name>nentries</name> &gt; 0</expr>;</condition> <incr><expr><name>nentries</name>--</expr>, <expr><name>entries</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><name><name>cb</name><index>[<expr>0</expr>]</index></name>.<name>callback</name> = (<name>XtCallbackProc</name>) <name>entries</name>-&gt;<name>function</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>cb</name><index>[<expr>0</expr>]</index></name>.<name>closure</name> = (<name>caddr_t</name>) <name>entries</name>-&gt;<name>name</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>entries</name>-&gt;<name>widget</name> = <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr><name>entries</name>-&gt;<name>name</name></expr></argument>,
						    <argument><expr>(<name>entries</name>-&gt;<name>function</name>
						     ? <name>smeBSBObjectClass</name>
						     : <name>smeLineObjectClass</name>)</expr></argument>,
						    <argument><expr><name>list</name>-&gt;<name>w</name></expr></argument>,
						    <argument><expr>&amp;<name>arg</name></expr></argument>, <argument><expr>(<name>Cardinal</name>) 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr_stmt><expr>(<name>void</name>) <call><name>setMenuLocale</name><argument_list>(<argument><expr><name>False</name></expr></argument>, <argument><expr><name>saveLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* do not realize at this point */</comment>
    <return>return <expr><name>list</name>-&gt;<name>w</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>MenuIndex</name></type>
<name>indexOfMenu</name><parameter_list>(<param><decl><type><name>String</name></type> <name>menuName</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>MenuIndex</name></type> <name>me</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr>*<name>menuName</name></expr>)</condition> <block>{
    <case>case <expr>'m'</expr>:
	<expr_stmt><expr><name>me</name> = <name>mainMenu</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'v'</expr>:
	<expr_stmt><expr><name>me</name> = <name>vtMenu</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'f'</expr>:
	<expr_stmt><expr><name>me</name> = <name>fontMenu</name></expr>;</expr_stmt>
	<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    </case><case>case <expr>'t'</expr>:
	<expr_stmt><expr><name>me</name> = <name>tekMenu</name></expr>;</expr_stmt>
	<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><default>default:
	<expr_stmt><expr><name>me</name> = <name>noMenu</name></expr>;</expr_stmt>
    </default>}</block></switch>
    <return>return <expr>(<name>me</name>)</expr>;</return>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>Bool</name></type>
<name>domenu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
       <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,		<comment type="block">/* mainMenu, vtMenu, or tekMenu */</comment>
       <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>	<comment type="block">/* 0 or 1 */</comment>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MenuIndex</name></type> <name>me</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>created</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Widget</name></type> <name>mw</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>*<name>param_count</name> != 1</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>False</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>me</name> = <call><name>indexOfMenu</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>) == <name>noMenu</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>False</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>mw</name> = <call><name>obtain_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call>) == 0
	|| <call><name>sizeof_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>mw</name> = <call><name>create_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>xw</name></expr></argument>, <argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>created</name> = (<name>mw</name> != 0)</expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>mw</name> == 0</expr>)</condition><then>
	<return>return <expr><name>False</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("domenu(%s) %s\n", <name><name>params</name><index>[<expr>0</expr>]</index></name>, <name>created</name> ? "create" : "update")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>me</name></expr>)</condition> <block>{
    <case>case <expr><name>mainMenu</name></expr>:
	<if>if <condition>(<expr><name>created</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>update_toolbar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_securekbd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_allowsends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_logging</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_print_redir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_8bit_control</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_decbkm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_num_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_alt_esc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_meta_esc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_delete_del</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_keyboard_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
	    <if>if <condition>(<expr>!<name>screen</name>-&gt;<name>alt_is_not_meta</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_alt_esc</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				   <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr>!<call><name>xtermHasPrinter</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_print</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				   <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_print_redir</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				   <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>terminal_id</name> &lt; 200</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				      <argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_8bit_ctrl</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				      <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_suspend</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_continue</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>inhibit</name> &amp; <name>I_LOG</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				      <argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>mainMenu_logging</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>inhibit</name> &amp; <name>I_SIGNAL</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<for>for (<init><expr><name>n</name> = (<name>int</name>) <name>mainMenu_suspend</name></expr>;</init> <condition><expr><name>n</name> &lt;= (<name>int</name>) <name>mainMenu_quit</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
		    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>mainMenuEntries</name><index>[<expr><name>n</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	    }</block></then></if>
	}</block></then></if>
	<break>break;</break>

    </case><case>case <expr><name>vtMenu</name></expr>:
	<if>if <condition>(<expr><name>created</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>update_scrollbar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_jumpscroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_reversevideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_autowrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_reversewrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_autolinefeed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_appcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_appkeypad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_scrollkey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_scrollttyoutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_allow132</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_cursesemul</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_keepSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_selectToClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_visualbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_poponbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_bellIsUrgent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_cursorblink</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_altscreen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_titeInhibit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
	    <if>if <condition>(<expr>!<name>screen</name>-&gt;<name>fnt_icon</name>.<name>fs</name> || !<name>screen</name>-&gt;<name>iconVwin</name>.<name>window</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				      <argument><expr><name><name>vtMenuEntries</name><index>[<expr><name>vtMenu_activeicon</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				      <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else
		<expr_stmt><expr><call><name>update_activeicon</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<for>for (<init><expr><name>n</name> = (<name>int</name>) <name>vtMenu_tekshow</name></expr>;</init> <condition><expr><name>n</name> &lt;= (<name>int</name>) <name>vtMenu_vthide</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
		    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>vtMenuEntries</name><index>[<expr><name>n</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<break>break;</break>

    </case><case>case <expr><name>fontMenu</name></expr>:
	<if>if <condition>(<expr><name>created</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>set_menu_font</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_fontescape</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				  <argument><expr>(<name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr><name>fontMenu_fontescape</name></expr>]</index><index>[<expr><name>fNorm</name></expr>]</index></name>
				   ? <name>True</name> : <name>False</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>update_font_boxchars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_font_boxchars</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				  <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_font_packed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_font_packedfont</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				  <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>		<comment type="block">/* FIXME: not implemented */</comment>
	    <expr_stmt><expr><call><name>update_font_loadable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				  <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_font_loadable</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				  <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>update_font_doublesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>cache_doublesize</name> == 0</expr>)</condition><then>
		<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
				      <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_font_doublesize</name></expr>]</index></name>.<name>widget</name></expr></argument>,
				      <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>update_font_renderfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>update_font_utf8_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_font_utf8_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ALLOW_XXX_OPS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>update_menu_allowColorOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_menu_allowFontOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_menu_allowTcapOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_menu_allowTitleOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_menu_allowWindowOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>enable_allow_xxx_ops</name><argument_list>(<argument><expr>!(<name>screen</name>-&gt;<name>allowSendEvents</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><call><name>FindFontSelection</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
			      <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_fontsel</name></expr>]</index></name>.<name>widget</name></expr></argument>,
			      <argument><expr>(<name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr><name>fontMenu_fontsel</name></expr>]</index></name>
			       ? <name>True</name> : <name>False</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    </case><case>case <expr><name>tekMenu</name></expr>:
	<if>if <condition>(<expr><name>created</name> &amp;&amp; <name>tekWidget</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>set_tekfont_menu_item</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call>-&gt;<name>cur</name>.<name>fontsize</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_vtshow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </case><case>case <expr><name>noMenu</name></expr>:
    </case><default>default:
	<break>break;</break>
    </default>}</block></switch>

    <return>return <expr><name>True</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * public interfaces
 */</comment>

<function><type><name>void</name></type>
<name>HandleCreateMenu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> *</type> <name>event</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,	<comment type="block">/* mainMenu, vtMenu, or tekMenu */</comment>
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>		<comment type="block">/* 0 or 1 */</comment>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("HandleCreateMenu\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>) <call><name>domenu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandlePopupMenu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> *</type> <name>event</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,	<comment type="block">/* mainMenu, vtMenu, or tekMenu */</comment>
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>	<comment type="block">/* 0 or 1 */</comment>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("HandlePopupMenu\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>domenu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
	<expr_stmt><expr><name>w</name> = <call><name>select_menu</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>mainMenu</name></expr></argument>)</argument_list></call>-&gt;<name>w</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>XtCallActionProc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"XawPositionSimpleMenu"</expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtCallActionProc</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"MenuPopup"</expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * private interfaces - keep out!
 */</comment>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>handle_send_signal</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>, <param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>VMS</name></cpp:ifndef>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hold_screen</name> &gt; 1</expr>)</condition><then>
	<expr_stmt><expr><name>hold_screen</name> = 0</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>pid</name> &gt; 1</expr>)</condition><then>
	<expr_stmt><expr><call><name>kill_process_group</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/*
 * action routines
 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>do_securekbd</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Time</name></type> <name>now</name> =<init> <expr><name>CurrentTime</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* XXX - wrong */</comment>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>grabbedKbd</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XUngrabKeyboard</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReverseVideo</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>screen</name>-&gt;<name>grabbedKbd</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<if>if <condition>(<expr><call><name>XGrabKeyboard</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name>True</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call>
	    != <name>GrabSuccess</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>ReverseVideo</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>screen</name>-&gt;<name>grabbedKbd</name> = <name>True</name></expr>;</expr_stmt>
	}</block></else></if>
    }</block></else></if>
    <expr_stmt><expr><call><name>update_securekbd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSecure</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,		<comment type="block">/* unused */</comment>
	     <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,	<comment type="block">/* [0] = volume */</comment>
	     <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>	<comment type="block">/* 0 or 1 */</comment>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    Time ev_time = CurrentTime;

    if ((event-&gt;xany.type == KeyPress) ||
	(event-&gt;xany.type == KeyRelease))
	ev_time = event-&gt;xkey.time;
    else if ((event-&gt;xany.type == ButtonPress) ||
	     (event-&gt;xany.type == ButtonRelease))
	ev_time = event-&gt;xbutton.time;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>do_securekbd</name><argument_list>(<argument><expr><name><name>vt_shell</name><index>[<expr><name>mainMenu</name></expr>]</index></name>.<name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowsends</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>allowSendEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_allowsends</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ALLOW_XXX_OPS</name></expr></cpp:if>
    <expr_stmt><expr><call><name>enable_allow_xxx_ops</name><argument_list>(<argument><expr>!(<name>screen</name>-&gt;<name>allowSendEvents</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_visualbell</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>visualbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_visualbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_bellIsUrgent</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>bellIsUrgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_bellIsUrgent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_poponbell</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>poponbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_poponbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<function><type><name>static</name> <name>void</name></type>
<name>do_logging</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>logging</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>CloseLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>StartLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <comment type="block">/* update_logging done by CloseLog and StartLog */</comment>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>static</name> <name>void</name></type>
<name>do_print</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>xtermPrintScreen</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><call><name>getPrinterFlags</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_print_redir</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>setPrinterControlMode</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>printer_controlmode</name> ? 0 : 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_redraw</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>show_8bit_control</name><parameter_list>(<param><decl><type><name>Bool</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>control_eight_bits</name> != <name>value</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>control_eight_bits</name> = (<name>Boolean</name>) <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_8bit_control</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_8bit_control</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>show_8bit_control</name><argument_list>(<argument><expr>!<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>control_eight_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_backarrow</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> ^= <name>MODE_DECBKM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_decbkm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_num_lock</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>real_NumLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_num_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_alt_esc</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>alt_sends_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_alt_esc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_meta_esc</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>meta_sends_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_meta_esc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>static</name> <name>void</name></type>
<name>do_delete_del</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>xtermDeleteIsDEL</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>delete_is_del</name> = <name>False</name></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>delete_is_del</name> = <name>True</name></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name>update_delete_del</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_old_fkeys</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsLegacy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_hp_fkeys</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsHP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_sco_fkeys</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsSCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_sun_fkeys</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsSun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<comment type="block">/*
 * This really means "Sun/PC keyboard emulating VT220".
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_sun_kbd</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsVT220</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_tcap_fkeys</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>toggle_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>keyboardIsTermcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * The following cases use the pid instead of the process group so that we
 * don't get hosed by programs that change their process group
 */</comment>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_suspend</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGTSTP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_continue</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGCONT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_interrupt</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>do_hangup</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_terminate</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_kill</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_quit</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Cleanup</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * vt menu callbacks
 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>do_scrollbar</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleScrollBar</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_jumpscroll</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>term</name>-&gt;<name>flags</name> ^= <name>SMOOTHSCROLL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>flags</name> &amp; <name>SMOOTHSCROLL</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>jumpscroll</name> = <name>False</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>screen</name>-&gt;<name>scroll_amt</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>FlushScroll</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>jumpscroll</name> = <name>True</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>update_jumpscroll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_reversevideo</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ReverseVideo</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_autowrap</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>flags</name> ^= <name>WRAPAROUND</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_autowrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_reversewrap</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>flags</name> ^= <name>REVERSEWRAP</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_reversewrap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_autolinefeed</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>flags</name> ^= <name>LINEFEED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_autolinefeed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_appcursor</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> ^= <name>MODE_DECCKM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_appcursor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_appkeypad</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> ^= <name>MODE_DECKPAM</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_appkeypad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_scrollkey</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>scrollkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_scrollkey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_scrollttyoutput</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>scrollttyoutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_scrollttyoutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_keepSelection</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>keepSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_keepSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_selectClipboard</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>selectToClipboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_selectToClipboard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allow132</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>c132</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_allow132</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_cursesemul</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>curses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_cursesemul</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_marginbell</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!(<call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>marginbell</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>bellArmed</name> = -1</expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>update_marginbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>handle_tekshow</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>allowswitch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Show tek-window\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{	<comment type="block">/* not showing, turn on */</comment>
	<expr_stmt><expr><call><name>set_tek_visibility</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>screen</name>-&gt;<name>Vshow</name> || <name>allowswitch</name></expr>)</condition><then> <block>{	<comment type="block">/* is showing, turn off */</comment>
	<expr_stmt><expr><call><name>set_tek_visibility</name><argument_list>(<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>end_tek_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* WARNING: this does a longjmp */</comment>
    }</block></then> <else>else
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_tekshow</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_tekshow</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_tekonoff</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_tekshow</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BLINK_CURS</name></expr></cpp:if>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_cursorblink</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ToggleCursorBlink</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_altscreen</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleAlternate</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_titeInhibit</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>titeInhibit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_titeInhibit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_activeicon</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>iconVwin</name>.<name>window</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>Widget</name></type> <name>shell</name> =<init> <expr><call><name>XtParent</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>active_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>shell</name></expr></argument>, <argument><expr><name>XtNiconWindow</name></expr></argument>,
		      <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>active_icon</name> ? <name>screen</name>-&gt;<name>iconVwin</name>.<name>window</name> : <name>None</name></expr></argument>,
		      <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_activeicon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>do_softreset</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>VTReset</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_hardreset</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>VTReset</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_clearsavedlines</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>VTReset</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_tekmode</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>switch_modes</name><argument_list>(<argument><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* switch to tek mode */</comment>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_vthide</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>hide_vt_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>

<comment type="block">/*
 * vtfont menu
 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>do_vtfont</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name></type> <name>closure</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>entryname</name> =<init> <expr>(<name>char</name> *) <name>closure</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
	<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>entryname</name></expr></argument>, <argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return;</return>
	}</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_font_doublesize</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>cache_doublesize</name> != 0</expr>)</condition><then>
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>font_doublesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>update_font_doublesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_font_boxchars</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_box_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_font_boxchars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_font_packed</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_packed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_font_packed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>menu_font_number</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_font_loadable</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>font_loadable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_font_loadable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_font_renderfont</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr>(<name>XtermWidget</name>) <name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fontnum</name> =<init> <expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>name</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DefaultRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name>.<name>render_font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_font_renderfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermLoadFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><call><name>xtermFontName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScrnRefresh</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
		<argument><expr><call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_font_utf8_mode</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * If xterm was started with -wc option, it might not have the wide fonts.
     * If xterm was not started with -wc, it might not have wide cells.
     */</comment>
    <if>if <condition>(<expr>!<name>screen</name>-&gt;<name>utf8_mode</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>screen</name>-&gt;<name>wide_chars</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><call><name>xtermLoadWideFonts</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>ChangeToWide</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>switchPtyData</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>!<name>screen</name>-&gt;<name>utf8_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * We don't repaint the screen when switching UTF-8 on/off.  When switching
     * on - the Latin-1 codes should paint as-is.  When switching off, that's
     * hard to do properly.
     */</comment>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_font_utf8_title</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>utf8_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update_font_utf8_title</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * tek menu
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>do_tektextlarge</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>tekMenu_tektextlarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tektext2</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>tekMenu_tektext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tektext3</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>tekMenu_tektext3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tektextsmall</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSetFontSize</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>tekMenu_tektextsmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tekpage</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSimulatePageButton</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tekreset</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	    <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekSimulatePageButton</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_tekcopy</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TekCopy</name><argument_list>(<argument><expr><call><name>getTekWidget</name><argument_list>(<argument><expr><name>gw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>handle_vtshow</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>allowswitch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Show vt-window\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>screen</name>-&gt;<name>Vshow</name></expr>)</condition><then> <block>{	<comment type="block">/* not showing, turn on */</comment>
	<expr_stmt><expr><call><name>set_vt_visibility</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> || <name>allowswitch</name></expr>)</condition><then> <block>{	<comment type="block">/* is showing, turn off */</comment>
	<expr_stmt><expr><call><name>set_vt_visibility</name><argument_list>(<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> &amp;&amp; <name>tekRefreshList</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekRefresh</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>end_vt_mode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* WARNING: this does a longjmp... */</comment>
    }</block></then> <else>else
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_vtshow</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vtshow</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_vtonoff</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vtshow</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_vtmode</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>switch_modes</name><argument_list>(<argument><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* switch to vt, or from */</comment>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_tekhide</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>hide_tek_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>

<comment type="block">/*
 * public handler routines
 */</comment>

<decl_stmt><decl><type><name>static</name> <name>void</name></type>
<name>handle_toggle</name>(void (*<name>proc</name>) PROTO_XT_CALLBACK_ARGS</decl>,
	      int var,
	      String * params,
	      Cardinal nparams,
	      Widget w,
	      XtPointer closure,
	      XtPointer data</decl_stmt>)
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> =<init> <expr>-2</expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>nparams</name></expr>)</condition> <block>{
    <case>case <expr>0</expr>:
	<expr_stmt><expr><name>dir</name> = -1</expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>1</expr>:
	<if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	    <expr_stmt><expr><name>dir</name> = 1</expr>;</expr_stmt></then>
	<else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	    <expr_stmt><expr><name>dir</name> = 0</expr>;</expr_stmt></then>
	<else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"toggle"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	    <expr_stmt><expr><name>dir</name> = -1</expr>;</expr_stmt></then></if></else></if></else></if>
	<break>break;</break>
    </case>}</block></switch>

    <switch>switch <condition>(<expr><name>dir</name></expr>)</condition> <block>{
    <case>case <expr>-2</expr>:
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

    </case><case>case <expr>-1</expr>:
	<expr_stmt><expr><call>(*<name>proc</name>) <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>

    </case><case>case <expr>0</expr>:
	<if>if <condition>(<expr><name>var</name></expr>)</condition><then>
	    <expr_stmt><expr><call>(*<name>proc</name>) <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<break>break;</break>

    </case><case>case <expr>1</expr>:
	<if>if <condition>(<expr>!<name>var</name></expr>)</condition><then>
	    <expr_stmt><expr><call>(*<name>proc</name>) <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else>else
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	<break>break;</break>
    </case>}</block></switch>
    <return>return;</return>
}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>handle_vt_toggle</name>(proc, var, params, nparams, w) \
	handle_toggle(proc, (int) (var), params, nparams, w, (XtPointer)0, (XtPointer)0)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>HANDLE_VT_TOGGLE</name>(name) \
	handle_vt_toggle(do_##name, TScreenOf(term)-&gt;name, params, *param_count, w)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>handle_tek_toggle</name>(proc, var, params, nparams, w) \
	handle_toggle(proc, (int) (var), params, nparams, w, (XtPointer)0, (XtPointer)0)</cpp:define>

<function><type><name>void</name></type>
<name>HandleAllowSends</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_allowsends</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowSendEvents</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleSetVisualBell</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		    <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		    <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		    <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>visualbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleSetPopOnBell</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>poponbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>HandleLogging</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>logging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandlePrintScreen</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>xtermPrintScreen</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><call><name>getPrinterFlags</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandlePrintEverything</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>xtermPrintEverything</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><call><name>getPrinterFlags</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>param_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandlePrintControlMode</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		       <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		       <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_print_redir</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleRedraw</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_redraw</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSendSignal</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* *INDENT-OFF* */</comment>
    <decl_stmt><decl><type><name>static</name> struct</type> <name>sigtab</name> <block>{
	<decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sig</name></decl>;</decl_stmt>
    }</block></decl></decl_stmt> <expr_stmt><expr><name><name>signals</name><index>[]</index></name> = <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGTSTP</name></cpp:ifdef>
	<expr><block>{ <expr>"suspend"</expr>,	<expr><name>SIGTSTP</name></expr> }</block></expr>,
	<expr><block>{ <expr>"tstp"</expr>,	<expr><name>SIGTSTP</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGCONT</name></cpp:ifdef>
	<expr><block>{ <expr>"cont"</expr>,	<expr><name>SIGCONT</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr>"int"</expr>,	<expr><name>SIGINT</name></expr> }</block></expr>,
	<expr><block>{ <expr>"hup"</expr>,	<expr><name>SIGHUP</name></expr> }</block></expr>,
	<expr><block>{ <expr>"quit"</expr>,	<expr><name>SIGQUIT</name></expr> }</block></expr>,
	<expr><block>{ <expr>"alrm"</expr>,	<expr><name>SIGALRM</name></expr> }</block></expr>,
	<expr><block>{ <expr>"alarm"</expr>,	<expr><name>SIGALRM</name></expr> }</block></expr>,
	<expr><block>{ <expr>"term"</expr>,	<expr><name>SIGTERM</name></expr> }</block></expr>,
	<expr><block>{ <expr>"kill"</expr>,	<expr><name>SIGKILL</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr>0</expr> }</block></expr>,
    }</block></expr>;</expr_stmt>
    <comment type="block">/* *INDENT-ON* */</comment>

    <if>if <condition>(<expr>*<name>param_count</name> == 1</expr>)</condition><then> <block>{
	<decl_stmt><decl><type>struct <name>sigtab</name> *</type><name>st</name></decl>;</decl_stmt>

	<for>for (<init><expr><name>st</name> = <name>signals</name></expr>;</init> <condition><expr><name>st</name>-&gt;<name>name</name></expr>;</condition> <incr><expr><name>st</name>++</expr></incr>) <block>{
	    <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>st</name>-&gt;<name>name</name></expr></argument>, <argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>handle_send_signal</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>st</name>-&gt;<name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	    }</block></then></if>
	}</block></for>
	<comment type="block">/* one could allow numeric values, but that would be a security hole */</comment>
    }</block></then></if>

    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleQuit</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_quit</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>Handle8BitControl</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_8bit_control</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>control_eight_bits</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleBackarrow</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_backarrow</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECBKM</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleSunFunctionKeys</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_sun_fkeys</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsSun</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleNumLock</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_num_lock</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>real_NumLock</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAltEsc</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	     <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_alt_esc</name></expr></argument>, <argument><expr>!<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>input_eight_bits</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleMetaEsc</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_meta_esc</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>meta_sends_esc</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>HandleDeleteIsDEL</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_delete_del</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>delete_is_del</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleOldFunctionKeys</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_old_fkeys</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsLegacy</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleSunKeyboard</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_sun_kbd</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsVT220</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleHpFunctionKeys</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		     <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		     <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_hp_fkeys</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsHP</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleScoFunctionKeys</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_sco_fkeys</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsSCO</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>HandleScrollbar</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>IsIcon</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_scrollbar</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>fullVwin</name>.<name>sb_info</name>.<name>width</name></expr></argument>,
			 <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>HandleJumpscroll</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>jumpscroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleKeepSelection</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		    <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		    <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		    <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>keepSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleSetSelect</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_selectClipboard</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>selectToClipboard</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleReverseVideo</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_reversevideo</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>misc</name>.<name>re_verse0</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAutoWrap</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	       <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_autowrap</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>WRAPAROUND</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleReverseWrap</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_reversewrap</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>REVERSEWRAP</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAutoLineFeed</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_autolinefeed</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>LINEFEED</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAppCursor</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_appcursor</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECCKM</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAppKeypad</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_appkeypad</name></expr></argument>, <argument><expr>(<name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECKPAM</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleScrollKey</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>scrollkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleScrollTtyOutput</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>scrollttyoutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllow132</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	       <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_allow132</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>c132</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleCursesEmul</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_cursesemul</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>curses</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleBellIsUrgent</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>bellIsUrgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleMarginBell</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>marginbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BLINK_CURS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleCursorBlink</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* eventually want to see if sensitive or not */</comment>
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_cursorblink</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>cursor_blink</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>HandleAltScreen</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* eventually want to see if sensitive or not */</comment>
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_altscreen</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>whichBuf</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleTiteInhibit</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* eventually want to see if sensitive or not */</comment>
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_titeInhibit</name></expr></argument>, <argument><expr>!(<name>term</name>-&gt;<name>misc</name>.<name>titeInhibit</name>)</expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSoftReset</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_softreset</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleHardReset</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_hardreset</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleClearSavedLines</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_clearsavedlines</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleFontDoublesize</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		     <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		     <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>font_doublesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleFontBoxChars</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_boxchars</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_box_chars</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleFontPacked</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_packed</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_packed</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleFontLoading</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_loadable</name></expr></argument>, <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>font_loadable</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleRenderFont</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr>(<name>XtermWidget</name>) <name>term</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DefaultRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_renderfont</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>misc</name>.<name>render_font</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleUTF8Mode</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	       <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_utf8_mode</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_mode</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleUTF8Title</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_font_utf8_title</name></expr></argument>, <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_title</name></expr></argument>,
		     <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleSetTerminalType</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>*<name>param_count</name> == 1</expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr><name><name>params</name><index>[<expr>0</expr>]</index><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
	<case>case <expr>'v'</expr>:
	</case><case>case <expr>'V'</expr>:
	    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>do_vtmode</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <break>break;</break>
	</case><case>case <expr>'t'</expr>:
	</case><case>case <expr>'T'</expr>:
	    <if>if <condition>(<expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>do_tekmode</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <break>break;</break>
	</case><default>default:
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>HandleVisibility</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>*<name>param_count</name> == 2</expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr><name><name>params</name><index>[<expr>0</expr>]</index><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
	<case>case <expr>'v'</expr>:
	</case><case>case <expr>'V'</expr>:
	    <expr_stmt><expr><call><name>handle_tek_toggle</name><argument_list>(<argument><expr><name>do_vtonoff</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>Vshow</name></expr></argument>,
			      <argument><expr><name>params</name> + 1</expr></argument>, <argument><expr>(*<name>param_count</name>) - 1</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr>'t'</expr>:
	</case><case>case <expr>'T'</expr>:
	    <expr_stmt><expr><call><name>handle_tek_toggle</name><argument_list>(<argument><expr><name>do_tekonoff</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><name>params</name> + 1</expr></argument>, <argument><expr>(*<name>param_count</name>) - 1</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</case><default>default:
	    <expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSetTekText</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <macro><name>void</name> <argument_list>(<argument>*proc</argument>)</argument_list></macro> <expr_stmt><expr><name>PROTO_XT_CALLBACK_ARGS</name> = 0</expr>;</expr_stmt>

    <switch>switch <condition>(<expr>*<name>param_count</name></expr>)</condition> <block>{
    <case>case <expr>0</expr>:
	<expr_stmt><expr><name>proc</name> = <name>do_tektextlarge</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>1</expr>:
	<switch>switch <condition>(<expr><call><name>TekGetFontSize</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
	<case>case <expr><name>TEK_FONT_LARGE</name></expr>:
	    <expr_stmt><expr><name>proc</name> = <name>do_tektextlarge</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>TEK_FONT_2</name></expr>:
	    <expr_stmt><expr><name>proc</name> = <name>do_tektext2</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>TEK_FONT_3</name></expr>:
	    <expr_stmt><expr><name>proc</name> = <name>do_tektext3</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr><name>TEK_FONT_SMALL</name></expr>:
	    <expr_stmt><expr><name>proc</name> = <name>do_tektextsmall</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case>}</block></switch>
	<break>break;</break>
    </case>}</block></switch>
    <if>if <condition>(<expr><name>proc</name></expr>)</condition><then>
	<expr_stmt><expr><call>(*<name>proc</name>) <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleTekPage</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_tekpage</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleTekReset</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	       <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	       <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_tekreset</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleTekCopy</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_tekcopy</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>UpdateMenuItem</name><parameter_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
		  <param><decl><type><name>const</name> <name>char</name> *</type><name>func</name></decl></param>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		  <param><decl><type><name>MenuEntry</name> *</type> <name>menu</name></decl></param>,
		  <param><decl><type><name>int</name></type> <name>which</name></decl></param>,
		  <param><decl><type><name>Bool</name></type> <name>val</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>Arg</name></type> <name>menuArgs</name> =<init>
    <expr><block>{<expr><name>XtNleftBitmap</name></expr>, <expr>(<name>XtArgVal</name>) 0</expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Widget</name></type> <name>mi</name> =<init> <expr><name><name>menu</name><index>[<expr><name>which</name></expr>]</index></name>.<name>widget</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mi</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>menuArgs</name>.<name>value</name> = <call>(<name>XtArgVal</name>) <argument_list>(<argument><expr>(<name>val</name>)
				     ? <call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>menu_item_bitmap</name>
				     : <name>None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr>&amp;<name>menuArgs</name></expr></argument>, <argument><expr>(<name>Cardinal</name>) 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("%s(%d): %s\n", <name>func</name>, <name>which</name>, <call><name>BtoS</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UpdateCheckbox</name>(func, mn, mi, val) UpdateMenuItem(func, mn, mi, val)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>UpdateCheckbox</name>(func, mn, mi, val) UpdateMenuItem(mn, mi, val)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>SetItemSensitivity</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>mi</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>val</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>Arg</name></type> <name>menuArgs</name> =<init>
    <expr><block>{<expr><name>XtNsensitive</name></expr>, <expr>(<name>XtArgVal</name>) 0</expr>}</block></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mi</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>menuArgs</name>.<name>value</name> = <call>(<name>XtArgVal</name>) <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>mi</name></expr></argument>, <argument><expr>&amp;<name>menuArgs</name></expr></argument>, <argument><expr>(<name>Cardinal</name>) 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<comment type="block">/*
 * The normal style of xterm popup menu delays initialization until the menu is
 * first requested.  When using a toolbar, we can use the same initialization,
 * though on the first popup there will be a little geometry layout jitter,
 * since the menu is already managed when this callback is invoked.
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>InitPopup</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>gw</name></decl></param>,
	  <param><decl><type><name>XtPointer</name></type> <name>closure</name></decl></param>,
	  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>String</name></type> <name><name>params</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>count</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr>0</expr>]</index></name> = (<name>char</name> *) <name>closure</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("InitPopup(%s)\n", <name><name>params</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>domenu</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr>(<name>XEvent</name> *) 0</expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>gw</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>XtRemoveCallback</name><argument_list>(<argument><expr><name>gw</name></expr></argument>, <argument><expr><name>XtNpopupCallback</name></expr></argument>, <argument><expr><name>InitPopup</name></expr></argument>, <argument><expr><name>closure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>static</name> <name>Dimension</name></type>
<name>SetupShell</name><parameter_list>(<param><decl><type><name>Widget</name> *</type><name>menus</name></decl></param>, <param><decl><type><name>MenuList</name> *</type> <name>shell</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>m</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>external_name</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>button_height</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>button_border</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>saveLocale</name> =<init> <expr><call><name>setMenuLocale</name><argument_list>(<argument><expr><name>True</name></expr></argument>, <argument><expr><name>resource</name>.<name>menuLocale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>w</name> = <call><name>XtVaCreatePopupShell</name><argument_list>(<argument><expr><name><name>menu_names</name><index>[<expr><name>n</name></expr>]</index></name>.<name>internal_name</name></expr></argument>,
				      <argument><expr><name>simpleMenuWidgetClass</name></expr></argument>,
				      <argument><expr>*<name>menus</name></expr></argument>,
				      <argument><expr><name>XtNgeometry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				      <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>w</name></expr></argument>, <argument><expr><name>XtNpopupCallback</name></expr></argument>, <argument><expr><name>InitPopup</name></expr></argument>, <argument><expr><name><name>menu_names</name><index>[<expr><name>n</name></expr>]</index></name>.<name>internal_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>w</name></expr></argument>,
		  <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr>&amp;<name>external_name</name></expr></argument>,
		  <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...SetupShell(%s) -&gt; %s -&gt; %#lx\n",
	   <name><name>menu_names</name><index>[<expr><name>n</name></expr>]</index></name>.<name>internal_name</name>,
	   <name>external_name</name>,
	   (<name>long</name>) <name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>w</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"%sButton"</expr></argument>, <argument><expr><name><name>menu_names</name><index>[<expr><name>n</name></expr>]</index></name>.<name>internal_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>b</name> = <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,
					 <argument><expr><name>menuButtonWidgetClass</name></expr></argument>,
					 <argument><expr>*<name>menus</name></expr></argument>,
					 <argument><expr><name>XtNfromHoriz</name></expr></argument>, <argument><expr>((<name>m</name> &gt;= 0)
							? <name><name>shell</name><index>[<expr><name>m</name></expr>]</index></name>.<name>b</name>
							: 0)</expr></argument>,
					 <argument><expr><name>XtNmenuName</name></expr></argument>, <argument><expr><name><name>menu_names</name><index>[<expr><name>n</name></expr>]</index></name>.<name>internal_name</name></expr></argument>,
					 <argument><expr><name>XtNlabel</name></expr></argument>, <argument><expr><name>external_name</name></expr></argument>,
					 <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr><name><name>shell</name><index>[<expr><name>n</name></expr>]</index></name>.<name>b</name></expr></argument>,
		  <argument><expr><name>XtNheight</name></expr></argument>, <argument><expr>&amp;<name>button_height</name></expr></argument>,
		  <argument><expr><name>XtNborderWidth</name></expr></argument>, <argument><expr>&amp;<name>button_border</name></expr></argument>,
		  <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>(<name>void</name>) <call><name>setMenuLocale</name><argument_list>(<argument><expr><name>False</name></expr></argument>, <argument><expr><name>saveLocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call>(<name>Dimension</name>) <argument_list>(<argument><expr><name>button_height</name> + (<name>button_border</name> * 2)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TOOLBAR */</comment>

<function><type><name>void</name></type>
<name>SetupMenus</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>shell</name></decl></param>, <param><decl><type><name>Widget</name> *</type><name>forms</name></decl></param>, <param><decl><type><name>Widget</name> *</type><name>menus</name></decl></param>, <param><decl><type><name>Dimension</name> *</type> <name>menu_high</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>button_height</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>toolbar_hSpace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("SetupMenus(%s)\n", <name>shell</name> == <name>toplevel</name> ? "vt100" : "tek4014")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr>*<name>menu_high</name> = 0</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>shell</name> == <name>toplevel</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XawSimpleMenuAddGlobalActions</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtRegisterGrabAction</name><argument_list>(<argument><expr><name>HandlePopupMenu</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
			     <argument><expr>(<name>ButtonPressMask</name> | <name>ButtonReleaseMask</name>)</expr></argument>,
			     <argument><expr><name>GrabModeAsync</name></expr></argument>, <argument><expr><name>GrabModeAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr_stmt><expr>*<name>forms</name> = <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr>"form"</expr></argument>,
				     <argument><expr><name>formWidgetClass</name></expr></argument>, <argument><expr><name>shell</name></expr></argument>,
				     <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermAddInput</name><argument_list>(<argument><expr>*<name>forms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set a nominal value for the preferred pane size, which lets the
     * buttons determine the actual height of the menu bar.  We don't show
     * the grip, because it's too easy to make the toolbar look bad that
     * way.
     */</comment>
    <expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>XtNorientation</name></expr></argument>, <argument><expr><name>XtorientHorizontal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XawChainTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XawChainTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XawChainLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XawChainLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>resource</name>.<name>toolBar</name></expr>)</condition><then> <block>{
	<expr_stmt><expr>*<name>menus</name> = <call><name>XtCreateManagedWidget</name><argument_list>(<argument><expr>"menubar"</expr></argument>, <argument><expr><name>boxWidgetClass</name></expr></argument>, <argument><expr>*<name>forms</name></expr></argument>,
				       <argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr>*<name>menus</name> = <call><name>XtCreateWidget</name><argument_list>(<argument><expr>"menubar"</expr></argument>, <argument><expr><name>boxWidgetClass</name></expr></argument>, <argument><expr>*<name>forms</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/*
     * The toolbar widget's height is not necessarily known yet.  If the
     * toolbar is not created as a managed widget, we can still make a good
     * guess about its height by collecting the widget's other resource values.
     */</comment>
    <expr_stmt><expr><call><name>XtVaGetValues</name><argument_list>(<argument><expr>*<name>menus</name></expr></argument>,
		  <argument><expr><name>XtNhSpace</name></expr></argument>, <argument><expr>&amp;<name>toolbar_hSpace</name></expr></argument>,
		  <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>shell</name> == <name>toplevel</name></expr>)</condition><then> <block>{	<comment type="block">/* vt100 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
	<for>for (<init><expr><name>j</name> = <name>mainMenu</name></expr>;</init> <condition><expr><name>j</name> &lt;= <name>fontMenu</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><name>button_height</name> = <call><name>SetupShell</name><argument_list>(<argument><expr><name>menus</name></expr></argument>, <argument><expr><name>vt_shell</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
    }</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <else>else <block>{			<comment type="block">/* tek4014 */</comment>
	<expr_stmt><expr>(<name>void</name>) <call><name>SetupShell</name><argument_list>(<argument><expr><name>menus</name></expr></argument>, <argument><expr><name>tek_shell</name></expr></argument>, <argument><expr><name>mainMenu</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>button_height</name> = <call><name>SetupShell</name><argument_list>(<argument><expr><name>menus</name></expr></argument>, <argument><expr><name>tek_shell</name></expr></argument>, <argument><expr><name>tekMenu</name></expr></argument>, <argument><expr><name>mainMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Tell the main program how high the toolbar is, to help with the initial
     * layout.
     */</comment>
    <expr_stmt><expr>*<name>menu_high</name> = <call>(<name>Dimension</name>) <argument_list>(<argument><expr><name>button_height</name> + 2 * (<name>toolbar_hSpace</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...menuHeight:%d = (%d + 2 * %d)\n",
	   *<name>menu_high</name>, <name>button_height</name>, <name>toolbar_hSpace</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !OPT_TOOLBAR */</comment>
    <expr_stmt><expr>*<name>forms</name> = <name>shell</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>menus</name> = <name>shell</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...shell=%#lx\n", (<name>long</name>) <name>shell</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...forms=%#lx\n", (<name>long</name>) *<name>forms</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...menus=%#lx\n", (<name>long</name>) *<name>menus</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>repairSizeHints</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>getXtermSizeHints</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermSizeHints</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><call><name>ScrollbarWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XSetWMNormalHints</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>term</name>-&gt;<name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INIT_POPUP</name>(s, n) InitPopup(s[n].w, menu_names[n].internal_name, 0)</cpp:define>

<function><type><name>static</name> <name>Bool</name></type>
<name>InitWidgetMenu</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>shell</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("InitWidgetMenu(%p)\n", (<name>void</name> *) <name>shell</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>term</name> != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>shell</name> == <name>toplevel</name></expr>)</condition><then> <block>{	<comment type="block">/* vt100 */</comment>
	    <if>if <condition>(<expr>!<name>term</name>-&gt;<name>init_menu</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>INIT_POPUP</name><argument_list>(<argument><expr><name>vt_shell</name></expr></argument>, <argument><expr><name>mainMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INIT_POPUP</name><argument_list>(<argument><expr><name>vt_shell</name></expr></argument>, <argument><expr><name>vtMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INIT_POPUP</name><argument_list>(<argument><expr><name>vt_shell</name></expr></argument>, <argument><expr><name>fontMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>term</name>-&gt;<name>init_menu</name> = <name>True</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...InitWidgetMenu(vt)\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>result</name> = <name>term</name>-&gt;<name>init_menu</name></expr>;</expr_stmt>
	}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	<else>else <if>if <condition>(<expr><name>tekWidget</name></expr>)</condition><then> <block>{	<comment type="block">/* tek4014 */</comment>
	    <if>if <condition>(<expr>!<name>tekWidget</name>-&gt;<name>init_menu</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>INIT_POPUP</name><argument_list>(<argument><expr><name>tek_shell</name></expr></argument>, <argument><expr><name>mainMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INIT_POPUP</name><argument_list>(<argument><expr><name>tek_shell</name></expr></argument>, <argument><expr><name>tekMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tekWidget</name>-&gt;<name>init_menu</name> = <name>True</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...InitWidgetMenu(tek)\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name>result</name> = <name>tekWidget</name>-&gt;<name>init_menu</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...InitWidgetMenu -&gt;%d\n", <name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>TbInfo</name> *</type>
<name>toolbar_info</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...getting toolbar_info\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>w</name> != (<name>Widget</name>) <name>term</name></expr>)</condition><then>
	<return>return <expr>&amp;(<name>tekWidget</name>-&gt;<name>tek</name>.<name>tb_info</name>)</expr>;</return></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>(<name>void</name>) <name>w</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>&amp;(<call><name>WhichVWin</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>-&gt;<name>tb_info</name>)</expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>hide_toolbar</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>w</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TbInfo</name> *</type><name>info</name> =<init> <expr><call><name>toolbar_info</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("hiding toolbar\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>,
		      <argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr>(<name>Widget</name>) 0</expr></argument>,
		      <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>info</name>-&gt;<name>menu_bar</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>repairSizeHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>XtUnmanageChild</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>XtUnmapWidget</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...hiding toolbar (done)\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>show_toolbar</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>w</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TbInfo</name> *</type><name>info</name> =<init> <expr><call><name>toolbar_info</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("showing toolbar\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>info</name>-&gt;<name>menu_bar</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>XtVaSetValues</name><argument_list>(<argument><expr><name>w</name></expr></argument>,
			  <argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>,
			  <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>repairSizeHints</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>XtManageChild</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>XtIsRealized</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>XtMapWidget</name><argument_list>(<argument><expr><name>info</name>-&gt;<name>menu_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
	<comment type="block">/*
	 * This is needed to make the terminal widget move down below the
	 * toolbar.
	 */</comment>
	<expr_stmt><expr><call><name>XawFormDoLayout</name><argument_list>(<argument><expr><call><name>XtParent</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...showing toolbar (done)\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Make the toolbar visible or invisible in the current window(s).
 */</comment>
<function><type><name>void</name></type>
<name>ShowToolbar</name><parameter_list>(<param><decl><type><name>Bool</name></type> <name>enable</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("ShowToolbar(%d)\n", <name>enable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>IsIcon</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<if>if <condition>(<expr><name>enable</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><call><name>InitWidgetMenu</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>show_toolbar</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	    <if>if <condition>(<expr><call><name>InitWidgetMenu</name><argument_list>(<argument><expr><name>tekshellwidget</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><call><name>show_toolbar</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>tekWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>hide_toolbar</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>hide_toolbar</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>tekWidget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></else></if>
	<expr_stmt><expr><name>resource</name>.<name>toolBar</name> = (<name>Boolean</name>) <name>enable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_toolbar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>HandleToolbar</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>IsIcon</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>handle_vt_toggle</name><argument_list>(<argument><expr><name>do_toolbar</name></expr></argument>, <argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>,
			 <argument><expr><name>params</name></expr></argument>, <argument><expr>*<name>param_count</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>do_toolbar</name><parameter_list>(<param><decl><type><name>Widget</name> <name>gw</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
	   <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Toggle toolbars for both vt100 and tek windows, since they share the
     * menu which contains the checkbox indicating whether the toolbar is
     * active.
     */</comment>
    <if>if <condition>(<expr><call><name>IsIcon</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>ShowToolbar</name><argument_list>(<argument><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>update_toolbar</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_toolbar"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_toolbar</name></expr></argument>,
		   <argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TOOLBAR */</comment>

<function><type><name>void</name></type>
<name>update_securekbd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_securekbd"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_securekbd</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>grabbedKbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_allowsends</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_allowsends"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_allowsends</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowSendEvents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>update_logging</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_logging"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_logging</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>logging</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>update_print_redir</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_print_redir"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_print_redir</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>printer_controlmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_8bit_control</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_8bit_control"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_8bit_ctrl</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>control_eight_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_decbkm</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_decbkm"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_backarrow</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECBKM</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_NUM_LOCK</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_num_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_num_lock"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_num_lock</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>real_NumLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_alt_esc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_alt_esc"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_alt_esc</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>alt_sends_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_meta_esc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_meta_esc"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_meta_esc</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>meta_sends_esc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_sun_fkeys</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_sun_fkeys"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_sun_fkeys</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsSun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_tcap_fkeys</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_tcap_fkeys"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_tcap_fkeys</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsTermcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>update_old_fkeys</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_old_fkeys"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_old_fkeys</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsLegacy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_delete_del</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_delete_del"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_delete_del</name></expr></argument>,
		   <argument><expr><call><name>xtermDeleteIsDEL</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_sun_kbd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_sun_kbd"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_sun_kbd</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsVT220</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_hp_fkeys</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_hp_fkeys"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_hp_fkeys</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsHP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_sco_fkeys</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_sco_fkeys"</expr></argument>,
		   <argument><expr><name>mainMenuEntries</name></expr></argument>,
		   <argument><expr><name>mainMenu_sco_fkeys</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>keyboard</name>.<name>type</name> == <name>keyboardIsSCO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>update_scrollbar</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_scrollbar"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_scrollbar</name></expr></argument>,
		   <argument><expr><call><name>ScrollbarWidth</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_jumpscroll</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_jumpscroll"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_jumpscroll</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>jumpscroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_reversevideo</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_reversevideo"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_reversevideo</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>misc</name>.<name>re_verse</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_autowrap</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_autowrap"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_autowrap</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>WRAPAROUND</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_reversewrap</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_reversewrap"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_reversewrap</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>REVERSEWRAP</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_autolinefeed</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_autolinefeed"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_autolinefeed</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>flags</name> &amp; <name>LINEFEED</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_appcursor</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_appcursor"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_appcursor</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECCKM</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_appkeypad</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_appkeypad"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_appkeypad</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>keyboard</name>.<name>flags</name> &amp; <name>MODE_DECKPAM</name>) != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_scrollkey</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_scrollkey"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_scrollkey</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>scrollkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_scrollttyoutput</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_scrollttyoutput"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_scrollttyoutput</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>scrollttyoutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_keepSelection</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_keepSelection"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_keepSelection</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>keepSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_selectToClipboard</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_selectToClipboard"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_selectToClipboard</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>selectToClipboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_allow132</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_allow132"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_allow132</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>c132</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_cursesemul</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>				<comment type="block">/* 2006-2-12: no longer menu entry */</comment>
    UpdateMenuItem("update_cursesemul", vtMenuEntries, vtMenu_cursesemul,
		   TScreenOf(term)-&gt;curses);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>void</name></type>
<name>update_visualbell</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_visualbell"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_visualbell</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>visualbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_bellIsUrgent</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_bellIsUrgent"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_bellIsUrgent</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>bellIsUrgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_poponbell</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_poponbell"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_poponbell</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>poponbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>update_marginbell</name></cpp:ifndef>	<comment type="block">/* 2007-3-7: no longer menu entry */</comment>
<function><type><name>void</name></type>
<name>update_marginbell</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_marginbell"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_marginbell</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>marginbell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BLINK_CURS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_cursorblink</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_cursorblink"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_cursorblink</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>cursor_blink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>update_altscreen</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_altscreen"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_altscreen</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>whichBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_titeInhibit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_titeInhibit"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_titeInhibit</name></expr></argument>,
		   <argument><expr>!(<name>term</name>-&gt;<name>misc</name>.<name>titeInhibit</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<function><type><name>void</name></type>
<name>update_activeicon</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_activeicon"</expr></argument>,
		   <argument><expr><name>vtMenuEntries</name></expr></argument>,
		   <argument><expr><name>vtMenu_activeicon</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>active_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_font_doublesize</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_doublesize"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_font_doublesize</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>font_doublesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_font_boxchars</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_boxchars"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_font_boxchars</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_box_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_font_packed</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_packed"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_font_packedfont</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>force_packed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_SOFTFONT</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_font_loadable</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_loadable"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_font_loadable</name></expr></argument>,
		   <argument><expr><name>term</name>-&gt;<name>misc</name>.<name>font_loadable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_font_renderfont</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_renderfont"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_render_font</name></expr></argument>,
		   <argument><expr>(<name>term</name>-&gt;<name>misc</name>.<name>render_font</name> == <name>True</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_render_font</name></expr>]</index></name>.<name>widget</name></expr></argument>,
		       <argument><expr>!<call><name>IsEmpty</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>face_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_font_utf8_mode</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>active</name> =<init> <expr>(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_mode</name> != <name>uAlways</name>)</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>enable</name> =<init> <expr>(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_mode</name> != <name>uFalse</name>)</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("update_font_utf8_mode active %d, enable %d\n", <name>active</name>, <name>enable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_wide_chars</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_utf8_mode"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_wide_chars</name></expr></argument>,
		   <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_font_utf8_title</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>active</name> =<init> <expr>(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_mode</name> != <name>uFalse</name>)</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>enable</name> =<init> <expr>(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>utf8_title</name>)</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("update_font_utf8_title active %d, enable %d\n", <name>active</name>, <name>enable</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_wide_title</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_font_utf8_title"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_wide_title</name></expr></argument>,
		   <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ALLOW_XXX_OPS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>enable_allow_xxx_ops</name><parameter_list>(<param><decl><type><name>Bool</name></type> <name>enable</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_allowFontOps</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_allowTcapOps</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_allowTitleOps</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_allowWindowOps</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowColorOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>allowColorOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_menu_allowColorOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowFontOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>allowFontOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_menu_allowFontOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowTcapOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>allowTcapOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_menu_allowTcapOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowTitleOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>allowTitleOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_menu_allowTitleOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>do_allowWindowOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XtPointer</name> <name>closure</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>XtPointer</name> <name>data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>ToggleFlag</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>allowWindowOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_menu_allowWindowOps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllowColorOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		    <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		    <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		    <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>allowColorOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllowFontOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>allowFontOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllowTcapOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		   <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		   <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		   <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>allowTcapOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllowTitleOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		    <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		    <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		    <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>allowTitleOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>HandleAllowWindowOps</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		     <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
		     <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>HANDLE_VT_TOGGLE</name><argument_list>(<argument><expr><name>allowWindowOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_menu_allowColorOps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_menu_allowColorOps"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_allowColorOps</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowColorOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_menu_allowFontOps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_menu_allowFontOps"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_allowFontOps</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowFontOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_menu_allowTcapOps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_menu_allowTcapOps"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_allowTcapOps</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowTcapOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_menu_allowTitleOps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_menu_allowTitleOps"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_allowTitleOps</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowTitleOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>update_menu_allowWindowOps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_menu_allowWindowOps"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><name>fontMenu_allowWindowOps</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>allowWindowOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>update_tekshow</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_tekshow"</expr></argument>,
		       <argument><expr><name>vtMenuEntries</name></expr></argument>,
		       <argument><expr><name>vtMenu_tekshow</name></expr></argument>,
		       <argument><expr><call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>update_vttekmode</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_vtmode"</expr></argument>,
		       <argument><expr><name>vtMenuEntries</name></expr></argument>,
		       <argument><expr><name>vtMenu_tekmode</name></expr></argument>,
		       <argument><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_tekmode"</expr></argument>,
		       <argument><expr><name>tekMenuEntries</name></expr></argument>,
		       <argument><expr><name>tekMenu_vtmode</name></expr></argument>,
		       <argument><expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>update_vtshow</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"update_vtshow"</expr></argument>,
		       <argument><expr><name>tekMenuEntries</name></expr></argument>,
		       <argument><expr><name>tekMenu_vtshow</name></expr></argument>,
		       <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>Vshow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>set_vthide_sensitivity</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
			      <argument><expr><name><name>vtMenuEntries</name><index>[<expr><name>vtMenu_vthide</name></expr>]</index></name>.<name>widget</name></expr></argument>,
			      <argument><expr><call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>set_tekhide_sensitivity</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(
			      <argument><expr><name><name>tekMenuEntries</name><index>[<expr><name>tekMenu_tekhide</name></expr>]</index></name>.<name>widget</name></expr></argument>,
			      <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>Vshow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>set_tekfont_menu_item</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!(<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"set_tekfont_menu_item"</expr></argument>, <argument><expr><name>tekMenuEntries</name></expr></argument>, <argument><expr><call><name>FS2MI</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>,
		       <argument><expr>(<name>val</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TEK4014 */</comment>

<function><type><name>void</name></type>
<name>set_menu_font</name><parameter_list>(<param><decl><type><name>int</name></type> <name>val</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>UpdateCheckbox</name><argument_list>(<argument><expr>"set_menu_font"</expr></argument>,
		   <argument><expr><name>fontMenuEntries</name></expr></argument>,
		   <argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>menu_font_number</name></expr></argument>,
		   <argument><expr>(<name>val</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
