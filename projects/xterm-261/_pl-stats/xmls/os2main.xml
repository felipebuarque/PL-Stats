<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="os2main.c"><comment type="block">/* $XTermId: os2main.c,v 1.265 2010/06/20 21:27:07 tom Exp $ */</comment>

<comment type="block">/* removed all foreign stuff to get the code more clear (hv)
 * and did some rewrite for the obscure OS/2 environment
 */</comment>

<comment type="block">/***********************************************************

Copyright (c) 1987, 1988  X Consortium

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of the X Consortium shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the X Consortium.

Copyright 1987, 1988 by Digital Equipment Corporation, Maynard.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be used in
advertising or publicity pertaining to distribution of the software
without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/</comment>

<comment type="block">/* os2main.c */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INCL_DOSFILEMGR</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INCL_DOSDEVIOCTL</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INCL_DOSSEMAPHORES</name></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__INNOTEK_LIBC__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INCL_DOSDEVICES</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>I_NEED_OS2_H</name></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTERM_MAIN</name></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RES_OFFSET</name>(field)	XtOffsetOf(XTERM_RESOURCE, field)</cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/cursorfont.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>I18N</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlocale.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAW3D</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xaw3d/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_NEXTAW</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/neXtaw/Form.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIB_XAWPLUS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/XawPlus/Form.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_TOOLBAR */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;menu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xstrings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xtermcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm_io.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;charclass.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>setpgrp</name><parameter_list>(<param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>pgid</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>chown</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>fn</name></decl></param>, <param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>char</name> *</type>
<name>ttyname</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>"/dev/tty"</expr>;</return>
}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>		<comment type="block">/* for NOFILE */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>static</name> <name>SIGNAL_T</name></type> <name>reapchild</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>spawnXTerm</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type></decl></param> <comment type="block">/* xw */</comment> )</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>resize_termcap</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>set_owner</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>, <param><decl><type><name>uid_t</name></type> <name>uid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>, <param><decl><type><name>mode_t</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>added_utmp_entry</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>uid_t</name></type> <name>save_ruid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>gid_t</name></type> <name>save_rgid</name></decl>;</decl_stmt>

<comment type="block">/*
** Ordinarily it should be okay to omit the assignment in the following
** statement. Apparently the c89 compiler on AIX 4.1.3 has a bug, or does
** it? Without the assignment though the compiler will init command_to_exec
** to 0xffffffff instead of NULL; and subsequent usage, e.g. in spawnXTerm() to
** SEGV.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>char</name> **</type><name>command_to_exec</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>char</name> **</type><name>command_to_exec_with_luit</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The following structures are initialized in main() in order
** to eliminate any assumptions about the internal order of their
** contents.
*/</comment>
<decl_stmt><decl><type><name>static</name> struct <name>termio</name></type> <name>d_tio</name></decl>;</decl_stmt>

<comment type="block">/* allow use of system default characters if defined and reasonable */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CEOF</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CEOF</name> <name>CONTROL</name>('D')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CEOL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CEOL</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CFLUSH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CFLUSH</name> <name>CONTROL</name>('O')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLNEXT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CLNEXT</name> <name>CONTROL</name>('V')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CNUL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CNUL</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CQUIT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CQUIT</name> <name>CONTROL</name>('\\')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CRPRNT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CRPRNT</name> <name>CONTROL</name>('R')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSTART</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSTART</name> <name>CONTROL</name>('Q')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSTOP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSTOP</name> <name>CONTROL</name>('S')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSUSP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSUSP</name> <name>CONTROL</name>('Z')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CSWTCH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CSWTCH</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CWERASE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CWERASE</name> <name>CONTROL</name>('W')</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>TERMIO_STRUCT</name> struct termio</cpp:define>

<comment type="block">/*
 * SYSV has the termio.c_cc[V] and ltchars; BSD has tchars and ltchars;
 * SVR4 has only termio.c_cc, but it includes everything from ltchars.
 * POSIX termios has termios.c_cc, which is similar to SVR4.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TTYMODE</name>(name) { name, sizeof(name)-1, 0, 0 }</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>Boolean</name></type> <name>override_tty_modes</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> struct</type> <name>_xttymodes</name> <block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></decl></decl_stmt> <expr_stmt><expr><name><name>ttymodelist</name><index>[]</index></name> = <block>{
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"intr"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_intrc ; VINTR */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_intr</name>	0</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"quit"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_quitc ; VQUIT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_quit</name>	1</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"erase"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* sgttyb.sg_erase ; VERASE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_erase</name>	2</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"kill"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* sgttyb.sg_kill ; VKILL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_kill</name>	3</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"eof"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_eofc ; VEOF */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_eof</name>	4</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"eol"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VEOL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_eol</name>	5</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"swtch"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* VSWTCH */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_swtch</name>	6</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"start"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_startc ; VSTART */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_start</name>	7</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"stop"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_stopc ; VSTOP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_stop</name>	8</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"brk"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* tchars.t_brkc */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_brk</name>	9</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"susp"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_suspc ; VSUSP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_susp</name>	10</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"dsusp"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_dsuspc ; VDSUSP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_dsusp</name>	11</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"rprnt"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_rprntc ; VREPRINT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_rprnt</name>	12</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"flush"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_flushc ; VDISCARD */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_flush</name>	13</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"weras"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_werasc ; VWERASE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_weras</name>	14</cpp:define>
    <expr><call><name>TTYMODE</name><argument_list>(<argument><expr>"lnext"</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* ltchars.t_lnextc ; VLNEXT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>XTTYMODE_lnext</name>	15</cpp:define>
    <expr><block>{ <expr><name>NULL</name></expr>,	<expr>0</expr>, <expr>0</expr>, <expr>'\0'</expr> }</block></expr>,	<comment type="block">/* end of data */</comment>
}</block></expr>;</expr_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>TMODE</name>(ind,var) if (ttymodelist[ind].set) var = ttymodelist[ind].value</cpp:define>

<function_decl><type><name>static</name> <name>int</name></type> <name>parse_tty_modes</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type>struct <name>_xttymodes</name> *</type><name>modelist</name></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>passedPty</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* name if pty if slave */</comment>

<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>Console</name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/SysUtil.h&gt;</cpp:file></cpp:include>	<comment type="block">/* XmuGetHostname */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIT_CONSOLE_LEN</name>	12</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIT_CONSOLE</name> "MIT_CONSOLE_"</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>mit_console_name</name><index>[<expr>255 + <name>MIT_CONSOLE_LEN</name> + 1</expr>]</index></name> =<init> <expr><name>MIT_CONSOLE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>Atom</name></type> <name>mit_console</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>tslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>jmp_buf</name></type> <name>env</name></decl>;</decl_stmt>

<comment type="block">/* used by VT (charproc.c) */</comment>

<decl_stmt><decl><type><name>static</name> <name>XtResource</name></type> <name><name>application_resources</name><index>[]</index></name> =<init>
<expr><block>{
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr>"Name"</expr></argument>, <argument><expr><name>xterm_name</name></expr></argument>, <argument><expr><name>DFT_TERMTYPE</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"iconGeometry"</expr></argument>, <argument><expr>"IconGeometry"</expr></argument>, <argument><expr><name>icon_geometry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>XtCTitle</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNiconName</name></expr></argument>, <argument><expr><name>XtCIconName</name></expr></argument>, <argument><expr><name>icon_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"termName"</expr></argument>, <argument><expr>"TermName"</expr></argument>, <argument><expr><name>term_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"ttyModes"</expr></argument>, <argument><expr>"TtyModes"</expr></argument>, <argument><expr><name>tty_modes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"hold"</expr></argument>, <argument><expr>"Hold"</expr></argument>, <argument><expr><name>hold_screen</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"utmpInhibit"</expr></argument>, <argument><expr>"UtmpInhibit"</expr></argument>, <argument><expr><name>utmpInhibit</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"utmpDisplayId"</expr></argument>, <argument><expr>"UtmpDisplayId"</expr></argument>, <argument><expr><name>utmpDisplayId</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"messages"</expr></argument>, <argument><expr>"Messages"</expr></argument>, <argument><expr><name>messages</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"minBufSize"</expr></argument>, <argument><expr>"MinBufSize"</expr></argument>, <argument><expr><name>minBufSize</name></expr></argument>, <argument><expr>4096</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"maxBufSize"</expr></argument>, <argument><expr>"MaxBufSize"</expr></argument>, <argument><expr><name>maxBufSize</name></expr></argument>, <argument><expr>32768</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"menuLocale"</expr></argument>, <argument><expr>"MenuLocale"</expr></argument>, <argument><expr><name>menuLocale</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Sres</name><argument_list>(<argument><expr>"keyboardType"</expr></argument>, <argument><expr>"KeyboardType"</expr></argument>, <argument><expr><name>keyboardType</name></expr></argument>, <argument><expr>"unknown"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sunKeyboard"</expr></argument>, <argument><expr>"SunKeyboard"</expr></argument>, <argument><expr><name>sunKeyboard</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"hpFunctionKeys"</expr></argument>, <argument><expr>"HpFunctionKeys"</expr></argument>, <argument><expr><name>hpFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SCO_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"scoFunctionKeys"</expr></argument>, <argument><expr>"ScoFunctionKeys"</expr></argument>, <argument><expr><name>scoFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUN_FUNC_KEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sunFunctionKeys"</expr></argument>, <argument><expr>"SunFunctionKeys"</expr></argument>, <argument><expr><name>sunFunctionKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TCAP_FKEYS</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"tcapFunctionKeys"</expr></argument>, <argument><expr>"TcapFunctionKeys"</expr></argument>, <argument><expr><name>termcapKeys</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptyInitialErase"</expr></argument>, <argument><expr>"PtyInitialErase"</expr></argument>, <argument><expr><name>ptyInitialErase</name></expr></argument>, <argument><expr><name>DEF_INITIAL_ERASE</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"backarrowKeyIsErase"</expr></argument>, <argument><expr>"BackarrowKeyIsErase"</expr></argument>, <argument><expr><name>backarrow_is_erase</name></expr></argument>, <argument><expr><name>DEF_BACKARO_ERASE</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"useInsertMode"</expr></argument>, <argument><expr>"UseInsertMode"</expr></argument>, <argument><expr><name>useInsertMode</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
    <expr><call><name>Ires</name><argument_list>(<argument><expr>"zIconBeep"</expr></argument>, <argument><expr>"ZIconBeep"</expr></argument>, <argument><expr><name>zIconBeep</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"waitForMap"</expr></argument>, <argument><expr>"WaitForMap"</expr></argument>, <argument><expr><name>wait_for_map</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptyHandshake"</expr></argument>, <argument><expr>"PtyHandshake"</expr></argument>, <argument><expr><name>ptyHandshake</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"ptySttySize"</expr></argument>, <argument><expr>"PtySttySize"</expr></argument>, <argument><expr><name>ptySttySize</name></expr></argument>, <argument><expr><name>DEF_PTY_STTY_SIZE</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sameName"</expr></argument>, <argument><expr>"SameName"</expr></argument>, <argument><expr><name>sameName</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr>"sessionMgt"</expr></argument>, <argument><expr>"SessionMgt"</expr></argument>, <argument><expr><name>sessionMgt</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr><name>XtNtoolBar</name></expr></argument>, <argument><expr><name>XtCToolBar</name></expr></argument>, <argument><expr><name>toolBar</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
    <expr><call><name>Bres</name><argument_list>(<argument><expr><name>XtNmaximized</name></expr></argument>, <argument><expr><name>XtCMaximized</name></expr></argument>, <argument><expr><name>maximized</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>String</name></type> <name><name>fallback_resources</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"*SimpleMenu*menuLabel.vertSpace: 100"</expr>,
    <expr>"*SimpleMenu*HorizontalMargins: 16"</expr>,
    <expr>"*SimpleMenu*Sme.height: 16"</expr>,
    <expr>"*SimpleMenu*Cursor: left_ptr"</expr>,
    <expr>"*mainMenu.Label:  Main Options (no app-defaults)"</expr>,
    <expr>"*vtMenu.Label:  VT Options (no app-defaults)"</expr>,
    <expr>"*fontMenu.Label:  VT Fonts (no app-defaults)"</expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <expr>"*tekMenu.Label:  Tek Options (no app-defaults)"</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Command line options table.  Only resources are entered here...there is a
   pass over the remaining options after XrmParseCommand is let loose. */</comment>
<comment type="block">/* *INDENT-OFF* */</comment>
<decl_stmt><decl><type><name>static</name> <name>XrmOptionDescRec</name></type> <name><name>optionDescList</name><index>[]</index></name> =<init> <expr><block>{
<expr><block>{<expr>"-geometry"</expr>,	<expr>"*vt100.geometry"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-132"</expr>,	<expr>"*c132"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+132"</expr>,	<expr>"*c132"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-ah"</expr>,		<expr>"*alwaysHighlight"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ah"</expr>,		<expr>"*alwaysHighlight"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-aw"</expr>,		<expr>"*autoWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+aw"</expr>,		<expr>"*autoWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{<expr>"-ai"</expr>,		<expr>"*activeIcon"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ai"</expr>,		<expr>"*activeIcon"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<expr><block>{<expr>"-b"</expr>,		<expr>"*internalBorder"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bc"</expr>,		<expr>"*cursorBlink"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+bc"</expr>,		<expr>"*cursorBlink"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-bcf"</expr>,	<expr>"*cursorOffTime"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bcn"</expr>,	<expr>"*cursorOnTime"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-bdc"</expr>,	<expr>"*colorBDMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+bdc"</expr>,	<expr>"*colorBDMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cb"</expr>,		<expr>"*cutToBeginningOfLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cb"</expr>,		<expr>"*cutToBeginningOfLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>, <expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cc"</expr>,		<expr>"*charClass"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-cm"</expr>,		<expr>"*colorMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cm"</expr>,		<expr>"*colorMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cn"</expr>,		<expr>"*cutNewline"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+cn"</expr>,		<expr>"*cutNewline"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-cr"</expr>,		<expr>"*cursorColor"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-cu"</expr>,		<expr>"*curses"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+cu"</expr>,		<expr>"*curses"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-dc"</expr>,		<expr>"*dynamicColors"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+dc"</expr>,		<expr>"*dynamicColors"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-fb"</expr>,		<expr>"*boldFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fbb"</expr>,	<expr>"*freeBoldBox"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>)"off"</expr>}</block></expr>,
<expr><block>{<expr>"+fbb"</expr>,	<expr>"*freeBoldBox"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>)"on"</expr>}</block></expr>,
<expr><block>{<expr>"-fbx"</expr>,	<expr>"*forceBoxChars"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>)"off"</expr>}</block></expr>,
<expr><block>{<expr>"+fbx"</expr>,	<expr>"*forceBoxChars"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>)"on"</expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{<expr>"-fi"</expr>,		<expr>"*iconFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<expr><block>{<expr>"-fa"</expr>,		<expr>"*faceName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fd"</expr>,		<expr>"*faceNameDoublesize"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fs"</expr>,		<expr>"*faceSize"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-fw"</expr>,		<expr>"*wideFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-fwb"</expr>,	<expr>"*wideBoldFont"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INPUT_METHOD</name></expr></cpp:if>
<expr><block>{<expr>"-fx"</expr>,		<expr>"*ximFont"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HIGHLIGHT_COLOR</name></expr></cpp:if>
<expr><block>{<expr>"-hc"</expr>,		<expr>"*highlightColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-hm"</expr>,		<expr>"*highlightColorMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hm"</expr>,		<expr>"*highlightColorMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-selfg"</expr>,	<expr>"*highlightTextColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-selbg"</expr>,	<expr>"*highlightColor"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<expr><block>{<expr>"-hf"</expr>,		<expr>"*hpFunctionKeys"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hf"</expr>,		<expr>"*hpFunctionKeys"</expr>,<expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-hold"</expr>,	<expr>"*hold"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+hold"</expr>,	<expr>"*hold"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
<expr><block>{<expr>"-ie"</expr>,		<expr>"*ptyInitialErase"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ie"</expr>,		<expr>"*ptyInitialErase"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-j"</expr>,		<expr>"*jumpScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+j"</expr>,		<expr>"*jumpScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_C1_PRINT</name></expr></cpp:if>
<expr><block>{<expr>"-k8"</expr>,		<expr>"*allowC1Printable"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+k8"</expr>,		<expr>"*allowC1Printable"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-kt"</expr>,		<expr>"*keyboardType"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"+kt"</expr>,		<expr>"*keyboardType"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<comment type="block">/* parse logging options anyway for compatibility */</comment>
<expr><block>{<expr>"-l"</expr>,		<expr>"*logging"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+l"</expr>,		<expr>"*logging"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-lf"</expr>,		<expr>"*logFile"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-ls"</expr>,		<expr>"*loginShell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ls"</expr>,		<expr>"*loginShell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mb"</expr>,		<expr>"*marginBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+mb"</expr>,		<expr>"*marginBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mc"</expr>,		<expr>"*multiClickTime"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-mesg"</expr>,	<expr>"*messages"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+mesg"</expr>,	<expr>"*messages"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ms"</expr>,		<expr>"*pointerColor"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-nb"</expr>,		<expr>"*nMarginBell"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-nul"</expr>,	<expr>"*underLine"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+nul"</expr>,	<expr>"*underLine"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-pc"</expr>,		<expr>"*boldColors"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+pc"</expr>,		<expr>"*boldColors"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rw"</expr>,		<expr>"*reverseWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+rw"</expr>,		<expr>"*reverseWrap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-s"</expr>,		<expr>"*multiScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+s"</expr>,		<expr>"*multiScroll"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-sb"</expr>,		<expr>"*scrollBar"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sb"</expr>,		<expr>"*scrollBar"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCROLLBAR_RIGHT</name></cpp:ifdef>
<expr><block>{<expr>"-leftbar"</expr>,	<expr>"*rightScrollBar"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rightbar"</expr>,	<expr>"*rightScrollBar"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-rvc"</expr>,	<expr>"*colorRVMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+rvc"</expr>,	<expr>"*colorRVMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-sf"</expr>,		<expr>"*sunFunctionKeys"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sf"</expr>,		<expr>"*sunFunctionKeys"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-si"</expr>,		<expr>"*scrollTtyOutput"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+si"</expr>,		<expr>"*scrollTtyOutput"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-sk"</expr>,		<expr>"*scrollKey"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sk"</expr>,		<expr>"*scrollKey"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-sl"</expr>,		<expr>"*saveLines"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<expr><block>{<expr>"-sp"</expr>,		<expr>"*sunKeyboard"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sp"</expr>,		<expr>"*sunKeyboard"</expr>, <expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{<expr>"-t"</expr>,		<expr>"*tekStartup"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+t"</expr>,		<expr>"*tekStartup"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-ti"</expr>,		<expr>"*decTerminalID"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-tm"</expr>,		<expr>"*ttyModes"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-tn"</expr>,		<expr>"*termName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-u8"</expr>,		<expr>"*utf8"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "2"</expr>}</block></expr>,
<expr><block>{<expr>"+u8"</expr>,		<expr>"*utf8"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "0"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<expr><block>{<expr>"-lc"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+lc"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-lcc"</expr>,	<expr>"*localeFilter"</expr>,<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-en"</expr>,		<expr>"*locale"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-uc"</expr>,		<expr>"*cursorUnderLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+uc"</expr>,		<expr>"*cursorUnderLine"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-ulc"</expr>,	<expr>"*colorULMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ulc"</expr>,	<expr>"*colorULMode"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ulit"</expr>,       <expr>"*italicULMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,        <expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"+ulit"</expr>,       <expr>"*italicULMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,        <expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"-ut"</expr>,		<expr>"*utmpInhibit"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+ut"</expr>,		<expr>"*utmpInhibit"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-im"</expr>,		<expr>"*useInsertMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+im"</expr>,		<expr>"*useInsertMode"</expr>, <expr><name>XrmoptionNoArg</name></expr>,	<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-vb"</expr>,		<expr>"*visualBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+vb"</expr>,		<expr>"*visualBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-pob"</expr>,	<expr>"*popOnBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+pob"</expr>,	<expr>"*popOnBell"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{<expr>"-wc"</expr>,		<expr>"*wideChars"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+wc"</expr>,		<expr>"*wideChars"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-mk_width"</expr>,	<expr>"*mkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+mk_width"</expr>,	<expr>"*mkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-cjk_width"</expr>,	<expr>"*cjkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+cjk_width"</expr>,	<expr>"*cjkWidth"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr>"-wf"</expr>,		<expr>"*waitForMap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+wf"</expr>,		<expr>"*waitForMap"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
<expr><block>{<expr>"-ziconbeep"</expr>,	<expr>"*zIconBeep"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
<expr><block>{<expr>"-samename"</expr>,	<expr>"*sameName"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+samename"</expr>,	<expr>"*sameName"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<expr><block>{<expr>"-sm"</expr>,		<expr>"*sessionMgt"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+sm"</expr>,		<expr>"*sessionMgt"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<expr><block>{<expr>"-tb"</expr>,		<expr>"*"<name>XtNtoolBar</name></expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+tb"</expr>,		<expr>"*"<name>XtNtoolBar</name></expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
<expr><block>{<expr>"-maximized"</expr>,	<expr>"*maximized"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+maximized"</expr>,	<expr>"*maximized"</expr>,	<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* options that we process ourselves */</comment>
<expr><block>{<expr>"-help"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipNArgs</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-version"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipNArgs</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-class"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-e"</expr>,		<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipLine</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-into"</expr>,	<expr><name>NULL</name></expr>,		<expr><name>XrmoptionSkipArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<comment type="block">/* bogus old compatibility stuff for which there are
   standard XtOpenApplication options now */</comment>
<expr><block>{<expr>"%"</expr>,		<expr>"*tekGeometry"</expr>,	<expr><name>XrmoptionStickyArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"#"</expr>,		<expr>".iconGeometry"</expr>,<expr><name>XrmoptionStickyArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-T"</expr>,		<expr>".title"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-n"</expr>,		<expr>"*iconName"</expr>,	<expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
<expr><block>{<expr>"-r"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+r"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-rv"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "on"</expr>}</block></expr>,
<expr><block>{<expr>"+rv"</expr>,		<expr>"*reverseVideo"</expr>,<expr><name>XrmoptionNoArg</name></expr>,		<expr>(<name>XPointer</name>) "off"</expr>}</block></expr>,
<expr><block>{<expr>"-w"</expr>,		<expr>".borderWidth"</expr>, <expr><name>XrmoptionSepArg</name></expr>,	<expr>(<name>XPointer</name>) <name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>OptionHelp</name></type> <name><name>xtermOptions</name><index>[]</index></name> =<init> <expr><block>{
<expr><block>{ <expr>"-version"</expr>,              <expr>"print the version number"</expr> }</block></expr>,
<expr><block>{ <expr>"-help"</expr>,                 <expr>"print out this message"</expr> }</block></expr>,
<expr><block>{ <expr>"-display displayname"</expr>,  <expr>"X server to contact"</expr> }</block></expr>,
<expr><block>{ <expr>"-geometry geom"</expr>,        <expr>"size (in characters) and position"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+rv"</expr>,                 <expr>"turn on/off reverse video"</expr> }</block></expr>,
<expr><block>{ <expr>"-bg color"</expr>,             <expr>"background color"</expr> }</block></expr>,
<expr><block>{ <expr>"-fg color"</expr>,             <expr>"foreground color"</expr> }</block></expr>,
<expr><block>{ <expr>"-bd color"</expr>,             <expr>"border color"</expr> }</block></expr>,
<expr><block>{ <expr>"-bw number"</expr>,            <expr>"border width in pixels"</expr> }</block></expr>,
<expr><block>{ <expr>"-fn fontname"</expr>,          <expr>"normal text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-fb fontname"</expr>,          <expr>"bold text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+fbb"</expr>,                <expr>"turn on/off normal/bold font comparison inhibit"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+fbx"</expr>,                <expr>"turn off/on linedrawing characters"</expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<expr><block>{ <expr>"-fa pattern"</expr>,           <expr>"FreeType font-selection pattern"</expr> }</block></expr>,
<expr><block>{ <expr>"-fd pattern"</expr>,           <expr>"FreeType Doublesize font-selection pattern"</expr> }</block></expr>,
<expr><block>{ <expr>"-fs size"</expr>,              <expr>"FreeType font-size"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-fw fontname"</expr>,          <expr>"doublewidth text font"</expr> }</block></expr>,
<expr><block>{ <expr>"-fwb fontname"</expr>,         <expr>"doublewidth bold text font"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INPUT_METHOD</name></expr></cpp:if>
<expr><block>{ <expr>"-fx fontname"</expr>,          <expr>"XIM fontset"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-iconic"</expr>,               <expr>"start iconic"</expr> }</block></expr>,
<expr><block>{ <expr>"-name string"</expr>,          <expr>"client instance, icon, and title strings"</expr> }</block></expr>,
<expr><block>{ <expr>"-class string"</expr>,         <expr>"class string (XTerm)"</expr> }</block></expr>,
<expr><block>{ <expr>"-title string"</expr>,         <expr>"title string"</expr> }</block></expr>,
<expr><block>{ <expr>"-xrm resourcestring"</expr>,   <expr>"additional resource specifications"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+132"</expr>,                <expr>"turn on/off 80/132 column switching"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ah"</expr>,                 <expr>"turn on/off always highlight"</expr> }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_ACTIVE_ICON</name></cpp:ifndef>
<expr><block>{ <expr>"-/+ai"</expr>,                 <expr>"turn off/on active icon"</expr> }</block></expr>,
<expr><block>{ <expr>"-fi fontname"</expr>,          <expr>"icon font for active icon"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_ACTIVE_ICON */</comment>
<expr><block>{ <expr>"-b number"</expr>,             <expr>"internal border in pixels"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+bc"</expr>,                 <expr>"turn on/off text cursor blinking"</expr> }</block></expr>,
<expr><block>{ <expr>"-bcf milliseconds"</expr>,     <expr>"time text cursor is off when blinking"</expr>}</block></expr>,
<expr><block>{ <expr>"-bcn milliseconds"</expr>,     <expr>"time text cursor is on when blinking"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+bdc"</expr>,                <expr>"turn off/on display of bold as color"</expr>}</block></expr>,
<expr><block>{ <expr>"-/+cb"</expr>,                 <expr>"turn on/off cut-to-beginning-of-line inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-cc classrange"</expr>,        <expr>"specify additional character classes"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cm"</expr>,                 <expr>"turn off/on ANSI color mode"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cn"</expr>,                 <expr>"turn on/off cut newline inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-cr color"</expr>,             <expr>"text cursor color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cu"</expr>,                 <expr>"turn on/off curses emulation"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+dc"</expr>,                 <expr>"turn off/on dynamic color selection"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HIGHLIGHT_COLOR</name></expr></cpp:if>
<expr><block>{ <expr>"-/+hm"</expr>,                 <expr>"turn on/off selection-color override"</expr> }</block></expr>,
<expr><block>{ <expr>"-selbg color"</expr>,          <expr>"selection background color"</expr> }</block></expr>,
<expr><block>{ <expr>"-selfg color"</expr>,          <expr>"selection foreground color"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_HP_FUNC_KEYS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+hf"</expr>,                 <expr>"turn on/off HP Function Key escape codes"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+hold"</expr>,               <expr>"turn on/off logic that retains window after exit"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_INITIAL_ERASE</name></expr></cpp:if>
<expr><block>{ <expr>"-/+ie"</expr>,                 <expr>"turn on/off initialization of 'erase' from pty"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+im"</expr>,                 <expr>"use insert mode for TERMCAP"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+j"</expr>,                  <expr>"turn on/off jump scroll"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_C1_PRINT</name></expr></cpp:if>
<expr><block>{ <expr>"-/+k8"</expr>,                 <expr>"turn on/off C1-printable classification"</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-kt keyboardtype"</expr>,      <expr>"set keyboard type:" <name>KEYBOARD_TYPES</name></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
<expr><block>{ <expr>"-/+l"</expr>,                  <expr>"turn on/off logging"</expr> }</block></expr>,
<expr><block>{ <expr>"-lf filename"</expr>,          <expr>"logging filename"</expr> }</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{ <expr>"-/+l"</expr>,                  <expr>"turn on/off logging (not supported)"</expr> }</block></expr>,
<expr><block>{ <expr>"-lf filename"</expr>,          <expr>"logging filename (not supported)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+ls"</expr>,                 <expr>"turn on/off login shell"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mb"</expr>,                 <expr>"turn on/off margin bell"</expr> }</block></expr>,
<expr><block>{ <expr>"-mc milliseconds"</expr>,      <expr>"multiclick time in milliseconds"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mesg"</expr>,               <expr>"forbid/allow messages"</expr> }</block></expr>,
<expr><block>{ <expr>"-ms color"</expr>,             <expr>"pointer color"</expr> }</block></expr>,
<expr><block>{ <expr>"-nb number"</expr>,            <expr>"margin bell in characters from right end"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+nul"</expr>,                <expr>"turn off/on display of underlining"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+aw"</expr>,                 <expr>"turn on/off auto wraparound"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+pc"</expr>,                 <expr>"turn on/off PC-style bold colors"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+rw"</expr>,                 <expr>"turn on/off reverse wraparound"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+s"</expr>,                  <expr>"turn on/off multiscroll"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sb"</expr>,                 <expr>"turn on/off scrollbar"</expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCROLLBAR_RIGHT</name></cpp:ifdef>
<expr><block>{ <expr>"-rightbar"</expr>,             <expr>"force scrollbar right (default left)"</expr> }</block></expr>,
<expr><block>{ <expr>"-leftbar"</expr>,              <expr>"force scrollbar left"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+rvc"</expr>,                <expr>"turn off/on display of reverse as color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sf"</expr>,                 <expr>"turn on/off Sun Function Key escape codes"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+si"</expr>,                 <expr>"turn on/off scroll-on-tty-output inhibit"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+sk"</expr>,                 <expr>"turn on/off scroll-on-keypress"</expr> }</block></expr>,
<expr><block>{ <expr>"-sl number"</expr>,            <expr>"number of scrolled lines to save"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SUNPC_KBD</name></expr></cpp:if>
<expr><block>{ <expr>"-/+sp"</expr>,                 <expr>"turn on/off Sun/PC Function/Keypad mapping"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{ <expr>"-/+t"</expr>,                  <expr>"turn on/off Tek emulation window"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
<expr><block>{ <expr>"-/+tb"</expr>,                 <expr>"turn on/off toolbar"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-ti termid"</expr>,            <expr>"terminal identifier"</expr> }</block></expr>,
<expr><block>{ <expr>"-tm string"</expr>,            <expr>"terminal mode keywords and characters"</expr> }</block></expr>,
<expr><block>{ <expr>"-tn name"</expr>,              <expr>"TERM environment variable name"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+u8"</expr>,                 <expr>"turn on/off UTF-8 mode (implies wide-characters)"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
<expr><block>{ <expr>"-/+lc"</expr>,                 <expr>"turn on/off locale mode using luit"</expr> }</block></expr>,
<expr><block>{ <expr>"-lcc path"</expr>,             <expr>"filename of locale converter (" <name>DEFLOCALEFILTER</name> ")"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+uc"</expr>,                 <expr>"turn on/off underline cursor"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ulc"</expr>,                <expr>"turn off/on display of underline as color"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ut"</expr>,                 <expr>"turn on/off utmp inhibit (not supported)"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+ulit"</expr>,               <expr>"turn off/on display of underline as italics"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+vb"</expr>,                 <expr>"turn on/off visual bell"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+pob"</expr>,                <expr>"turn on/off pop on bell"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<expr><block>{ <expr>"-/+wc"</expr>,                 <expr>"turn on/off wide-character mode"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+mk_width"</expr>,           <expr>"turn on/off simple width convention"</expr> }</block></expr>,
<expr><block>{ <expr>"-/+cjk_width"</expr>,          <expr>"turn on/off legacy CJK width convention"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"-/+wf"</expr>,                 <expr>"turn on/off wait for map before command exec"</expr> }</block></expr>,
<expr><block>{ <expr>"-e command args ..."</expr>,   <expr>"command to execute"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<expr><block>{ <expr>"%geom"</expr>,                 <expr>"Tek window geometry"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr>"#geom"</expr>,                 <expr>"icon window geometry"</expr> }</block></expr>,
<expr><block>{ <expr>"-T string"</expr>,             <expr>"title name for window"</expr> }</block></expr>,
<expr><block>{ <expr>"-n string"</expr>,             <expr>"icon name for window"</expr> }</block></expr>,
<expr><block>{ <expr>"-C"</expr>,                    <expr>"intercept console messages"</expr> }</block></expr>,
<expr><block>{ <expr>"-Sccn"</expr>,                 <expr>"slave mode on \"ttycc\", file descriptor \"n\""</expr> }</block></expr>,
<expr><block>{ <expr>"-into windowId"</expr>,        <expr>"use the window id given to -into as the parent window rather than the default root window"</expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
<expr><block>{ <expr>"-ziconbeep percent"</expr>,    <expr>"beep and flag icon of window having hidden output"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SAME_NAME</name></expr></cpp:if>
<expr><block>{ <expr>"-/+samename"</expr>,           <expr>"turn on/off the no-flicker option for title and icon name"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<expr><block>{ <expr>"-/+sm"</expr>,                 <expr>"turn on/off the session-management support"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
<expr><block>{<expr>"-/+maximized"</expr>,           <expr>"turn on/off maxmize on startup"</expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* *INDENT-ON* */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DBG_CONSOLE</name></cpp:ifdef>
<decl_stmt><decl><type><name>FILE</name> *</type><name>confd</name></decl>;</decl_stmt>

<function><type><name>static</name> <name>void</name></type>
<name>closecons</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>confs</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>confd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>confd</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<function><type><name>static</name> <name>void</name></type>
<name>opencons</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>closecons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>confd</name> = <call><name>fopen</name><argument_list>(<argument><expr>"/dev/console$"</expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"!!! Cannot open console device.\n"</expr></argument>,
	      <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>opencons</name>()</cpp:define>		<comment type="block">/* nothing */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>closecons</name>()</cpp:define>		<comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *</type><name><name>message</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"Fonts should be fixed width and, if both normal and bold are specified, should"</expr>,
    <expr>"have the same size.  If only a normal font is specified, it will be used for"</expr>,
    <expr>"both normal and bold text (by doing overstriking).  The -e option, if given,"</expr>,
    <expr>"must appear at the end of the command line, otherwise the user's default shell"</expr>,
    <expr>"will be started.  Options that start with a plus sign (+) restore the default."</expr>,
    <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Decode a key-definition.  This combines the termcap and ttyModes, for
 * comparison.  Note that octal escapes in ttyModes are done by the normal
 * resource translation.  Also, ttyModes allows '^-' as a synonym for disabled.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>decode_keyvalue</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>, <param><decl><type><name>int</name></type> <name>termcap</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>string</name> =<init> <expr>*<name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...decode '%s'\n", <name>string</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>string</name> == '^'</expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr>*++<name>string</name></expr>)</condition> <block>{
	<case>case <expr>'?'</expr>:
	    <expr_stmt><expr><name>value</name> = <call><name>A2E</name><argument_list>(<argument><expr><name>ANSI_DEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr>'-'</expr>:
	    <if>if <condition>(<expr>!<name>termcap</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_POSIX_VDISABLE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>value</name> = <name>_POSIX_VDISABLE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_PC_VDISABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>value</name> = <call><name>fpathconf</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>_PC_VDISABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>errno</name> != 0</expr>)</condition><then>
			    <break>break;</break></then></if>	<comment type="block">/* skip this (error) */</comment>
			<expr_stmt><expr><name>value</name> = 0377</expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDISABLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<if>if <condition>(<expr><name>value</name> == -1</expr>)</condition><then>
		    <expr_stmt><expr><name>value</name> = <name>VDISABLE</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	    }</block></then></if>
	    <comment type="block">/* FALLTHRU */</comment>
	</case><default>default:
	    <expr_stmt><expr><name>value</name> = <call><name>CONTROL</name><argument_list>(<argument><expr>*<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</default>}</block></switch>
	<expr_stmt><expr>++<name>string</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>termcap</name> &amp;&amp; (*<name>string</name> == '\\')</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>temp</name> =<init> <expr><call><name>strtol</name><argument_list>(<argument><expr><name>string</name> + 1</expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>temp</name> &gt; 0 &amp;&amp; <name>d</name> != <name>string</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>value</name> = <name>temp</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>string</name> = <name>d</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>value</name> = <call><name>CharOf</name><argument_list>(<argument><expr>*<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>++<name>string</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr>*<name>ptr</name> = <name>string</name></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type>
<name>abbrev</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>tst</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>need</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr>((<name>len</name> &gt;= <name>need</name>) &amp;&amp; (!<call><name>strncmp</name><argument_list>(<argument><expr><name>tst</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>))</expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Syntax</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>badOption</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>list</name> =<init> <expr><call><name>sortedOpts</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:  bad command line option \"%s\"\r\n\n"</expr></argument>,
	    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>badOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"usage:  %s"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>col</name> = 8 + (<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>opt</name> = <name>list</name></expr>;</init> <condition><expr><name>opt</name>-&gt;<name>opt</name></expr>;</condition> <incr><expr><name>opt</name>++</expr></incr>) <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr>3 + (<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* space [ string ] */</comment>
	<if>if <condition>(<expr><name>col</name> + <name>len</name> &gt; 79</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\r\n   "</expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* 3 spaces */</comment>
	    <expr_stmt><expr><name>col</name> = 3</expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>" [%s]"</expr></argument>, <argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>col</name> += <name>len</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"\r\n\nType %s -help for a full description.\r\n\n"</expr></argument>,
	    <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s\n"</expr></argument>, <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>Help</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>opt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OptionHelp</name> *</type><name>list</name> =<init> <expr><call><name>sortedOpts</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>char</name> **</type><name>cpp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s usage:\n    %s [-options ...] [-e command args]\n\n"</expr></argument>,
	   <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"where options include:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>opt</name> = <name>list</name></expr>;</init> <condition><expr><name>opt</name>-&gt;<name>opt</name></expr>;</condition> <incr><expr><name>opt</name>++</expr></incr>) <block>{
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"    %-28s %s\n"</expr></argument>, <argument><expr><name>opt</name>-&gt;<name>opt</name></expr></argument>, <argument><expr><name>opt</name>-&gt;<name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>cpp</name> = <name>message</name></expr>;</init> <condition><expr>*<name>cpp</name></expr>;</condition> <incr><expr><name>cpp</name>++</expr></incr>)
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr>*<name>cpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>Boolean</name></type>
<name>ConvertConsoleSelection</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>selection</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>target</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>Atom</name> * <name>type</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>XtPointer</name> *<name>value</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>unsigned</name> <name>long</name> *<name>length</name></type> <name>GCC_UNUSED</name></decl></param>,
			<param><decl><type><name>int</name> *<name>format</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* we don't save console output, so can't offer it */</comment>
    <return>return <expr><name>False</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>die_callback</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>XtPointer</name> <name>call_data</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Cleanup</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>save_callback</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name> <name>client_data</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XtPointer</name></type> <name>call_data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtCheckpointToken</name></type> <name>token</name> =<init> <expr>(<name>XtCheckpointToken</name>) <name>call_data</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* we have nothing to save */</comment>
    <expr_stmt><expr><name>token</name>-&gt;<name>save_success</name> = <name>True</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>icewatch</name><parameter_list>(<param><decl><type><name>IceConn</name></type> <name>iceConn</name></decl></param>,
	 <param><decl><type><name>IcePointer</name> <name>clientData</name></type> <name>GCC_UNUSED</name></decl></param>,
	 <param><decl><type><name>Bool</name></type> <name>opening</name></decl></param>,
	 <param><decl><type><name>IcePointer</name> * <name>watchData</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>ice_fd</name> = <call><name>IceConnectionNumber</name><argument_list>(<argument><expr><name>iceConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("got IceConnectionNumber %d\n", <name>ice_fd</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>ice_fd</name> = -1</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("reset IceConnectionNumber\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_SESSION_MGT */</comment>

<comment type="block">/*
 * DeleteWindow(): Action proc to implement ICCCM delete_window.
 */</comment>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>DeleteWindow</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
	     <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
	     <param><decl><type><name>Cardinal</name> *<name>num_params</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>w</name> == <name>toplevel</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><call><name>TEK4014_SHOWN</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>hide_vt_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
	<else>else
	    <expr_stmt><expr><call><name>do_hangup</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>Vshow</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>hide_tek_window</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>do_hangup</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>, <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>KeyboardMapping</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>XEvent</name> *</type> <name>event</name></decl></param>,
		<param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		<param><decl><type><name>Cardinal</name> *<name>num_params</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>event</name>-&gt;<name>type</name></expr>)</condition> <block>{
    <case>case <expr><name>MappingNotify</name></expr>:
	<expr_stmt><expr><call><name>XRefreshKeyboardMapping</name><argument_list>(<argument><expr>&amp;<name>event</name>-&gt;<name>xmapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </case>}</block></switch>
}</block></function>

<decl_stmt><decl><type><name>static</name> <name>XtActionsRec</name></type> <name><name>actionProcs</name><index>[]</index></name> =<init>
<expr><block>{
    <expr><block>{<expr>"DeleteWindow"</expr>, <expr><name>DeleteWindow</name></expr>}</block></expr>,
    <expr><block>{<expr>"KeyboardMapping"</expr>, <expr><name>KeyboardMapping</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> **</type><name>gblenvp</name></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **<name>argv</name></type> <name>ENVP_ARG</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Widget</name></type> <name>form_top</name>, <name>menu_top</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>menu_high</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>my_class</name> =<init> <expr><name>DEFCLASS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Window</name></type> <name>winToEmbedInto</name> =<init> <expr><name>None</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
    <decl_stmt><decl><type><name>Bool</name></type> <name>reversed</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>ProgramName</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>save_ruid</name> = <call><name>getuid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>save_rgid</name> = <call><name>getgid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Do these first, since we may not be able to open the display */</comment>
    <expr_stmt><expr><call><name>TRACE_OPTS</name><argument_list>(<argument><expr><name>xtermOptions</name></expr></argument>, <argument><expr><name>optionDescList</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_ARGV</name><argument_list>(<argument><expr>"Before XtOpenApplication"</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>argc</name> &gt; 1</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>unique</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bool</name></type> <name>quit</name> =<init> <expr><name>True</name></expr></init></decl>;</decl_stmt>

	<for>for (<init><expr><name>n</name> = 1</expr>;</init> <condition><expr><name>n</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parsing %s\n", <name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-version"</expr></argument>, <argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-help"</expr></argument>, <argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-class"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<if>if <condition>(<expr>(<name>my_class</name> = <name><name>argv</name><index>[<expr>++<name>n</name></expr>]</index></name>) == 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
		    <expr_stmt><expr><name>quit</name> = <name>False</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>unique</name> = 3</expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
		<if>if <condition>(<expr><call><name>abbrev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>"-reverse"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call>
		    || !<call><name>strcmp</name><argument_list>(<argument><expr>"-rv"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>reversed</name> = <name>True</name></expr>;</expr_stmt>
		}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"+rv"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>reversed</name> = <name>False</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>quit</name> = <name>False</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>unique</name> = 3</expr>;</expr_stmt>
	    }</block></else></if></else></if></else></if>
	}</block></for>
	<if>if <condition>(<expr><name>quit</name></expr>)</condition><then>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <comment type="block">/* XXX: for some obscure reason EMX seems to lose the value of
     * the environ variable, don't understand why, so save it recently
     */</comment>
    <expr_stmt><expr><name>gblenvp</name> = <name>envp</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>I18N</name></cpp:ifdef>
    <expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>opencons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ttydev</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>PTMS_BUFSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ptydev</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>PTMS_BUFSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ttydev</name> || !<name>ptydev</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"%s:  unable to allocate memory for ttydev or ptydev\n"</expr></argument>,
		<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>TTYDEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>PTYDEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Initialization is done here rather than above in order
     * to prevent any assumptions about the order of the contents
     * of the various terminal structures (which may change from
     * implementation to implementation).
     */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name>c_iflag</name> = <name>ICRNL</name> | <name>IXON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_oflag</name> = <name>OPOST</name> | <name>ONLCR</name> | <name>TAB3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_cflag</name> = <name>B38400</name> | <name>CS8</name> | <name>CREAD</name> | <name>PARENB</name> | <name>HUPCL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_lflag</name> = <name>ISIG</name> | <name>ICANON</name> | <name>ECHO</name> | <name>ECHOE</name> | <name>ECHOK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name>c_line</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VINTR</name></expr>]</index></name> = <call><name>CONTROL</name><argument_list>(<argument><expr>'C'</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* '^C' */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name> = <name>ANSI_DEL</name></expr>;</expr_stmt>	<comment type="block">/* DEL  */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name> = <call><name>CONTROL</name><argument_list>(<argument><expr>'U'</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* '^U' */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VQUIT</name></expr>]</index></name> = <name>CQUIT</name></expr>;</expr_stmt>	<comment type="block">/* '^\' */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VEOF</name></expr>]</index></name> = <name>CEOF</name></expr>;</expr_stmt>	<comment type="block">/* '^D' */</comment>
    <expr_stmt><expr><name>d_tio</name>.<name><name>c_cc</name><index>[<expr><name>VEOL</name></expr>]</index></name> = <name>CEOL</name></expr>;</expr_stmt>	<comment type="block">/* '^@' */</comment>

    <expr_stmt><expr><call><name>XtSetErrorHandler</name><argument_list>(<argument><expr><name>xt_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
    <expr_stmt><expr><name>toplevel</name> = <call><name>XtOpenApplication</name><argument_list>(<argument><expr>&amp;<name>app_con</name></expr></argument>, <argument><expr><name>my_class</name></expr></argument>,
				 <argument><expr><name>optionDescList</name></expr></argument>,
				 <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fallback_resources</name></expr></argument>,
				 <argument><expr><name>sessionShellWidgetClass</name></expr></argument>,
				 <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>IceAddConnectionWatch</name><argument_list>(<argument><expr><name>icewatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>toplevel</name> = <call><name>XtAppInitialize</name><argument_list>(<argument><expr>&amp;<name>app_con</name></expr></argument>, <argument><expr><name>my_class</name></expr></argument>,
			       <argument><expr><name>optionDescList</name></expr></argument>,
			       <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>optionDescList</name></expr></argument>)</argument_list></call></expr></argument>,
			       <argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>fallback_resources</name></expr></argument>,
			       <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_SESSION_MGT */</comment>
    <expr_stmt><expr><call><name>XtSetErrorHandler</name><argument_list>(<argument><expr>(<name>XtErrorHandler</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XtGetApplicationResources</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) &amp;<name>resource</name></expr></argument>,
			      <argument><expr><name>application_resources</name></expr></argument>,
			      <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>application_resources</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE_XRES</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * ICCCM delete_window.
     */</comment>
    <expr_stmt><expr><call><name>XtAppAddActions</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>, <argument><expr><name>actionProcs</name></expr></argument>, <argument><expr><call><name>XtNumber</name><argument_list>(<argument><expr><name>actionProcs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * fill in terminal modes
     */</comment>
    <if>if <condition>(<expr><name>resource</name>.<name>tty_modes</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>parse_tty_modes</name><argument_list>(<argument><expr><name>resource</name>.<name>tty_modes</name></expr></argument>, <argument><expr><name>ttymodelist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s:  bad tty modes \"%s\"\n"</expr></argument>,
		    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>resource</name>.<name>tty_modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>override_tty_modes</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ZICONBEEP</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>zIconBeep</name> &gt; 100 || <name>resource</name>.<name>zIconBeep</name> &lt; -100</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>resource</name>.<name>zIconBeep</name> = 0</expr>;</expr_stmt>	<comment type="block">/* was 100, but I prefer to defaulting off. */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"a number between -100 and 100 is required for zIconBeep.  0 used by default\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_ZICONBEEP */</comment>
    <expr_stmt><expr><name>hold_screen</name> = <name>resource</name>.<name>hold_screen</name> ? 1 : 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>xterm_name</name> = <name>resource</name>.<name>xterm_name</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>xterm_name</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>xterm_name</name> = <name>DFT_TERMTYPE</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>resource</name>.<name>icon_geometry</name> != <name>NULL</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>scr</name>, <name>junk</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ix</name>, <name>iy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

	<for>for (<init><expr><name>scr</name> = 0</expr>;</init>		<comment type="block">/* yyuucchh */</comment>
	     <condition><expr><call><name>XtScreen</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call> != <call><name>ScreenOfDisplay</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scr</name></expr></argument>)</argument_list></call></expr>;</condition>
	     <incr><expr><name>scr</name>++</expr></incr>) <empty_stmt>;</empty_stmt></for>

	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>name</name> = <name>XtNiconX</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>name</name> = <name>XtNiconY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XGeometry</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scr</name></expr></argument>, <argument><expr><name>resource</name>.<name>icon_geometry</name></expr></argument>, <argument><expr>""</expr></argument>,
		  <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>ix</name></expr></argument>, <argument><expr>&amp;<name>iy</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>, <argument><expr>&amp;<name>junk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>ix</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name>.<name>value</name> = (<name>XtArgVal</name>) <name>iy</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>ourTopLevelShellArgs</name></expr></argument>,
		<argument><expr><name>number_ourTopLevelShellArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <comment type="block">/* seems as good a place as any */</comment>
    <expr_stmt><expr><call><name>init_classtab</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Parse the rest of the command line */</comment>
    <expr_stmt><expr><call><name>TRACE_ARGV</name><argument_list>(<argument><expr>"After XtOpenApplication"</expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</init> <condition><expr><name>argc</name> &gt; 0</expr>;</condition> <incr><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr></incr>) <block>{
	<if>if <condition>(<expr>**<name>argv</name> != '-'</expr>)</condition><then>
	    <expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parsing %s\n", <name><name>argv</name><index>[<expr>0</expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>argv</name><index>[<expr>0</expr>]</index><index>[<expr>1</expr>]</index></name></expr>)</condition> <block>{
	<case>case <expr>'h'</expr>:		<comment type="block">/* -help */</comment>
	    <expr_stmt><expr><call><name>Help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	</case><case>case <expr>'v'</expr>:		<comment type="block">/* -version */</comment>
	    <expr_stmt><expr><call><name>Version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	</case><case>case <expr>'C'</expr>:
	    <block>{
		<decl_stmt><decl><type>struct <name>stat</name></type> <name>sbuf</name></decl>;</decl_stmt>

		<comment type="block">/* Must be owner and have read/write permission.
		   xdm cooperates to give the console the right user. */</comment>
		<if>if <condition>(<expr>!<call><name>stat</name><argument_list>(<argument><expr>"/dev/console"</expr></argument>, <argument><expr>&amp;<name>sbuf</name></expr></argument>)</argument_list></call> &amp;&amp;
		    (<name>sbuf</name>.<name>st_uid</name> == <name>save_ruid</name>) &amp;&amp;
		    !<call><name>access</name><argument_list>(<argument><expr>"/dev/console"</expr></argument>, <argument><expr><name>R_OK</name> | <name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>Console</name> = <name>True</name></expr>;</expr_stmt>
		}</block></then> <else>else
		    <expr_stmt><expr><name>Console</name> = <name>False</name></expr>;</expr_stmt></else></if>
	    }</block>
	    <continue>continue;</continue>
	</case><case>case <expr>'S'</expr>:
	    <if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr>*<name>argv</name> + 2</expr></argument>, <argument><expr>"%c%c%d"</expr></argument>, <argument><expr><name>passedPty</name></expr></argument>, <argument><expr><name>passedPty</name> + 1</expr></argument>,
		       <argument><expr>&amp;<name>am_slave</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then>
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <continue>continue;</continue>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	</case><case>case <expr>'D'</expr>:
	    <expr_stmt><expr><name>debug</name> = <name>True</name></expr>;</expr_stmt>
	    <continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>
	</case><case>case <expr>'c'</expr>:		<comment type="block">/* -class param */</comment>
	    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> + 1</expr></argument>, <argument><expr>"class"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
		<expr_stmt><expr><name>argc</name>--</expr>, <expr><name>argv</name>++</expr>;</expr_stmt></then>
	    <else>else
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	    <continue>continue;</continue>
	</case><case>case <expr>'e'</expr>:
	    <if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then>
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><name>command_to_exec</name> = ++<name>argv</name></expr>;</expr_stmt>
	    <break>break;</break>
	</case><case>case <expr>'i'</expr>:
	    <if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<decl_stmt><decl><type><name>char</name> *</type><name>endPtr</name></decl>;</decl_stmt>
		<expr_stmt><expr>--<name>argc</name></expr>;</expr_stmt>
		<expr_stmt><expr>++<name>argv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>winToEmbedInto</name> = (<name>Window</name>) <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>endPtr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <continue>continue;</continue>

	</case><default>default:
	    <expr_stmt><expr><call><name>Syntax</name><argument_list>(<argument><expr>*<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</default>}</block></switch>
	<break>break;</break>
    }</block></for>

    <expr_stmt><expr><call><name>SetupMenus</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr>&amp;<name>form_top</name></expr></argument>, <argument><expr>&amp;<name>menu_top</name></expr></argument>, <argument><expr>&amp;<name>menu_high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>term</name> = (<name>XtermWidget</name>) <call><name>XtVaCreateManagedWidget</name><argument_list>(<argument><expr>"vt100"</expr></argument>, <argument><expr><name>xtermWidgetClass</name></expr></argument>,
						 <argument><expr><name>form_top</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
						 <argument><expr><name>XtNmenuBar</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
						 <argument><expr><name>XtNresizable</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
						 <argument><expr><name>XtNfromVert</name></expr></argument>, <argument><expr><name>menu_top</name></expr></argument>,
						 <argument><expr><name>XtNleft</name></expr></argument>, <argument><expr><name>XawChainLeft</name></expr></argument>,
						 <argument><expr><name>XtNright</name></expr></argument>, <argument><expr><name>XawChainRight</name></expr></argument>,
						 <argument><expr><name>XtNtop</name></expr></argument>, <argument><expr><name>XawChainTop</name></expr></argument>,
						 <argument><expr><name>XtNbottom</name></expr></argument>, <argument><expr><name>XawChainBottom</name></expr></argument>,
						 <argument><expr><name>XtNmenuHeight</name></expr></argument>, <argument><expr><name>menu_high</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						 <argument><expr>(<name>XtPointer</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decode_keyboard_type</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr>&amp;<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>screen</name> = <call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> = 0</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>logInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_LOG</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>signalInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_SIGNAL</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>tekInhibit</name></expr>)</condition><then>
	<expr_stmt><expr><name>screen</name>-&gt;<name>inhibit</name> |= <name>I_TEK</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * We might start by showing the tek4014 window.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>inhibit</name> &amp; <name>I_TEK</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> = <name>False</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>TekInit</name><argument_list>()</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Start the toolbar at this point, after the first window has been setup.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TOOLBAR</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ShowToolbar</name><argument_list>(<argument><expr><name>resource</name>.<name>toolBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>sessionMgt</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Enabling session-management callbacks\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>XtNdieCallback</name></expr></argument>, <argument><expr><name>die_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtAddCallback</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>XtNsaveCallback</name></expr></argument>, <argument><expr><name>save_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Set title and icon name if not specified
     */</comment>
    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>Arg</name></type> <name><name>args</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

	<if>if <condition>(<expr>!<name>resource</name>.<name>title</name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>resource</name>.<name>title</name> = <call><name>x_basename</name><argument_list>(<argument><expr><name><name>command_to_exec</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>			<comment type="block">/* else not reached */</comment>
	}</block></then></if>

	<if>if <condition>(<expr>!<name>resource</name>.<name>icon_name</name></expr>)</condition><then>
	    <expr_stmt><expr><name>resource</name>.<name>icon_name</name> = <name>resource</name>.<name>title</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>XtNtitle</name></expr></argument>, <argument><expr><name>resource</name>.<name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtSetArg</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>XtNiconName</name></expr></argument>, <argument><expr><name>resource</name>.<name>icon_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setting:\n\ttitle \"%s\"\n\ticon \"%s\"\n\tbased on command \"%s\"\n",
	       <name>resource</name>.<name>title</name>,
	       <name>resource</name>.<name>icon_name</name>,
	       *<name>command_to_exec</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XtSetValues</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>callfilter</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>u</name> =<init> <expr>(<name>term</name>-&gt;<name>misc</name>.<name>use_encoding</name> ? 2 : 0)</expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>char</name> **</type><name>c</name></decl>;</decl_stmt>
	    <for>for (<init><expr><name>n</name> = 0</expr>, <expr><name>c</name> = <name>command_to_exec</name></expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>n</name>++</expr>, <expr><name>c</name>++</expr></incr>) <empty_stmt>;</empty_stmt></for>
	    <expr_stmt><expr><name>c</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>n</name> + 3 + <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>c</name> == <name>NULL</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_LUMALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name> + 2 + <name>u</name></expr></argument>, <argument><expr><name>command_to_exec</name></expr></argument>, <argument><expr>(<name>n</name> + 1) * <call><name>sizeof</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>c</name><index>[<expr>0</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>localefilter</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>u</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>c</name><index>[<expr>1</expr>]</index></name> = "-encoding"</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr>2</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>locale_str</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><name><name>c</name><index>[<expr>1 + <name>u</name></expr>]</index></name> = "--"</expr>;</expr_stmt>
	    <expr_stmt><expr><name>command_to_exec_with_luit</name> = <name>c</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name><name>luit</name><index>[<expr>6</expr>]</index></name></decl>;</decl_stmt>
	    <expr_stmt><expr><name><name>luit</name><index>[<expr>0</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>localefilter</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>u</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>luit</name><index>[<expr>1</expr>]</index></name> = "-encoding"</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>luit</name><index>[<expr>2</expr>]</index></name> = <name>term</name>-&gt;<name>misc</name>.<name>locale_str</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>luit</name><index>[<expr>3</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
	    }</block></then> <else>else
		<expr_stmt><expr><name><name>luit</name><index>[<expr>1</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
	    <expr_stmt><expr><name>command_to_exec_with_luit</name> = <name>luit</name></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <block>{
	<comment type="block">/* Set up stderr properly.  Opening this log file cannot be
	   done securely by a privileged xterm process (although we try),
	   so the debug feature is disabled by default. */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dbglogfile</name><index>[<expr>45</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>timestamp_filename</name><argument_list>(<argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr>"xterm.debug.log."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>creat_as</name><argument_list>(<argument><expr><name>save_ruid</name></expr></argument>, <argument><expr><name>save_rgid</name></expr></argument>, <argument><expr><name>False</name></expr></argument>, <argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>i</name> = <call><name>open</name><argument_list>(<argument><expr><name>dbglogfile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> | <name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
	<if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* mark this file as close on exec */</comment>
	    <expr_stmt><expr>(<name>void</name>) <call><name>fcntl</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>

    <expr_stmt><expr><call><name>spawnXTerm</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Child process is out there, let's catch its termination */</comment>
    <expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>reapchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Realize procs have now been executed */</comment>

    <if>if <condition>(<expr><name>am_slave</name> &gt;= 0</expr>)</condition><then> <block>{	<comment type="block">/* Write window id so master end can read and use */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"%lx\n"</expr></argument>, <argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>0 &gt; (<name>mode</name> = <call><name>fcntl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>mode</name> |= <name>O_NDELAY</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_F_SETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>pty_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>X_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>pty_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>X_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>, <argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>Select_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_plus1</name> = ((<name>screen</name>-&gt;<name>respond</name> &lt; <call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call>)
		 ? (1 + <call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call>)
		 : (1 + <name>screen</name>-&gt;<name>respond</name>))</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if>if <condition>(<expr><name>debug</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"debugging on\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DEBUG */</comment>
    <expr_stmt><expr><call><name>XSetErrorHandler</name><argument_list>(<argument><expr><name>xerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XSetIOErrorHandler</name><argument_list>(<argument><expr><name>xioerror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initPtyData</name><argument_list>(<argument><expr>&amp;<name>VTbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>term</name>-&gt;<name>misc</name>.<name>log_on</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>StartLog</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>winToEmbedInto</name> != <name>None</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XtRealizeWidget</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * This should probably query the tree or check the attributes of
	 * winToEmbedInto in order to verify that it exists, but I'm still not
	 * certain what is the best way to do it -GPS
	 */</comment>
	<expr_stmt><expr><call><name>XReparentWindow</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><call><name>XtWindow</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>winToEmbedInto</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_COLOR_RES</name></expr></cpp:if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("checking resource values rv %s fg %s, bg %s\n",
	   <call><name>BtoS</name><argument_list>(<argument><expr><name>term</name>-&gt;<name>misc</name>.<name>re_verse0</name></expr></argument>)</argument_list></call>,
	   <call><name>NonNull</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>,
	   <call><name>NonNull</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>reversed</name> &amp;&amp; <name>term</name>-&gt;<name>misc</name>.<name>re_verse0</name>)
	&amp;&amp; ((<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name>
	     &amp;&amp; !<call><name>isDefaultForeground</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_FG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)
	    || (<call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name>
		&amp;&amp; !<call><name>isDefaultBackground</name><argument_list>(<argument><expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name><name>Tcolors</name><index>[<expr><name>TEXT_BG</name></expr>]</index></name>.<name>resource</name></expr></argument>)</argument_list></call>)
	)</expr>)</condition><then>
	<expr_stmt><expr><call><name>ReverseVideo</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_COLOR_RES */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_MAXIMIZE</name></expr></cpp:if>
    <if>if <condition>(<expr><name>resource</name>.<name>maximized</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>RequestMaximize</name><argument_list>(<argument><expr><name>term</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
	<if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>TekRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>VTRun</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * Called from get_pty to iterate over likely pseudo terminals
 * we might allocate.  Used on those systems that do not have
 * a functional interface for allocating a pty.
 * Returns 0 if found a pty, 1 if fails.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>pty_search</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>PTMS_BUFSZ</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* ask the PTY manager */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> =<init> <expr><call><name>open</name><argument_list>(<argument><expr>"/dev/ptms$"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>fd</name> &amp;&amp; <call><name>ptioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>PTMS_GETPTY</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr>*<call><name>x_basename</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> = 't'</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>(*<name>pty</name> = <call><name>open</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PTYDEBUG</name></cpp:ifdef>
	    <expr_stmt><expr><call><name>ptioctl</name><argument_list>(<argument><expr>*<name>pty</name></expr></argument>, <argument><expr><name>XTY_TRACE</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <return>return <expr>0</expr>;</return>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to open %s, errno=%d\n"</expr></argument>, <argument><expr><name>ptydev</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * This function opens up a pty master and stuffs its value into pty.
 *
 * If it finds one, it returns a value of 0.  If it does not find one,
 * it returns a value of !0.  This routine is designed to be re-entrant,
 * so that if a pty master is found and later, we find that the slave
 * has problems, we can re-enter this function and get another one.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>get_pty</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pty</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>pty_search</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * The only difference in /etc/termcap between 4014 and 4015 is that
 * the latter has support for switching character sets.  We support the
 * 4015 protocol, but ignore the character switches.  Therefore, we
 * choose 4014 over 4015.
 *
 * Features of the 4014 over the 4012: larger (19") screen, 12-bit
 * graphics addressing (compatible with 4012 10-bit addressing),
 * special point plot mode, incremental plot mode (not implemented in
 * later Tektronix terminals), and 4 character sizes.
 * All of these are supported by xterm.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name><name>tekterm</name><index>[]</index></name> =<init>
<expr><block>{
    <expr>"tek4014"</expr>,
    <expr>"tek4015"</expr>,			<comment type="block">/* 4014 with APL character set support */</comment>
    <expr>"tek4012"</expr>,			<comment type="block">/* 4010 with lower case */</comment>
    <expr>"tek4013"</expr>,			<comment type="block">/* 4012 with APL character set support */</comment>
    <expr>"tek4010"</expr>,			<comment type="block">/* small screen, upper-case only */</comment>
    <expr>"dumb"</expr>,
    <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The VT102 is a VT100 with the Advanced Video Option included standard.
 * It also adds Escape sequences for insert/delete character/line.
 * The VT220 adds 8-bit character sets, selective erase.
 * The VT320 adds a 25th status line, terminal state interrogation.
 * The VT420 has up to 48 lines on the screen.
 */</comment>

<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name><name>vtterm</name><index>[]</index></name> =<init>
<expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_X11TERM</name></cpp:ifdef>
    <expr>"x11term"</expr>,			<comment type="block">/* for people who want special term name */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>DFT_TERMTYPE</name></expr>,		<comment type="block">/* for people who want special term name */</comment>
    <expr>"xterm"</expr>,			<comment type="block">/* the prefered name, should be fastest */</comment>
    <expr>"vt102"</expr>,
    <expr>"vt100"</expr>,
    <expr>"ansi"</expr>,
    <expr>"dumb"</expr>,
    <expr>0</expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>SIGNAL_T</name></type>
<name>hungtty</name><parameter_list>(<param><decl><type><name>int</name> <name>i</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_PTY_HANDSHAKE</name></expr></cpp:if>
struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cols</name></decl>;</decl_stmt>
}</block> <expr_stmt><expr><name>handshake</name> = <block>{

    <expr>-1</expr>, <expr>-1</expr>
}</block></expr>;</expr_stmt>

<function><type><name>void</name></type>
<name>first_map_occurred</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>resource</name>.<name>wait_for_map</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>handshake</name>.<name>rows</name> = <name>screen</name>-&gt;<name>max_row</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>handshake</name>.<name>cols</name> = <name>screen</name>-&gt;<name>max_col</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>resource</name>.<name>wait_for_map</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_PTY_HANDSHAKE else !OPT_PTY_HANDSHAKE */</comment>

<function><type><name>static</name> <name>void</name></type>
<name>set_owner</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>device</name></decl></param>, <param><decl><type><name>uid_t</name></type> <name>uid</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>gid</name></decl></param>, <param><decl><type><name>mode_t</name></type> <name>mode</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>why</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>chown</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>why</name> = <name>errno</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>why</name> != <name>ENOENT</name>
	    &amp;&amp; <name>save_ruid</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot chown %s to %ld,%ld: %s\n"</expr></argument>,
		    <argument><expr><name>device</name></expr></argument>, <argument><expr>(<name>long</name>) <name>uid</name></expr></argument>, <argument><expr>(<name>long</name>) <name>gid</name></expr></argument>,
		    <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>why</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>THE_PARENT</name> 1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>THE_CHILD</name>  2</cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>whoami</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

<function><type><name>SIGNAL_T</name></type>
<name>killit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>whoami</name></expr>)</condition> <block>{
    <case>case <expr>-1</expr>:
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>killit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr>-<call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>THE_PARENT</name></expr>:
	<expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr>-<call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr><name>THE_CHILD</name></expr>:
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr>-<call><name>getppid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<break>break;</break>
    </case>}</block></switch>

    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>close_fd</name>(fd) close(fd), fd = -1</cpp:define>

<function><type><name>static</name> <name>int</name></type>
<name>spawnXTerm</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<comment type="block">/*
 *  Inits pty and tty and forks a login process.
 *  Does not close fd Xsocket.
 *  If slave, the pty named in passedPty is already open for use
 */</comment>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Xsocket</name> =<init> <expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ttyfd</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>tio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>ok_termcap</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> *</type><name>TermName</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>ptr</name>, *<name>shname</name>, <name><name>buf</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>no_dev_tty</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dev_tty_name</name> =<init> <expr>(<name>char</name> *) 0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TTYSIZE_STRUCT</name></type> <name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgrp</name> =<init> <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>numbuf</name><index>[<expr>12</expr>]</index></name>, **<name>envnew</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>screen</name>-&gt;<name>uid</name> = <name>save_ruid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>gid</name> = <name>save_rgid</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>am_slave</name> &gt;= 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>respond</name> = <name>am_slave</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>)</argument_list></call> - 2</expr>]</index></name> =
	    <name><name>ttydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> - 2</expr>]</index></name> = <name><name>passedPty</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> =
	    <name><name>ttydev</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = <name><name>passedPty</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr>(<name>void</name>) <call><name>xtermResetIds</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<decl_stmt><decl><type><name>Bool</name></type> <name>tty_got_hung</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sometimes /dev/tty hangs on open (as in the case of a pty
	 * that has gone away).  Simply make up some reasonable
	 * defaults.
	 */</comment>

	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>hungtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* alarm(1) might return too soon */</comment>
	<if>if <condition>(<expr>!<call><name>setjmp</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>ttyfd</name> = <call><name>open</name><argument_list>(<argument><expr>"/dev/tty"</expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>tty_got_hung</name> = <name>False</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>tty_got_hung</name> = <name>True</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>ttyfd</name> = -1</expr>;</expr_stmt>
	    <expr_stmt><expr><name>errno</name> = <name>ENXIO</name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check results and ignore current control terminal if
	 * necessary.  ENXIO is what is normally returned if there is
	 * no controlling terminal, but some systems (e.g. SunOS 4.0)
	 * seem to return EIO.  Solaris 2.3 is said to return EINVAL.
	 */</comment>
	<if>if <condition>(<expr><name>ttyfd</name> &lt; 0</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>tty_got_hung</name> || <name>errno</name> == <name>ENXIO</name> || <name>errno</name> == <name>EIO</name> ||
		<name>errno</name> == <name>EINVAL</name> || <name>errno</name> == <name>ENOTTY</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>no_dev_tty</name> = <name>True</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tio</name> = <name>d_tio</name></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_OPDEVTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then> <else>else <block>{

	    <comment type="block">/* Get a copy of the current terminal's state,
	     * if we can.  Some systems (e.g., SVR4 and MacII)
	     * may not have a controlling terminal at this point
	     * if started directly from xdm or xinit,
	     * in which case we just use the defaults as above.
	     */</comment>
	    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TCGETA</name></expr></argument>, <argument><expr>&amp;<name>tio</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
		<expr_stmt><expr><name>tio</name> = <name>d_tio</name></expr>;</expr_stmt></then></if>

	    <expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<if>if <condition>(<expr><call><name>get_pty</name><argument_list>(<argument><expr>&amp;<name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <comment type="block">/*  no ptys! */</comment>
	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_PTYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></else></if>

    <comment type="block">/* avoid double MapWindow requests */</comment>
    <expr_stmt><expr><call><name>XtSetMappedWhenManaged</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>wm_delete_window</name> = <call><name>XInternAtom</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"WM_DELETE_WINDOW"</expr></argument>,
				   <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><call><name>VTInit</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>		<comment type="block">/* realize now so know window size for tty driver */</comment>

    <if>if <condition>(<expr><name>Console</name></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * Inform any running xconsole program
	 * that we are going to steal the console.
	 */</comment>
	<expr_stmt><expr><call><name>XmuGetHostname</name><argument_list>(<argument><expr><name>mit_console_name</name> + <name>MIT_CONSOLE_LEN</name></expr></argument>, <argument><expr>255</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mit_console</name> = <call><name>XInternAtom</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>mit_console_name</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* the user told us to be the console, so we can use CurrentTime */</comment>
	<expr_stmt><expr><call><name>XtOwnSelection</name><argument_list>(<argument><expr><call><name>SHELL_OF</name><argument_list>(<argument><expr><call><name>CURRENT_EMU</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		       <argument><expr><name>mit_console</name></expr></argument>, <argument><expr><name>CurrentTime</name></expr></argument>,
		       <argument><expr><name>ConvertConsoleSelection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>envnew</name> = <name>tekterm</name></expr>;</expr_stmt>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><name>envnew</name> = <name>vtterm</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/*
     * This used to exit if no termcap entry was found for the specified
     * terminal name.  That's a little unfriendly, so instead we'll allow
     * the program to proceed (but not to set $TERMCAP) if the termcap
     * entry is not found.
     */</comment>
    <expr_stmt><expr><name>ok_termcap</name> = <name>True</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>get_termcap</name><argument_list>(<argument><expr><name>TermName</name> = <name>resource</name>.<name>term_name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>last</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>TermName</name> = *<name>envnew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ok_termcap</name> = <name>False</name></expr>;</expr_stmt>
	<while>while <condition>(<expr>*<name>envnew</name> != <name>NULL</name></expr>)</condition> <block>{
	    <if>if <condition>(<expr>(<name>last</name> == <name>NULL</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr>*<name>envnew</name></expr></argument>)</argument_list></call>)
		&amp;&amp; <call><name>get_termcap</name><argument_list>(<argument><expr>*<name>envnew</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>TermName</name> = *<name>envnew</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ok_termcap</name> = <name>True</name></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	    <expr_stmt><expr><name>last</name> = *<name>envnew</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>envnew</name>++</expr>;</expr_stmt>
	}</block></while>
    }</block></then></if>
    <if>if <condition>(<expr><name>ok_termcap</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>resize_termcap</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* tell tty how big window is */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TEK4014</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>TEK4014_ACTIVE</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 38</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = 81</expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = <call><name>TFullWidth</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = <call><name>TFullHeight</name><argument_list>(<argument><expr><call><name>TekScreenOf</name><argument_list>(<argument><expr><name>tekWidget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = <call><name>FullWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = <call><name>FullHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>am_slave</name> &lt; 0</expr>)</condition><then> <block>{

	<decl_stmt><decl><type><name>char</name></type> <name><name>sema</name><index>[<expr>40</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEV</name></type> <name>sev</name></decl>;</decl_stmt>
	<comment type="block">/* start a child process
	 * use an event sema for sync
	 */</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr>"\\SEM32\\xterm%s"</expr></argument>, <argument><expr>&amp;<name><name>ptydev</name><index>[<expr>8</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>DosCreateEventSem</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr>&amp;<name>sev</name></expr></argument>, <argument><expr><name>DC_SEM_SHARED</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<switch>switch <condition>(<expr>(<name>screen</name>-&gt;<name>pid</name> = <call><name>fork</name><argument_list>()</argument_list></call>)</expr>)</condition> <block>{
	<case>case <expr>-1</expr>:		<comment type="block">/* error */</comment>
	    <expr_stmt><expr><call><name>SysError</name><argument_list>(<argument><expr><name>ERROR_FORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</case><default>default:		<comment type="block">/* parent */</comment>
	    <expr_stmt><expr><name>whoami</name> = <name>THE_PARENT</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name>sev</name></expr></argument>, <argument><expr>1000L</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>(<argument><expr><name>sev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <break>break;</break>
	</default><case>case <expr>0</expr>:		<comment type="block">/* child */</comment>
	    <expr_stmt><expr><name>whoami</name> = <name>THE_CHILD</name></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>opencons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* we don't need the socket, or the pty master anymore */</comment>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>ConnectionNumber</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* Now is the time to set up our process group and
	     * open up the pty slave.
	     */</comment>
	    <if>if <condition>(<expr>(<name>ttyfd</name> = <call><name>open</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
		<comment type="block">/* dumm gelaufen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot open slave side of PTY\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>

	    <comment type="block">/* use the same tty name that everyone else will use
	     * (from ttyname)
	     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EMXNOTBOGUS</name></cpp:ifdef>
	    <if>if <condition>(<expr>(<name>ptr</name> = <call><name>ttyname</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ttydev</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><name>ptr</name> = <name>ttydev</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* for safety: enable DUPs */</comment>
	    <expr_stmt><expr><call><name>ptioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>XTY_ENADUP</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* change ownership of tty to real group and user id */</comment>
	    <expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>uid</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>gid</name></expr></argument>,
		      <argument><expr>(<name>resource</name>.<name>messages</name> ? 0622U : 0600U)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* for the xf86sup-pty, we set the pty to bypass: OS/2 does
	     * not have a line discipline structure
	     */</comment>
	    <block>{
		<decl_stmt><decl><type><name>TERMIO_STRUCT</name></type> <name>t</name>, <name>t1</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>ptioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TCGETA</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>t</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then>
		    <expr_stmt><expr><name>t</name> = <name>d_tio</name></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name>t</name>.<name>c_iflag</name> = <name>ICRNL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name>.<name>c_oflag</name> = <name>OPOST</name> | <name>ONLCR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name>.<name>c_lflag</name> = <name>ISIG</name> | <name>ICANON</name> | <name>ECHO</name> | <name>ECHOE</name> | <name>ECHOK</name></expr>;</expr_stmt>

		<comment type="block">/* ignore error code, user will see it :-) */</comment>
		<expr_stmt><expr><call><name>ptioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TCSETA</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set the console mode */</comment>
		<if>if <condition>(<expr><name>Console</name></expr>)</condition><then> <block>{
		    <decl_stmt><decl><type><name>int</name></type> <name>on</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
		    <if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>, <argument><expr><name>TIOCCONS</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>on</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot open console: %s\n"</expr></argument>,
				<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
	    }</block>

	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* restore various signals to their defaults */</comment>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>xtermCopyEnv</name><argument_list>(<argument><expr><name>gblenvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"TERM"</expr></argument>, <argument><expr><name>TermName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<name>TermName</name></expr>)</condition><then>
		<expr_stmt><expr>*<call><name>get_tcap_buffer</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call> = 0</expr>;</expr_stmt></then></if>

	    <macro><name>sprintf</name><argument_list>(<argument>buf</argument>, <argument>"%lu"</argument>,
		    <argument>((unsigned long) XtWindow(SHELL_OF(CURRENT_EMU())))</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"WINDOWID"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* put the display into the environment of the shell */</comment>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"DISPLAY"</expr></argument>, <argument><expr><call><name>XDisplayString</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_VERSION"</expr></argument>, <argument><expr><call><name>xtermVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_LOCALE"</expr></argument>, <argument><expr><call><name>xtermEnvLocale</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* this is the time to go and set up stdin, out, and err
	     */</comment>
	    <comment type="block">/* dup the tty */</comment>
	    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt;= 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
		<if>if <condition>(<expr><name>i</name> != <name>ttyfd</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr>(<name>void</name>) <call><name>close</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>IGNORE_RC</name><argument_list>(<argument><expr><call><name>dup</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></for>

	    <comment type="block">/* and close the tty */</comment>
	    <if>if <condition>(<expr><name>ttyfd</name> &gt; 2</expr>)</condition><then>
		<expr_stmt><expr><call><name>close_fd</name><argument_list>(<argument><expr><name>ttyfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	    <expr_stmt><expr><call><name>setpgrp</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pgrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr>(<name>void</name>) <call><name>xtermResetIds</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if>if <condition>(<expr><name>handshake</name>.<name>rows</name> &gt; 0 &amp;&amp; <name>handshake</name>.<name>cols</name> &gt; 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("handshake ttysize: %dx%d\n",
		       <name>handshake</name>.<name>rows</name>, <name>handshake</name>.<name>cols</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_max_row</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>handshake</name>.<name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_max_col</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>handshake</name>.<name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TTYSIZE_ROWS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TTYSIZE_COLS</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call> = <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ts</name>.<name>ws_xpixel</name> = <call><name>FullWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ts</name>.<name>ws_ypixel</name> = <call><name>FullHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>

	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"COLUMNS"</expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>numbuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"LINES"</expr></argument>, <argument><expr><name>numbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>gblenvp</name> = <name>environ</name></expr>;</expr_stmt>

	    <comment type="block">/* need to reset after all the ioctl bashing we did above */</comment>
	    <expr_stmt><expr><call><name>ptioctl</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>TIOCSWINSZ</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* okay everything seems right, so tell the parent, we are going */</comment>
	    <block>{
		<decl_stmt><decl><type><name>char</name></type> <name><name>sema</name><index>[<expr>40</expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HEV</name></type> <name>sev</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr>"\\SEM32\\xterm%s"</expr></argument>, <argument><expr>&amp;<name><name>ttydev</name><index>[<expr>8</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DosOpenEventSem</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr>&amp;<name>sev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name>sev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>(<argument><expr><name>sev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LUIT_PROG</name></expr></cpp:if>
	    <comment type="block">/*
	     * Use two copies of command_to_exec, in case luit is not actually
	     * there, or refuses to run.  In that case we will fall-through to
	     * to command that the user gave anyway.
	     */</comment>
	    <if>if <condition>(<expr><name>command_to_exec_with_luit</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>,
			    <argument><expr><call><name>xtermFindShell</name><argument_list>(<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spawning command \"%s\"\n", *<name>command_to_exec_with_luit</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>execvp</name><argument_list>(<argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><name>command_to_exec_with_luit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* print error message on screen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s: %s\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr>*<name>command_to_exec_with_luit</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot support your locale.\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>,
			    <argument><expr><call><name>xtermFindShell</name><argument_list>(<argument><expr>*<name>command_to_exec</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spawning command \"%s\"\n", *<name>command_to_exec</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>execvpe</name><argument_list>(<argument><expr>*<name>command_to_exec</name></expr></argument>, <argument><expr><name>command_to_exec</name></expr></argument>, <argument><expr><name>gblenvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* print error message on screen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr>*<name>command_to_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>

	    <comment type="block">/* use a layered mechanism to find a shell */</comment>
	    <expr_stmt><expr><name>ptr</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"X11SHELL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then>
		<expr_stmt><expr><name>ptr</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"SHELL"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then>
		<expr_stmt><expr><name>ptr</name> = <call><name>x_getenv</name><argument_list>(<argument><expr>"OS2_SHELL"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then>
		<expr_stmt><expr><name>ptr</name> = "SORRY_NO_SHELL_FOUND"</expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>xtermSetenv</name><argument_list>(<argument><expr>"XTERM_SHELL"</expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>shname</name> = <call><name>x_basename</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>command_to_exec</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>char</name> *</type><name><name>exargv</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/*XXX */</comment>

		<expr_stmt><expr><name><name>exargv</name><index>[<expr>0</expr>]</index></name> = <name>ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>1</expr>]</index></name> = "/C"</expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>2</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>3</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>4</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>5</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>6</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>7</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>5</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>8</expr>]</index></name> = <name><name>command_to_exec</name><index>[<expr>6</expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>exargv</name><index>[<expr>9</expr>]</index></name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>execvpe</name><argument_list>(<argument><expr><name><name>exargv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>exargv</name></expr></argument>, <argument><expr><name>gblenvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* print error message on screen */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Can't execvp %s\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr>*<name>command_to_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>execlpe</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>shname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>gblenvp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Exec failed. */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: Could not exec %s!\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/* preventively shoot the parent */</comment>
	    <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr>-<call><name>getppid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</case>}</block></switch>			<comment type="block">/* endcase */</comment>
    }</block></then></if>
    <comment type="block">/* !am_slave */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * Unfortunately, System V seems to have trouble divorcing the child process
 * from the process group of xterm.  This is a problem because hitting the
 * INTR or QUIT characters on the keyboard will cause xterm to go away if we
 * don't ignore the signals.  This is annoying.
 */</comment>

<comment type="block">/*  signal (SIGINT, SIG_IGN);*/</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>killit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>killit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* hung shell problem */</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*  signal (SIGTERM, SIG_IGN);*/</comment>
    <return>return <expr>0</expr>;</return>
}</block></function>				<comment type="block">/* end spawnXTerm */</comment>

<function><type><name>SIGNAL_T</name></type>
<name>Exit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name> =<init> <expr><name>term</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pty</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>respond</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* close explicitly to avoid race with slave side */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>logging</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>CloseLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>am_slave</name> &lt; 0</expr>)</condition><then> <block>{
	<comment type="block">/* restore ownership of tty and pty */</comment>
	<expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ttydev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0666U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_owner</name><argument_list>(<argument><expr><name>ptydev</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0666U</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Close after releasing ownership to avoid race condition: other programs 
     * grabbing it, and *then* having us release ownership....
     */</comment>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>respond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* close explicitly to avoid race with slave side */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ALLOWLOGGING</name></cpp:ifdef>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>logging</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>CloseLog</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_LEAKS</name></cpp:ifdef>
    <if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Freeing memory leaks\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>xw</name> != 0</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>Display</name> *</type><name>dpy</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>-&gt;<name>display</name></expr></init></decl>;</decl_stmt>

	    <if>if <condition>(<expr><name>toplevel</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>XtDestroyWidget</name><argument_list>(<argument><expr><name>toplevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("destroyed top-level widget\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><call><name>sortedOpts</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>noleaks_charproc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>noleaks_ptydata</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>noleaks_CharacterClass</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <comment type="block">/* XrmSetDatabase(dpy, 0); increases leaks ;-) */</comment>
	    <expr_stmt><expr><call><name>XtCloseDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>XtDestroyApplicationContext</name><argument_list>(<argument><expr><name>app_con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SESSION_MGT</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>IceRemoveConnectionWatch</name><argument_list>(<argument><expr><name>icewatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("closed display\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>(0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>resize_termcap</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
}</block></function>

<comment type="block">/*
 * Does a non-blocking wait for a child process.  If the system
 * doesn't support non-blocking wait, do nothing.
 * Returns the pid of the child, or 0 or -1 if none or error.
 */</comment>
<function><type><name>int</name></type>
<name>nonblocking_wait</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> = <call><name>waitpid</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pid</name></expr>;</return>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>static</name> <name>SIGNAL_T</name></type>
<name>reapchild</name><parameter_list>(<param><decl><type><name>int</name> <name>n</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>olderrno</name> =<init> <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pid</name> = <call><name>wait</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* cannot re-enable signal before waiting for child
     * because then SVR4 loops.  Sigh.  HP-UX 9.01 too.
     */</comment>
    <expr_stmt><expr>(<name>void</name>) <call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>reapchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do>do <block>{
	<if>if <condition>(<expr><name>pid</name> == <call><name>TScreenOf</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>-&gt;<name>pid</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	    <if>if <condition>(<expr><name>debug</name></expr>)</condition><then>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr>"Exiting\n"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr>!<name>hold_screen</name></expr>)</condition><then>
		<expr_stmt><expr><name>need_cleanup</name> = <name>True</name></expr>;</expr_stmt></then></if>
	}</block></then></if>
    }</block> while <condition>(<expr>(<name>pid</name> = <call><name>nonblocking_wait</name><argument_list>()</argument_list></call>) &gt; 0</expr>)</condition>;</do>

    <expr_stmt><expr><name>errno</name> = <name>olderrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>SIGNAL_RETURN</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * parse_tty_modes accepts lines of the following form:
 *
 *         [SETTING] ...
 *
 * where setting consists of the words in the modelist followed by a character
 * or ^char.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>parse_tty_modes</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type>struct <name>_xttymodes</name> *</type><name>modelist</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>_xttymodes</name> *</type><name>mp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("parse_tty_modes\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>1</expr>)</condition> <block>{
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

	<while>while <condition>(<expr>*<name>s</name> &amp;&amp; <call><name>isascii</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	    <expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></while>
	<if>if <condition>(<expr>!*<name>s</name></expr>)</condition><then>
	    <return>return <expr><name>count</name></expr>;</return></then></if>

	<for>for (<init><expr><name>len</name> = 0</expr>;</init> <condition><expr><call><name>isalnum</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>len</name></expr></incr>) <empty_stmt>;</empty_stmt></for>
	<for>for (<init><expr><name>mp</name> = <name>modelist</name></expr>;</init> <condition><expr><name>mp</name>-&gt;<name>name</name></expr>;</condition> <incr><expr><name>mp</name>++</expr></incr>) <block>{
	    <if>if <condition>(<expr><name>len</name> == <name>mp</name>-&gt;<name>len</name>
		&amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>mp</name>-&gt;<name>name</name></expr></argument>, <argument><expr><name>mp</name>-&gt;<name>len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
		<break>break;</break></then></if>
	}</block></for>
	<if>if <condition>(<expr>!<name>mp</name>-&gt;<name>name</name></expr>)</condition><then>
	    <return>return <expr>-1</expr>;</return></then></if>

	<expr_stmt><expr><name>s</name> += <name>mp</name>-&gt;<name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr>*<name>s</name> &amp;&amp; <call><name>isascii</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>isspace</name><argument_list>(<argument><expr><call><name>CharOf</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	    <expr_stmt><expr><name>s</name>++</expr>;</expr_stmt></while>
	<if>if <condition>(<expr>!*<name>s</name></expr>)</condition><then>
	    <return>return <expr>-1</expr>;</return></then></if>

	<if>if <condition>(<expr>(<name>c</name> = <call><name>decode_keyvalue</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>mp</name>-&gt;<name>value</name> = <name>c</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>mp</name>-&gt;<name>set</name> = 1</expr>;</expr_stmt>
	    <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...parsed #%d: %s=%#x\n", <name>count</name>, <name>mp</name>-&gt;<name>name</name>, <name>c</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></while>
}</block></function>

<function><type><name>int</name></type>
<name>GetBytesAvailable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name></type> <name>arg</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr>(<name>char</name> *) &amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>(<name>int</name>) <name>arg</name></expr>;</return>
}</block></function>

<comment type="block">/* Utility function to try to hide system differences from
   everybody who used to call killpg() */</comment>

<function><type><name>int</name></type>
<name>kill_process_group</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pid</name></decl></param>, <param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>kill</name><argument_list>(<argument><expr>-<name>pid</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>ptioctl</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>int</name></type> <name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>APIRET</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ULONG</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>pt_termios</name></type> <name>pt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TERMIO_STRUCT</name> *</type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>func</name></expr>)</condition> <block>{
    <case>case <expr><name>TCGETA</name></expr>:
	<expr_stmt><expr><name>rc</name> = <call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_TIOCGETA</name></expr></argument>,
			 <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			 <argument><expr>(<name>ULONG</name> *) &amp; <name>pt</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument>struct <expr><name>pt_termios</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>rc</name></expr>)</condition><then>
	    <return>return <expr>-1</expr>;</return></then></if>
	<expr_stmt><expr><name>t</name> = (<name>TERMIO_STRUCT</name> *) <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name>-&gt;<name>c_iflag</name> = <name>pt</name>.<name>c_iflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name>-&gt;<name>c_oflag</name> = <name>pt</name>.<name>c_oflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name>-&gt;<name>c_cflag</name> = <name>pt</name>.<name>c_cflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name>-&gt;<name>c_lflag</name> = <name>pt</name>.<name>c_lflag</name></expr>;</expr_stmt>
	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCC</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
	    <expr_stmt><expr><name>t</name>-&gt;<name><name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name> = <name>pt</name>.<name><name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
	<return>return <expr>0</expr>;</return>
    </case><case>case <expr><name>TCSETA</name></expr>:
    </case><case>case <expr><name>TCSETAW</name></expr>:
    </case><case>case <expr><name>TCSETAF</name></expr>:
	<expr_stmt><expr><name>t</name> = (<name>TERMIO_STRUCT</name> *) <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pt</name>.<name>c_iflag</name> = <name>t</name>-&gt;<name>c_iflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pt</name>.<name>c_oflag</name> = <name>t</name>-&gt;<name>c_oflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pt</name>.<name>c_cflag</name> = <name>t</name>-&gt;<name>c_cflag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pt</name>.<name>c_lflag</name> = <name>t</name>-&gt;<name>c_lflag</name></expr>;</expr_stmt>

	<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCC</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
	    <expr_stmt><expr><name>pt</name>.<name><name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name> = <name>t</name>-&gt;<name><name>c_cc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></for>
	<if>if <condition>(<expr><name>func</name> == <name>TCSETA</name></expr>)</condition><then>
	    <expr_stmt><expr><name>i</name> = <name>XTY_TIOCSETA</name></expr>;</expr_stmt></then>
	<else>else <if>if <condition>(<expr><name>func</name> == <name>TCSETAW</name></expr>)</condition><then>
	    <expr_stmt><expr><name>i</name> = <name>XTY_TIOCSETAW</name></expr>;</expr_stmt></then>
	<else>else
	    <expr_stmt><expr><name>i</name> = <name>XTY_TIOCSETAF</name></expr>;</expr_stmt></else></if></else></if>
	<expr_stmt><expr><name>rc</name> = <call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
			 <argument><expr>(<name>ULONG</name> *) &amp; <name>pt</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument>struct <expr><name>pt_termios</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			 <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr>(<name>rc</name>) ? -1 : 0</expr>;</return>
    </case><case>case <expr><name>TIOCCONS</name></expr>:
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_TIOCCONS</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) <name>data</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr><name>TIOCSWINSZ</name></expr>:
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_TIOCSWINSZ</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) <name>data</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>TTYSIZE_STRUCT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr><name>TIOCGWINSZ</name></expr>:
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_TIOCGWINSZ</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) <name>data</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>TTYSIZE_STRUCT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr><name>XTY_ENADUP</name></expr>:
	<expr_stmt><expr><name>i</name> = 1</expr>;</expr_stmt>
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_ENADUP</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) &amp; <name>i</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr><name>XTY_TRACE</name></expr>:
	<expr_stmt><expr><name>i</name> = 2</expr>;</expr_stmt>
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>XTY_TRACE</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) &amp; <name>i</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			   <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><case>case <expr><name>PTMS_GETPTY</name></expr>:
	<expr_stmt><expr><name>i</name> = 1</expr>;</expr_stmt>
	<return>return <expr><call><name>DosDevIOCtl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>XFREE86_PTY</name></expr></argument>, <argument><expr><name>PTMS_GETPTY</name></expr></argument>,
			   <argument><expr>(<name>ULONG</name> *) &amp; <name>i</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ULONG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>,
			   <argument><expr>(<name>UCHAR</name> *) <name>data</name></expr></argument>, <argument><expr>14</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    </case><default>default:
	<return>return <expr>-1</expr>;</return>
    </default>}</block></switch>
}</block></function>
</unit>
