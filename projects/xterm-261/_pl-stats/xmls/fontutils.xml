<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" dir="" filename="fontutils.c"><comment type="block">/* $XTermId: fontutils.c,v 1.344 2010/06/15 08:18:58 tom Exp $ */</comment>

<comment type="block">/************************************************************

Copyright 1998-2009,2010 by Thomas E. Dickey

                        All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name(s) of the above copyright
holders shall not be used in advertising or otherwise to promote the
sale, use or other dealings in this Software without prior written
authorization.

********************************************************/</comment>

<comment type="block">/*
 * A portion of this module (for FontNameProperties) was adapted from EMU 1.3;
 * it constructs font names with specific properties changed, e.g., for bold
 * and double-size characters.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RES_OFFSET</name>(field)	XtOffsetOf(SubResourceRec, field)</cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fontutils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/Drawing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xmu/CharSet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;main.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;data.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;menu.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xstrings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;xterm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* from X11/Xlibint.h - not all vendors install this file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CI_NONEXISTCHAR</name>(cs) (((cs)-&gt;width == 0) &amp;&amp; \
			     (((cs)-&gt;rbearing|(cs)-&gt;lbearing| \
			       (cs)-&gt;ascent|(cs)-&gt;descent) == 0))</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>CI_GET_CHAR_INFO_1D</name>(fs,col,def,cs) \
{ \
    cs = def; \
    if (col &gt;= fs-&gt;min_char_or_byte2 &amp;&amp; col &lt;= fs-&gt;max_char_or_byte2) { \
	if (fs-&gt;per_char == NULL) { \
	    cs = &amp;fs-&gt;min_bounds; \
	} else { \
	    cs = &amp;fs-&gt;per_char[(col - fs-&gt;min_char_or_byte2)]; \
	    if (CI_NONEXISTCHAR(cs)) cs = def; \
	} \
    } \
}</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>CI_GET_CHAR_INFO_2D</name>(fs,row,col,def,cs) \
{ \
    cs = def; \
    if (row &gt;= fs-&gt;min_byte1 &amp;&amp; row &lt;= fs-&gt;max_byte1 &amp;&amp; \
	col &gt;= fs-&gt;min_char_or_byte2 &amp;&amp; col &lt;= fs-&gt;max_char_or_byte2) { \
	if (fs-&gt;per_char == NULL) { \
	    cs = &amp;fs-&gt;min_bounds; \
	} else { \
	    cs = &amp;fs-&gt;per_char[((row - fs-&gt;min_byte1) * \
				(fs-&gt;max_char_or_byte2 - \
				 fs-&gt;min_char_or_byte2 + 1)) + \
			       (col - fs-&gt;min_char_or_byte2)]; \
	    if (CI_NONEXISTCHAR(cs)) cs = def; \
	} \
    } \
}</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>MAX_FONTNAME</name> 200</cpp:define>

<comment type="block">/*
 * A structure to hold the relevant properties from a font
 * we need to make a well formed font name for it.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* registry, foundry, family */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>beginning</name></decl>;</decl_stmt>
    <comment type="block">/* weight */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>weight</name></decl>;</decl_stmt>
    <comment type="block">/* slant */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>slant</name></decl>;</decl_stmt>
    <comment type="block">/* wideness */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>wideness</name></decl>;</decl_stmt>
    <comment type="block">/* add style */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>add_style</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>point_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res_x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res_y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>spacing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>average_width</name></decl>;</decl_stmt>
    <comment type="block">/* charset registry, charset encoding */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>FontNameProperties</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SHIFT_FONTS</name></expr></cpp:if>
<function_decl><type><name>static</name> <name>void</name></type> <name>lookupOneFontSize</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>unsigned</name></type>
<name>countGlyphs</name><parameter_list>(<param><decl><type><name>XFontStruct</name> *</type> <name>fp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>fp</name> != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>fp</name>-&gt;<name>min_byte1</name> == 0 &amp;&amp; <name>fp</name>-&gt;<name>max_byte1</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>count</name> = <name>fp</name>-&gt;<name>max_char_or_byte2</name> - <name>fp</name>-&gt;<name>min_char_or_byte2</name></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>fp</name>-&gt;<name>min_char_or_byte2</name> &lt; 256
		   &amp;&amp; <name>fp</name>-&gt;<name>max_char_or_byte2</name> &lt; 256</expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>unsigned</name></type> <name>first</name> =<init> <expr>(<name>fp</name>-&gt;<name>min_byte1</name> &lt;&lt; 8) + <name>fp</name>-&gt;<name>min_char_or_byte2</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>unsigned</name></type> <name>last</name> =<init> <expr>(<name>fp</name>-&gt;<name>max_byte1</name> &lt;&lt; 8) + <name>fp</name>-&gt;<name>max_char_or_byte2</name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>count</name> = <name>last</name> + 1 - <name>first</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
    }</block></then></if>
    <return>return <expr><name>count</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Verify that the wide-bold font is at least a bold font with roughly as many
 * glyphs as the wide font.  The counts should be the same, but settle for
 * filtering out the worst of the font mismatches.
 */</comment>
<function><type><name>static</name> <name>Bool</name></type>
<name>compatibleWideCounts</name><parameter_list>(<param><decl><type><name>XFontStruct</name> *</type> <name>wfs</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>wbfs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>count_w</name> =<init> <expr><call><name>countGlyphs</name><argument_list>(<argument><expr><name>wfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>count_wb</name> =<init> <expr><call><name>countGlyphs</name><argument_list>(<argument><expr><name>wbfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>count_w</name> &lt;= 256 ||
	<name>count_wb</name> &lt;= 256 ||
	((<name>count_w</name> / 4) * 3) &gt; <name>count_wb</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...font server lied (count wide %u vs wide-bold %u)\n",
	       <name>count_w</name>, <name>count_wb</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>False</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>True</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_WIDE_CHARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>setupPackedFonts</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>value</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIXED</name>(name) screen-&gt;name[fontnum].map.mixed</cpp:define>
    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>render_font</name> == <name>True</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fontnum</name> =<init> <expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>screen</name>-&gt;<name>allow_packing</name> = <call>(<name>Boolean</name>) <argument_list>(<argument><expr><call><name>MIXED</name><argument_list>(<argument><expr><name>renderFontNorm</name></expr></argument>)</argument_list></call>
					   || <call><name>MIXED</name><argument_list>(<argument><expr><name>renderFontBold</name></expr></argument>)</argument_list></call>
					   || <call><name>MIXED</name><argument_list>(<argument><expr><name>renderFontItal</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERWIDE</name></expr></cpp:if>
					   || <call><name>MIXED</name><argument_list>(<argument><expr><name>renderWideNorm</name></expr></argument>)</argument_list></call>
					   || <call><name>MIXED</name><argument_list>(<argument><expr><name>renderWideBold</name></expr></argument>)</argument_list></call>
					   || <call><name>MIXED</name><argument_list>(<argument><expr><name>renderWideItal</name></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    )</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIXED</name></cpp:undef>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_RENDERFONT */</comment>

    <expr_stmt><expr><name>value</name> = <name>screen</name>-&gt;<name>allow_packing</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_font_packedfont</name></expr>]</index></name>.<name>widget</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Returns the fields from start to stop in a dash- separated string.  This
 * function will modify the source, putting '\0's in the appropiate place and
 * moving the beginning forward to after the '\0'
 *
 * This will NOT work for the last field (but we won't need it).
 */</comment>
<function><type><name>static</name> <name>char</name> *</type>
<name>n_fields</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>source</name></decl></param>, <param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>stop</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>str</name>, *<name>str1</name></decl>;</decl_stmt>

    <comment type="block">/*
     * find the start-1th dash
     */</comment>
    <for>for (<init><expr><name>i</name> = <name>start</name> - 1</expr>, <expr><name>str</name> = *<name>source</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>str</name>++</expr></incr>)
	<if>if <condition>(<expr>(<name>str</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	    <return>return <expr>0</expr>;</return></then></if></for>

    <comment type="block">/*
     * find the stopth dash
     */</comment>
    <for>for (<init><expr><name>i</name> = <name>stop</name> - <name>start</name> + 1</expr>, <expr><name>str1</name> = <name>str</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name>--</expr>, <expr><name>str1</name>++</expr></incr>)
	<if>if <condition>(<expr>(<name>str1</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	    <return>return <expr>0</expr>;</return></then></if></for>

    <comment type="block">/*
     * put a \0 at the end of the fields
     */</comment>
    <expr_stmt><expr>*(<name>str1</name> - 1) = '\0'</expr>;</expr_stmt>

    <comment type="block">/*
     * move source forward
     */</comment>
    <expr_stmt><expr>*<name>source</name> = <name>str1</name></expr>;</expr_stmt>

    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>Boolean</name></type>
<name>check_fontname</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Boolean</name></type> <name>result</name> =<init> <expr><name>True</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>name</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("fontname missing\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &gt;= <name>MAX_FONTNAME</name> - 1</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("fontname too large: %s\n", <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = <name>False</name></expr>;</expr_stmt>
    }</block></then></if></else></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Gets the font properties from a given font structure.  We use the FONT name
 * to find them out, since that seems easier.
 *
 * Returns a pointer to a static FontNameProperties structure
 * or NULL on error.
 */</comment>
<function><type><name>static</name> <name>FontNameProperties</name> *</type>
<name>get_font_name_props</name><parameter_list>(<param><decl><type><name>Display</name> *</type> <name>dpy</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>fs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>FontNameProperties</name></type> <name>props</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>last_name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>XFontProp</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Atom</name></type> <name>fontatom</name> =<init> <expr><call><name>XInternAtom</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr>"FONT"</expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>name</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>

    <comment type="block">/*
     * first get the full font name
     */</comment>
    <if>if <condition>(<expr><name>fontatom</name> != 0</expr>)</condition><then> <block>{
	<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>fp</name> = <name>fs</name>-&gt;<name>properties</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>fs</name>-&gt;<name>n_properties</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>fp</name>++</expr></incr>) <block>{
	    <if>if <condition>(<expr><name>fp</name>-&gt;<name>name</name> == <name>fontatom</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>name</name> = <call><name>XGetAtomName</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fp</name>-&gt;<name>card32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	}</block></for>
    }</block></then></if>

    <if>if <condition>(<expr><name>name</name> == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/*
     * XGetAtomName allocates memory - don't leak
     */</comment>
    <if>if <condition>(<expr><name>last_name</name> != 0</expr>)</condition><then>
	<expr_stmt><expr><call><name>XFree</name><argument_list>(<argument><expr><name>last_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name>last_name</name> = <name>name</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>result</name> != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr>!<call><name>check_fontname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr>0</expr>;</return></then></if>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Now split it up into parts and put them in
     * their places. Since we are using parts of
     * the original string, we must not free the Atom Name
     */</comment>

    <comment type="block">/* registry, foundry, family */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>beginning</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* weight is the next */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>weight</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* slant */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>slant</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* width */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>wideness</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* add style */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>add_style</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* pixel size */</comment>
    <if>if <condition>(<expr>(<name>str</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <if>if <condition>(<expr>(<name>props</name>.<name>pixel_size</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* point size */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>point_size</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* res_x */</comment>
    <if>if <condition>(<expr>(<name>str</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <if>if <condition>(<expr>(<name>props</name>.<name>res_x</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* res_y */</comment>
    <if>if <condition>(<expr>(<name>str</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <if>if <condition>(<expr>(<name>props</name>.<name>res_y</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* spacing */</comment>
    <if>if <condition>(<expr>(<name>props</name>.<name>spacing</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* average width */</comment>
    <if>if <condition>(<expr>(<name>str</name> = <call><name>n_fields</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>
    <if>if <condition>(<expr>(<name>props</name>.<name>average_width</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/* the rest: charset registry and charset encoding */</comment>
    <expr_stmt><expr><name>props</name>.<name>end</name> = <name>name</name></expr>;</expr_stmt>

    <return>return <expr>&amp;<name>props</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>ALLOCHUNK</name>(n) ((n | 127) + 1)</cpp:define>

<function><type><name>static</name> <name>void</name></type>
<name>alloca_fontname</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>result</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>next</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>last</name> =<init> <expr>(*<name>result</name> != 0) ? <call><name>strlen</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>have</name> =<init> <expr>(*<name>result</name> != 0) ? <call><name>ALLOCHUNK</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>want</name> =<init> <expr><name>last</name> + <name>next</name> + 2</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>want</name> &gt;= <name>have</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>want</name> = <call><name>ALLOCHUNK</name><argument_list>(<argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>last</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr>*<name>result</name> = <call><name>TypeRealloc</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>want</name></expr></argument>, <argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <if>if <condition>(<expr>(*<name>result</name> = <call><name>TypeMallocN</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
		<expr_stmt><expr>**<name>result</name> = '\0'</expr>;</expr_stmt></then></if>
	}</block></else></if>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>append_fontname_str</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>result</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>value</name> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>value</name> = "*"</expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>alloca_fontname</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>result</name> != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr>**<name>result</name> != '\0'</expr>)</condition><then>
	    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>append_fontname_num</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>value</name> &lt; 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<comment type="block">/*
 * Take the given font props and try to make a well formed font name specifying
 * the same base font and size and everything, but with different weight/width
 * according to the parameters.  The return value is allocated, should be freed
 * by the caller.
 */</comment>
<function><type><name>static</name> <name>char</name> *</type>
<name>derive_font_name</name><parameter_list>(<param><decl><type><name>FontNameProperties</name> *</type> <name>props</name></decl></param>,
		 <param><decl><type><name>const</name> <name>char</name> *</type><name>use_weight</name></decl></param>,
		 <param><decl><type><name>int</name></type> <name>use_average_width</name></decl></param>,
		 <param><decl><type><name>const</name> <name>char</name> *</type><name>use_encoding</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>beginning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>use_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>slant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>pixel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>point_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>res_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>res_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>use_average_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>use_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>char</name> *</type>
<name>bold_font_name</name><parameter_list>(<param><decl><type><name>FontNameProperties</name> *</type> <name>props</name></decl></param>, <param><decl><type><name>int</name></type> <name>use_average_width</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>derive_font_name</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>"bold"</expr></argument>, <argument><expr><name>use_average_width</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>end</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>derive_wide_font</name>(props, weight) \
	derive_font_name(props, weight, props-&gt;average_width * 2, "ISO10646-1")</cpp:define>

<function><type><name>static</name> <name>char</name> *</type>
<name>wide_font_name</name><parameter_list>(<param><decl><type><name>FontNameProperties</name> *</type> <name>props</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>derive_wide_font</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>"medium"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>char</name> *</type>
<name>widebold_font_name</name><parameter_list>(<param><decl><type><name>FontNameProperties</name> *</type> <name>props</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>derive_wide_font</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>"bold"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_WIDE_CHARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_DEC_CHRSET</name></expr></cpp:if>
<comment type="block">/*
 * Take the given font props and try to make a well formed font name specifying
 * the same base font but changed depending on the given attributes and chrset.
 *
 * For double width fonts, we just double the X-resolution, for double height
 * fonts we double the pixel-size and Y-resolution
 */</comment>
<function><type><name>char</name> *</type>
<name>xtermSpecialFont</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>atts</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>chrset</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>old_spacing</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>FontNameProperties</name></type> <name>old_props</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>FontNameProperties</name> *</type><name>props</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>weight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pixel_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res_x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res_y</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>props</name> = <call><name>get_font_name_props</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>props</name> == 0</expr>)</condition><then>
	<return>return <expr><name>result</name></expr>;</return></then></if>

    <expr_stmt><expr><name>pixel_size</name> = <name>props</name>-&gt;<name>pixel_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res_x</name> = <name>props</name>-&gt;<name>res_x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res_y</name> = <name>props</name>-&gt;<name>res_y</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>atts</name> &amp; <name>BOLD</name></expr>)</condition><then>
	<expr_stmt><expr><name>weight</name> = "bold"</expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><name>weight</name> = <name>props</name>-&gt;<name>weight</name></expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><call><name>CSET_DOUBLE</name><argument_list>(<argument><expr><name>chrset</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><name>res_x</name> *= 2</expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>chrset</name> == <name>CSET_DHL_TOP</name>
	|| <name>chrset</name> == <name>CSET_DHL_BOT</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>res_y</name> *= 2</expr>;</expr_stmt>
	<expr_stmt><expr><name>pixel_size</name> *= 2</expr>;</expr_stmt>
    }</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name></expr></cpp:if>
    <if>if <condition>(<expr><name>old_props</name>.<name>res_x</name> != <name>res_x</name>
	|| <name>old_props</name>.<name>res_x</name> != <name>res_y</name>
	|| <name>old_props</name>.<name>pixel_size</name> != <name>pixel_size</name>
	|| <call><name>strcmp</name><argument_list>(<argument><expr><name>old_props</name>.<name>spacing</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>spacing</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermSpecialFont(atts = %#x, chrset = %#x)\n", <name>atts</name>, <name>chrset</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("res_x      = %d\n", <name>res_x</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("res_y      = %d\n", <name>res_y</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("point_size = %s\n", <name>props</name>-&gt;<name>point_size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("pixel_size = %d\n", <name>pixel_size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("spacing    = %s\n", <name>props</name>-&gt;<name>spacing</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_props</name>.<name>res_x</name> = <name>res_x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_props</name>.<name>res_x</name> = <name>res_y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_props</name>.<name>pixel_size</name> = <name>pixel_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_props</name>.<name>spacing</name> = <call><name>strcpy</name><argument_list>(<argument><expr><name>old_spacing</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>beginning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>slant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>wideness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>add_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>point_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>(<name>atts</name> &amp; <name>NORESOLUTION</name>) ? -1 : <name>res_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_num</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>(<name>atts</name> &amp; <name>NORESOLUTION</name>) ? -1 : <name>res_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>spacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>append_fontname_str</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>props</name>-&gt;<name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_DEC_CHRSET */</comment>

<comment type="block">/*
 * Case-independent comparison for font-names, including wildcards.
 * XLFD allows '?' as a wildcard, but we do not handle that (no one seems
 * to use it).
 */</comment>
<function><type><name>static</name> <name>Bool</name></type>
<name>same_font_name</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>pattern</name></decl></param>, <param><decl><type><name>char</name> *</type><name>match</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>pattern</name> &amp;&amp; <name>match</name></expr>)</condition><then> <block>{
	<while>while <condition>(<expr>*<name>pattern</name> &amp;&amp; *<name>match</name></expr>)</condition> <block>{
	    <if>if <condition>(<expr>*<name>pattern</name> == *<name>match</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>pattern</name>++</expr>;</expr_stmt>
		<expr_stmt><expr><name>match</name>++</expr>;</expr_stmt>
	    }</block></then> <else>else <if>if <condition>(<expr>*<name>pattern</name> == '*' || *<name>match</name> == '*'</expr>)</condition><then> <block>{
		<if>if <condition>(<expr><call><name>same_font_name</name><argument_list>(<argument><expr><name>pattern</name> + 1</expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <return>return <expr><name>True</name></expr>;</return>
		}</block></then> <else>else <if>if <condition>(<expr><call><name>same_font_name</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>match</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		    <return>return <expr><name>True</name></expr>;</return>
		}</block></then> <else>else <block>{
		    <return>return <expr><name>False</name></expr>;</return>
		}</block></else></if></else></if>
	    }</block></then> <else>else <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name> =<init> <expr><call><name>x_toupper</name><argument_list>(<argument><expr>*<name>pattern</name>++</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr><call><name>x_toupper</name><argument_list>(<argument><expr>*<name>match</name>++</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p</name> != <name>m</name></expr>)</condition><then>
		    <return>return <expr><name>False</name></expr>;</return></then></if>
	    }</block></else></if></else></if>
	}</block></while>
	<expr_stmt><expr><name>result</name> = (*<name>pattern</name> == *<name>match</name>)</expr>;</expr_stmt>	<comment type="block">/* both should be NUL */</comment>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Double-check the fontname that we asked for versus what the font server
 * actually gave us.  The larger fixed fonts do not always have a matching bold
 * font, and the font server may try to scale another font or otherwise
 * substitute a mismatched font.
 *
 * If we cannot get what we requested, we will fallback to the original
 * behavior, which simulates bold by overstriking each character at one pixel
 * offset.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>got_bold_font</name><parameter_list>(<param><decl><type><name>Display</name> *</type> <name>dpy</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>fs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>requested</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>actual</name><index>[<expr><name>MAX_FONTNAME</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>got</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>get_font_name_props</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
	<expr_stmt><expr><name>got</name> = 0</expr>;</expr_stmt></then>
    <else>else
	<expr_stmt><expr><name>got</name> = <call><name>same_font_name</name><argument_list>(<argument><expr><name>requested</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <return>return <expr><name>got</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * If the font server tries to adjust another font, it may not adjust it
 * properly.  Check that the bounding boxes are compatible.  Otherwise we'll
 * leave trash on the display when we mix normal and bold fonts.
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>same_font_size</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>nfs</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>bfs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("same_font_size height %d/%d, min %d/%d max %d/%d\n",
	   <name>nfs</name>-&gt;<name>ascent</name> + <name>nfs</name>-&gt;<name>descent</name>,
	   <name>bfs</name>-&gt;<name>ascent</name> + <name>bfs</name>-&gt;<name>descent</name>,
	   <name>nfs</name>-&gt;<name>min_bounds</name>.<name>width</name>, <name>bfs</name>-&gt;<name>min_bounds</name>.<name>width</name>,
	   <name>nfs</name>-&gt;<name>max_bounds</name>.<name>width</name>, <name>bfs</name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>screen</name>-&gt;<name>free_bold_box</name>
	|| ((<name>nfs</name>-&gt;<name>ascent</name> + <name>nfs</name>-&gt;<name>descent</name>) == (<name>bfs</name>-&gt;<name>ascent</name> + <name>bfs</name>-&gt;<name>descent</name>)
	    &amp;&amp; (<name>nfs</name>-&gt;<name>min_bounds</name>.<name>width</name> == <name>bfs</name>-&gt;<name>min_bounds</name>.<name>width</name>
		|| <name>nfs</name>-&gt;<name>min_bounds</name>.<name>width</name> == <name>bfs</name>-&gt;<name>min_bounds</name>.<name>width</name> + 1)
	    &amp;&amp; (<name>nfs</name>-&gt;<name>max_bounds</name>.<name>width</name> == <name>bfs</name>-&gt;<name>max_bounds</name>.<name>width</name>
		|| <name>nfs</name>-&gt;<name>max_bounds</name>.<name>width</name> == <name>bfs</name>-&gt;<name>max_bounds</name>.<name>width</name> + 1))</expr>;</return>
}</block></function>

<comment type="block">/*
 * Check if the font looks like it has fixed width
 */</comment>
<function><type><name>static</name> <name>int</name></type>
<name>is_fixed_font</name><parameter_list>(<param><decl><type><name>XFontStruct</name> *</type> <name>fs</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>fs</name></expr>)</condition><then>
	<return>return <expr>(<name>fs</name>-&gt;<name>min_bounds</name>.<name>width</name> == <name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr>;</return></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
 * Check if the font looks like a double width font (i.e. contains
 * characters of width X and 2X
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>int</name></type>
<name>is_double_width_font</name><parameter_list>(<param><decl><type><name>XFontStruct</name> *</type> <name>fs</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr>((2 * <name>fs</name>-&gt;<name>min_bounds</name>.<name>width</name>) == <name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>is_double_width_font</name>(fs) 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name> &amp;&amp; <name>OPT_RENDERFONT</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TYPE_FCCHAR32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HALF_WIDTH_TEST_STRING</name> "1234567890"</cpp:define>

<comment type="block">/* '1234567890' in Chinese characters in UTF-8 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FULL_WIDTH_TEST_STRING</name> "\xe4\xb8\x80\xe4\xba\x8c\xe4\xb8\x89" \
                               "\xe5\x9b\x9b\xe4\xba\x94" \
			       "\xef\xa7\x91\xe4\xb8\x83\xe5\x85\xab" \
			       "\xe4\xb9\x9d\xef\xa6\xb2"</cpp:define>

<comment type="block">/* '1234567890' in Korean script in UTF-8 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FULL_WIDTH_TEST_STRING2</name> "\xec\x9d\xbc\xec\x9d\xb4\xec\x82\xbc" \
                                "\xec\x82\xac\xec\x98\xa4" \
			        "\xec\x9c\xa1\xec\xb9\xa0\xed\x8c\x94" \
			        "\xea\xb5\xac\xec\x98\x81"</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>HALF_WIDTH_CHAR1</name>  0x0031</cpp:define>	<comment type="block">/* '1' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>HALF_WIDTH_CHAR2</name>  0x0057</cpp:define>	<comment type="block">/* 'W' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FULL_WIDTH_CHAR1</name>  0x4E00</cpp:define>	<comment type="block">/* CJK Ideograph 'number one' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FULL_WIDTH_CHAR2</name>  0xAC00</cpp:define>	<comment type="block">/* Korean script syllable 'Ka' */</comment>

<function><type><name>static</name> <name>Bool</name></type>
<name>is_double_width_font_xft</name><parameter_list>(<param><decl><type><name>Display</name> *</type> <name>dpy</name></decl></param>, <param><decl><type><name>XftFont</name> *</type> <name>font</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XGlyphInfo</name></type> <name>gi1</name>, <name>gi2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>c1</name> =<init> <expr><name>HALF_WIDTH_CHAR1</name></expr>, <expr><name>c2</name> = <name>HALF_WIDTH_CHAR2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>fwstr</name> =<init> <expr><name>FULL_WIDTH_TEST_STRING</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>hwstr</name> =<init> <expr><name>HALF_WIDTH_TEST_STRING</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Some Korean fonts don't have Chinese characters at all. */</comment>
    <if>if <condition>(<expr>!<call><name>XftCharExists</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>FULL_WIDTH_CHAR1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<if>if <condition>(<expr>!<call><name>XftCharExists</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>FULL_WIDTH_CHAR2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <return>return <expr><name>False</name></expr>;</return></then>	<comment type="block">/* Not a CJK font */</comment>
	<else>else			<comment type="block">/* a Korean font without CJK Ideographs */</comment>
	    <expr_stmt><expr><name>fwstr</name> = <name>FULL_WIDTH_TEST_STRING2</name></expr>;</expr_stmt></else></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>XftTextExtents32</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr>&amp;<name>c1</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>gi1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XftTextExtents32</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr>&amp;<name>c2</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>gi2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>gi1</name>.<name>xOff</name> != <name>gi2</name>.<name>xOff</name></expr>)</condition><then>	<comment type="block">/* Not a fixed-width font */</comment>
	<return>return <expr><name>False</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>XftTextExtentsUtf8</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr>(<name>FcChar8</name> *) <name>hwstr</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>hwstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>gi1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XftTextExtentsUtf8</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr>(<name>FcChar8</name> *) <name>fwstr</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>fwstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>gi2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * fontconfig and Xft prior to 2.2(?) set the width of half-width
     * characters identical to that of full-width character in CJK double-width
     * (bi-width / monospace) font even though the former is half as wide as
     * the latter.  This was fixed sometime before the release of fontconfig
     * 2.2 in early 2003.  See
     *  http://bugzilla.mozilla.org/show_bug.cgi?id=196312
     * In the meantime, we have to check both possibilities.
     */</comment>
    <return>return <expr>((2 * <name>gi1</name>.<name>xOff</name> == <name>gi2</name>.<name>xOff</name>) || (<name>gi1</name>.<name>xOff</name> == <name>gi2</name>.<name>xOff</name>))</expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>is_double_width_font_xft</name>(dpy, xftfont) 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>EmptyFont</name>(fs) (fs != 0 \
		   &amp;&amp; ((fs)-&gt;ascent + (fs)-&gt;descent == 0 \
		    || (fs)-&gt;max_bounds.width == 0))</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>FontSize</name>(fs) (((fs)-&gt;ascent + (fs)-&gt;descent) \
		    *  (fs)-&gt;max_bounds.width)</cpp:define>

<function><type><name>const</name> <name>VTFontNames</name> *</type>
<name>xtermFontName</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>normal</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>VTFontNames</name></type> <name>data</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>data</name>.<name>f_n</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name>.<name>f_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name>.<name>f_n</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>&amp;<name>data</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>cache_menu_font_name</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>int</name></type> <name>fontnum</name></decl></param>, <param><decl><type><name>int</name></type> <name>which</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>name</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>last</name> =<init> <expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr><name>fontnum</name></expr>]</index><index>[<expr><name>which</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>last</name> != 0</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("caching menu fontname %d.%d %s\n", <name>fontnum</name>, <name>which</name>, <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr><name>fontnum</name></expr>]</index><index>[<expr><name>which</name></expr>]</index></name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("caching menu fontname %d.%d %s\n", <name>fontnum</name>, <name>which</name>, <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr><name>fontnum</name></expr>]</index><index>[<expr><name>which</name></expr>]</index></name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Open the given font and verify that it is non-empty.  Return a null on
 * failure.
 */</comment>
<function><type><name>Bool</name></type>
<name>xtermOpenFont</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>,
	      <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>,
	      <param><decl><type><name>XTermFonts</name> *</type> <name>result</name></decl></param>,
	      <param><decl><type><name>fontWarningTypes</name></type> <name>warn</name></decl></param>,
	      <param><decl><type><name>Bool</name></type> <name>force</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>code</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>name</name> != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>result</name>-&gt;<name>fs</name> = <call><name>XLoadQueryFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>code</name> = <name>True</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><call><name>EmptyFont</name><argument_list>(<argument><expr><name>result</name>-&gt;<name>fs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr>(<name>void</name>) <call><name>xtermCloseFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>code</name> = <name>False</name></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><name>result</name>-&gt;<name>fn</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then> <else>else <if>if <condition>(<expr><call><name>XmuCompareISOLatin1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEFFONT</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>warn</name> &lt;= <name>xw</name>-&gt;<name>misc</name>.<name>fontWarnings</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
		&amp;&amp; !<call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("OOPS: cannot load font %s\n", <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot load font %s\n"</expr></argument>, <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
		<comment type="block">/*
		 * Do a sanity check in case someone's mixed up xterm with
		 * one of those programs that read their resource data from
		 * xterm's namespace.
		 */</comment>
		<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> != 0 || <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
			    <argument><expr>"Use the \"-fa\" option for the Xft fonts\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermOpenFont: cannot load font %s\n", <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	    <if>if <condition>(<expr><name>force</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>code</name> = <call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>DEFFONT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>fwAlways</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if></else></if>
    }</block></then></if>
    <return>return <expr><name>code</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Close the font and free the font info.
 */</comment>
<function><type><name>XTermFonts</name> *</type>
<name>xtermCloseFont</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XTermFonts</name> *</type> <name>fnt</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>fnt</name> != 0 &amp;&amp; <name>fnt</name>-&gt;<name>fs</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>clrCgsFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><call><name>WhichVWin</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XFreeFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>fnt</name>-&gt;<name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermFreeFontInfo</name><argument_list>(<argument><expr><name>fnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
 * Close the listed fonts, noting that some may use copies of the pointer.
 */</comment>
<function><type><name>void</name></type>
<name>xtermCloseFonts</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XTermFonts</name> *</type> <name>fnts</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>j</name>, <name>k</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>fMAX</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
	<comment type="block">/*
	 * Need to save the pointer since xtermCloseFont zeroes it
	 */</comment>
	<decl_stmt><decl><type><name>XFontStruct</name> *</type><name>thisFont</name> =<init> <expr><name><name>fnts</name><index>[<expr><name>j</name></expr>]</index></name>.<name>fs</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>thisFont</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>xtermCloseFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for (<init><expr><name>k</name> = <name>j</name> + 1</expr>;</init> <condition><expr><name>k</name> &lt; <name>fMAX</name></expr>;</condition> <incr><expr>++<name>k</name></expr></incr>) <block>{
		<if>if <condition>(<expr><name>thisFont</name> == <name><name>fnts</name><index>[<expr><name>k</name></expr>]</index></name>.<name>fs</name></expr>)</condition><then>
		    <expr_stmt><expr><call><name>xtermFreeFontInfo</name><argument_list>(<argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    }</block></for>
	}</block></then></if>
    }</block></for>
}</block></function>

<comment type="block">/*
 * Make a copy of the source, assuming the XFontStruct's to be unique, but
 * ensuring that the names are reallocated to simplify freeing.
 */</comment>
<function><type><name>void</name></type>
<name>xtermCopyFontInfo</name><parameter_list>(<param><decl><type><name>XTermFonts</name> *</type> <name>target</name></decl></param>, <param><decl><type><name>XTermFonts</name> *</type> <name>source</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>xtermFreeFontInfo</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>target</name>-&gt;<name>chrset</name> = <name>source</name>-&gt;<name>chrset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>target</name>-&gt;<name>flags</name> = <name>source</name>-&gt;<name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>target</name>-&gt;<name>fn</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>source</name>-&gt;<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>target</name>-&gt;<name>fs</name> = <name>source</name>-&gt;<name>fs</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>xtermFreeFontInfo</name><parameter_list>(<param><decl><type><name>XTermFonts</name> *</type> <name>target</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>target</name>-&gt;<name>chrset</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>target</name>-&gt;<name>flags</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>target</name>-&gt;<name>fn</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>target</name>-&gt;<name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>target</name>-&gt;<name>fn</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>target</name>-&gt;<name>fs</name> = 0</expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type>
<name>xtermLoadFont</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>,
	      <param><decl><type><name>const</name> <name>VTFontNames</name> *</type> <name>fonts</name></decl></param>,
	      <param><decl><type><name>Bool</name></type> <name>doresize</name></decl></param>,
	      <param><decl><type><name>int</name></type> <name>fontnum</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VTwin</name> *</type><name>win</name> =<init> <expr><call><name>WhichVWin</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>VTFontNames</name></type> <name>myfonts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FontNameProperties</name> *</type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XTermFonts</name></type> <name><name>fnts</name><index>[<expr><name>fMAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pixel</name></type> <name>new_normal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pixel</name></type> <name>new_revers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>tmpname</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>normal</name><index>[<expr><name>MAX_FONTNAME</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Boolean</name></type> <name>proportional</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>fontWarningTypes</name></type> <name><name>warn</name><index>[<expr><name>fMAX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>myfonts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>myfonts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fnts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fnts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>fonts</name> != 0</expr>)</condition><then>
	<expr_stmt><expr><name>myfonts</name> = *<name>fonts</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr>!<call><name>check_fontname</name><argument_list>(<argument><expr><name>myfonts</name>.<name>f_n</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<return>return <expr>0</expr>;</return></then></if>

    <comment type="block">/*
     * Check the font names against the resource values, to see which were
     * derived in a previous call.  If so, we'll only warn about those if
     * the warning level is set to "always".
     */</comment>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>fMAX</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
	<expr_stmt><expr><name><name>warn</name><index>[<expr><name>j</name></expr>]</index></name> = <name>fwAlways</name></expr>;</expr_stmt>
    }</block></for>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CmpResource</name>(field, index) \
    if (same_font_name(screen-&gt;menu_font_names[fontnum][index], myfonts.field)) \
	warn[index] = fwResource</cpp:define>

    <expr_stmt><expr><call><name>CmpResource</name><argument_list>(<argument><expr><name>f_n</name></expr></argument>, <argument><expr><name>fNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>fontnum</name> == <name>fontMenu_default</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>CmpResource</name><argument_list>(<argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	<expr_stmt><expr><call><name>CmpResource</name><argument_list>(<argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CmpResource</name><argument_list>(<argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fWBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>

    <if>if <condition>(<expr><name>fontnum</name> == <name>fontMenu_fontescape</name>
	&amp;&amp; <name>myfonts</name>.<name>f_n</name> != <name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<if>if <condition>(<expr>(<name>tmpname</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>myfonts</name>.<name>f_n</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
	    <return>return <expr>0</expr>;</return></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Begin Cgs - xtermLoadFont(%s)\n", <name>myfonts</name>.<name>f_n</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseWindowGCs</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>DbgResource</name>(name, field, index) \
    TRACE(("xtermLoadFont #%d "name" %s%s\n", \
    	   fontnum, \
	   (warn[index] == fwResource) ? "*" : " ", \
	   NonNull(myfonts.field)));</cpp:define>
    <expr_stmt><expr><call><name>DbgResource</name><argument_list>(<argument><expr>"normal"</expr></argument>, <argument><expr><name>f_n</name></expr></argument>, <argument><expr><name>fNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DbgResource</name><argument_list>(<argument><expr>"bold  "</expr></argument>, <argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <expr_stmt><expr><call><name>DbgResource</name><argument_list>(<argument><expr>"wide  "</expr></argument>, <argument><expr><name>f_w</name></expr></argument>, <argument><expr><name>fWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DbgResource</name><argument_list>(<argument><expr>"w/bold"</expr></argument>, <argument><expr><name>f_wb</name></expr></argument>, <argument><expr><name>fWBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr>!<call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_n</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>warn</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<goto>goto <name>bad</name>;</goto></then></if>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>check_fontname</name><argument_list>(<argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name><name>warn</name><index>[<expr><name>fBold</name></expr>]</index></name> = <name>fwAlways</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> = <call><name>get_font_name_props</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr><name>normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fp</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>myfonts</name>.<name>f_b</name> = <call><name>bold_font_name</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>fp</name>-&gt;<name>average_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr>!<call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr><name>fwAlways</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>myfonts</name>.<name>f_b</name> = <call><name>bold_font_name</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr><name>fwAlways</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...derived bold %s\n", <call><name>NonNull</name><argument_list>(<argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>fp</name> == 0 || <name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...cannot load a matching bold font\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><call><name>same_font_size</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call>
		   &amp;&amp; <call><name>got_bold_font</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...got a matching bold font\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>cache_menu_font_name</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>fontnum</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>xtermCloseFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name> = <name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...did not get a matching bold font\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>warn</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>warn</name><index>[<expr><name>fBold</name></expr>]</index></name> = <name>fwAlways</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...cannot load bold font %s\n", <call><name>NonNull</name><argument_list>(<argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>cache_menu_font_name</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>fontnum</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <comment type="block">/*
     * If there is no widefont specified, fake it by doubling AVERAGE_WIDTH
     * of normal fonts XLFD, and asking for it.  This plucks out 18x18ja
     * and 12x13ja as the corresponding fonts for 9x18 and 6x13.
     */</comment>
    <macro><name>if_OPT_WIDE_CHARS</name><argument_list>(<argument>screen</argument>, <argument>{
	Bool derived;
	char bold[MAX_FONTNAME];

	if (check_fontname(myfonts.f_w)) {
	    cache_menu_font_name(screen, fontnum, fWide, myfonts.f_w);
	} else if (!is_double_width_font(fnts[fNorm].fs)) {
	    fp = get_font_name_props(screen-&gt;display, fnts[fNorm].fs, normal);
	    if (fp != 0) {
		myfonts.f_w = wide_font_name(fp);
		warn[fWide] = fwAlways;
		TRACE(("...derived wide %s\n", NonNull(myfonts.f_w)));
		cache_menu_font_name(screen, fontnum, fWide, myfonts.f_w);
	    }
	}

	if (check_fontname(myfonts.f_w)) {
	    (void) xtermOpenFont(xw, myfonts.f_w, &amp;fnts[fWide], warn[fWide], False);
	} else {
	    xtermCopyFontInfo(&amp;fnts[fWide], &amp;fnts[fNorm]);
	    warn[fWide] = fwAlways;
	}

	derived = False;
	if (!check_fontname(myfonts.f_wb)) {
	    fp = get_font_name_props(screen-&gt;display, fnts[fBold].fs, bold);
	    if (fp != 0) {
		myfonts.f_wb = widebold_font_name(fp);
		warn[fWBold] = fwAlways;
		derived = True;
	    }
	}

	if (check_fontname(myfonts.f_wb)) {

	    xtermOpenFont(xw, myfonts.f_wb, &amp;fnts[fWBold], warn[fWBold], False);

	    if (derived
		&amp;&amp; !compatibleWideCounts(fnts[fWide].fs, fnts[fWBold].fs)) {
		xtermCloseFont(xw, &amp;fnts[fWBold]);
	    }
	    if (fnts[fWBold].fs == 0) {
		myfonts.f_wb = myfonts.f_w;
		warn[fWBold] = fwAlways;
		xtermCopyFontInfo(&amp;fnts[fWBold], &amp;fnts[fWide]);
		TRACE(("...cannot load wide-bold, use wide %s\n", NonNull(myfonts.f_w)));
	    } else {
		TRACE(("...%s wide/bold %s\n",
		       derived ? "derived" : "given",
		       NonNull(myfonts.f_wb)));
		cache_menu_font_name(screen, fontnum, fWBold, myfonts.f_wb);
	    }
	} else if (is_double_width_font(fnts[fBold].fs)) {
	    xtermCopyFontInfo(&amp;fnts[fWBold], &amp;fnts[fBold]);
	    warn[fWBold] = fwAlways;
	    TRACE(("...bold font is double-width, use it %s\n", NonNull(myfonts.f_b)));
	} else {
	    xtermCopyFontInfo(&amp;fnts[fWBold], &amp;fnts[fWide]);
	    warn[fWBold] = fwAlways;
	    TRACE(("...cannot load wide bold font, use wide %s\n", NonNull(myfonts.f_w)));
	}

	if (EmptyFont(fnts[fWBold].fs))
	    goto bad;		<comment type="block">/* can't use a 0-sized font */</comment>
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block">/*
     * Most of the time this call to load the font will succeed, even if
     * there is no wide font :  the X server doubles the width of the
     * normal font, or similar.
     *
     * But if it did fail for some reason, then nevermind.
     */</comment>
    <if>if <condition>(<expr><call><name>EmptyFont</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<goto>goto <name>bad</name>;</goto></then></if>		<comment type="block">/* can't use a 0-sized font */</comment>

    <if>if <condition>(<expr>!<call><name>same_font_size</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call>
	&amp;&amp; (<call><name>is_fixed_font</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>is_fixed_font</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...ignoring mismatched normal/bold fonts\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <macro><name>if_OPT_WIDE_CHARS</name><argument_list>(<argument>screen</argument>, <argument>{
	if (fnts[fWide].fs != 0
	    &amp;&amp; fnts[fWBold].fs != 0
	    &amp;&amp; !same_font_size(xw, fnts[fWide].fs, fnts[fWBold].fs)
	    &amp;&amp; (is_fixed_font(fnts[fWide].fs) &amp;&amp; is_fixed_font(fnts[fWBold].fs))) {
	    TRACE(("...ignoring mismatched normal/bold wide fonts\n"));
	    xtermCloseFont(xw, &amp;fnts[fWBold]);
	    xtermCopyFontInfo(&amp;fnts[fWBold], &amp;fnts[fWide]);
	}
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block">/*
     * Normal/bold fonts should be the same width.  Also, the min/max
     * values should be the same.
     */</comment>
    <if>if <condition>(<expr>!<call><name>is_fixed_font</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call>
	|| !<call><name>is_fixed_font</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call>
	|| <name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name> != <name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Proportional font! normal %d/%d, bold %d/%d\n",
	       <name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name>-&gt;<name>min_bounds</name>.<name>width</name>,
	       <name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name>,
	       <name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name>-&gt;<name>min_bounds</name>.<name>width</name>,
	       <name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>proportional</name> = <name>True</name></expr>;</expr_stmt>
    }</block></then></if>

    <macro><name>if_OPT_WIDE_CHARS</name><argument_list>(<argument>screen</argument>, <argument>{
	if (fnts[fWide].fs != 0
	    &amp;&amp; fnts[fWBold].fs != 0
	    &amp;&amp; (!is_fixed_font(fnts[fWide].fs)
		|| !is_fixed_font(fnts[fWBold].fs)
		|| fnts[fWide].fs-&gt;max_bounds.width != fnts[fWBold].fs-&gt;max_bounds.width)) {
	    TRACE(("Proportional font! wide %d/%d, wide bold %d/%d\n",
		   fnts[fWide].fs-&gt;min_bounds.width,
		   fnts[fWide].fs-&gt;max_bounds.width,
		   fnts[fWBold].fs-&gt;min_bounds.width,
		   fnts[fWBold].fs-&gt;max_bounds.width));
	    proportional = True;
	}
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block">/* TODO : enforce that the width of the wide font is 2* the width
       of the narrow font */</comment>

    <comment type="block">/*
     * If we're switching fonts, free the old ones.  Otherwise we'll leak
     * the memory that is associated with the old fonts.  The
     * XLoadQueryFont call allocates a new XFontStruct.
     */</comment>
    <expr_stmt><expr><call><name>xtermCloseFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>fnts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>)</expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>)</expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fWide</name></expr>]</index></name>)</expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fWide</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>fnts</name><index>[<expr><name>fWBold</name></expr>]</index></name>.<name>fs</name> == <name>NULL</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fWBold</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fWide</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>xtermCopyFontInfo</name><argument_list>(<argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fWBold</name></expr>]</index></name>)</expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fWBold</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>new_normal</name> = <call><name>getXtermForeground</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>flags</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>cur_foreground</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>new_revers</name> = <call><name>getXtermBackground</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>flags</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>cur_background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNorm</name></expr></argument>, <argument><expr><name>new_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNorm</name></expr></argument>, <argument><expr><name>new_revers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNorm</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>copyCgs</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcBold</name></expr></argument>, <argument><expr><name>gcNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcBold</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNormReverse</name></expr></argument>, <argument><expr><name>new_revers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNormReverse</name></expr></argument>, <argument><expr><name>new_normal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcNormReverse</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>copyCgs</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcBoldReverse</name></expr></argument>, <argument><expr><name>gcNormReverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>gcBoldReverse</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>if_OPT_WIDE_CHARS</name><argument_list>(<argument>screen</argument>, <argument>{
	if (screen-&gt;fnts[fWide].fs != 0
	    &amp;&amp; screen-&gt;fnts[fWBold].fs != 0) {
	    setCgsFore(xw, win, gcWide, new_normal);
	    setCgsBack(xw, win, gcWide, new_revers);
	    setCgsFont(xw, win, gcWide, &amp;(screen-&gt;fnts[fWide]));

	    copyCgs(xw, win, gcWBold, gcWide);
	    setCgsFont(xw, win, gcWBold, &amp;(screen-&gt;fnts[fWBold]));

	    setCgsFore(xw, win, gcWideReverse, new_revers);
	    setCgsBack(xw, win, gcWideReverse, new_normal);
	    setCgsFont(xw, win, gcWideReverse, &amp;(screen-&gt;fnts[fWide]));

	    copyCgs(xw, win, gcWBoldReverse, gcWideReverse);
	    setCgsFont(xw, win, gcWBoldReverse, &amp;(screen-&gt;fnts[fWBold]));
	}
    }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
    <expr_stmt><expr><name>screen</name>-&gt;<name>allow_packing</name> = <name>proportional</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setupPackedFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>screen</name>-&gt;<name>fnt_prop</name> = <call>(<name>Boolean</name>) <argument_list>(<argument><expr><name>proportional</name> &amp;&amp; !(<name>screen</name>-&gt;<name>force_packed</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>fnt_boxes</name> = <name>True</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
    <comment type="block">/*
     * Xterm uses character positions 1-31 of a font for the line-drawing
     * characters.  Check that they are all present.  The null character
     * (0) is special, and is not used.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
    <if>if <condition>(<expr><call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<comment type="block">/*
	 * FIXME: we shouldn't even be here if we're using Xft.
	 */</comment>
	<expr_stmt><expr><name>screen</name>-&gt;<name>fnt_boxes</name> = <name>False</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("assume Xft missing line-drawing chars\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
	<decl_stmt><decl><type><name>unsigned</name></type> <name>ch</name></decl>;</decl_stmt>

	<for>for (<init><expr><name>ch</name> = 1</expr>;</init> <condition><expr><name>ch</name> &lt; 32</expr>;</condition> <incr><expr><name>ch</name>++</expr></incr>) <block>{
	    <decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> =<init> <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>utf8_mode</name> || <name>screen</name>-&gt;<name>unicode_font</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>n</name> = <call><name>dec2ucs</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>n</name> == <name>UCS_REPL</name></expr>)</condition><then>
		    <continue>continue;</continue></then></if>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><call><name>IsXtermMissingChar</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("missing normal char #%d\n", <name>n</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>screen</name>-&gt;<name>fnt_boxes</name> = <name>False</name></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	    <if>if <condition>(<expr><call><name>IsXtermMissingChar</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("missing bold char #%d\n", <name>n</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>screen</name>-&gt;<name>fnt_boxes</name> = <name>False</name></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	}</block></for>
    }</block></else></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Will %suse internal line-drawing characters\n",
	   <name>screen</name>-&gt;<name>fnt_boxes</name> ? "not " : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name>always_bold_mode</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>enbolden</name> = <name>screen</name>-&gt;<name>bold_mode</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>screen</name>-&gt;<name>enbolden</name> = <name>screen</name>-&gt;<name>bold_mode</name>
	    &amp;&amp; ((<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name> == <name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name>)
		|| <call><name>same_font_name</name><argument_list>(<argument><expr><name>normal</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_b</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Will %suse 1-pixel offset/overstrike to simulate bold\n",
	   <name>screen</name>-&gt;<name>enbolden</name> ? "" : "not ")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>set_menu_font</name><argument_list>(<argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>menu_font_number</name> = <name>fontnum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set_menu_font</name><argument_list>(<argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tmpname</name></expr>)</condition><then> <block>{		<comment type="block">/* if setting escape or sel */</comment>
	<if>if <condition>(<expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>(<name>void</name> *) <name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call> = <name>tmpname</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fontnum</name> == <name>fontMenu_fontescape</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>SetItemSensitivity</name><argument_list>(<argument><expr><name><name>fontMenuEntries</name><index>[<expr><name>fontMenu_fontescape</name></expr>]</index></name>.<name>widget</name></expr></argument>,
			       <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SHIFT_FONTS</name></expr></cpp:if>
	<expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>fontnum</name></expr>]</index></name> = <call><name>FontSize</name><argument_list>(<argument><expr><name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
    <expr_stmt><expr><call><name>set_cursor_gcs</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermUpdateFontInfo</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>doresize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Success Cgs - xtermLoadFont\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>

  <label><name>bad</name>:</label>
    <if>if <condition>(<expr><name>tmpname</name></expr>)</condition><then>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmpname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>releaseWindowGCs</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>xtermCloseFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>fnts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Fail Cgs - xtermLoadFont\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LOAD_VTFONTS</name> || <name>OPT_WIDE_CHARS</name></expr></cpp:if>
<comment type="block">/*
 * Collect font-names that we can modify with the load-vt-fonts() action.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>VTFontNames</name></type> <name>default_font</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name><name>menu_font_names</name><index>[<expr><name>fontMenu_lastBuiltin</name> + 1</expr>]</index><index>[<expr><name>fMAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SubResourceRec</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>MERGE_SUBFONT</name>(src,dst,name) \
	if (dst.name == 0) { \
	    TRACE(("MERGE_SUBFONT " #dst "." #name " merge %s\n", NonNull(src.name))); \
	    dst.name = src.name; \
	} else { \
	    TRACE(("MERGE_SUBFONT " #dst "." #name " found %s\n", NonNull(dst.name))); \
	}</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>COPY_MENU_FONTS</name>(src,dst) \
	TRACE(("COPY_MENU_FONTS " #src " to " #dst "\n")); \
	for (n = fontMenu_default; n &lt;= fontMenu_lastBuiltin; ++n) { \
	    for (m = 0; m &lt; fMAX; ++m) { \
		dst.menu_font_names[n][m] = src.menu_font_names[n][m]; \
	    } \
	}</cpp:define>

<comment type="block">/*
 * Load the "VT" font names from the given subresource name/class.  These
 * correspond to the VT100 resources.
 */</comment>
<function><type><name>static</name> <name>Bool</name></type>
<name>xtermLoadVTFonts</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>String</name></type> <name>myName</name></decl></param>, <param><decl><type><name>String</name></type> <name>myClass</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>Bool</name></type> <name>initialized</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>SubResourceRec</name></type> <name>original</name>, <name>referenceRec</name>, <name>subresourceRec</name></decl>;</decl_stmt>

    <comment type="block">/*
     * These are duplicates of the VT100 font resources, but with a special
     * application/classname passed in to distinguish them.
     */</comment>
    <decl_stmt><decl><type><name>static</name> <name>XtResource</name></type> <name><name>font_resources</name><index>[]</index></name> =<init>
    <expr><block>{
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont</name></expr></argument>, <argument><expr><name>XtCFont</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_n</name></expr></argument>, <argument><expr><name>DEFFONT</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNboldFont</name></expr></argument>, <argument><expr><name>XtCBoldFont</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_b</name></expr></argument>, <argument><expr><name>DEFBOLDFONT</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNwideFont</name></expr></argument>, <argument><expr><name>XtCWideFont</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_w</name></expr></argument>, <argument><expr><name>DEFWIDEFONT</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNwideBoldFont</name></expr></argument>, <argument><expr><name>XtCWideBoldFont</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_wb</name></expr></argument>, <argument><expr><name>DEFWIDEBOLDFONT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont1</name></expr></argument>, <argument><expr><name>XtCFont1</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont2</name></expr></argument>, <argument><expr><name>XtCFont2</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont3</name></expr></argument>, <argument><expr><name>XtCFont3</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont4</name></expr></argument>, <argument><expr><name>XtCFont4</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont5</name></expr></argument>, <argument><expr><name>XtCFont5</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>Sres</name><argument_list>(<argument><expr><name>XtNfont6</name></expr></argument>, <argument><expr><name>XtCFont6</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_font6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cardinal</name></type> <name>n</name>, <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>status</name> =<init> <expr><name>True</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>initialized</name></expr>)</condition><then> <block>{

	<expr_stmt><expr><name>initialized</name> = <name>True</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermLoadVTFonts saving original\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>original</name>.<name>default_font</name> = <name>xw</name>-&gt;<name>misc</name>.<name>default_font</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_MENU_FONTS</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>screen</name></expr></argument>, <argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>myName</name> == 0 || *<name>myName</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermLoadVTFonts restoring original\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name>default_font</name> = <name>original</name>.<name>default_font</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_MENU_FONTS</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <call><name>XtNumber</name><argument_list>(<argument><expr><name>original</name>.<name>menu_font_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>)
	    <expr_stmt><expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> = <name>original</name>.<call><name>MenuFontName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermLoadVTFonts(%s, %s)\n", <name>myName</name>, <name>myClass</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>subresourceRec</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>subresourceRec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XtGetSubresources</name><argument_list>(<argument><expr>(<name>Widget</name>) <name>xw</name></expr></argument>, <argument><expr>(<name>XtPointer</name>) &amp;<name>subresourceRec</name></expr></argument>,
			  <argument><expr><name>myName</name></expr></argument>, <argument><expr><name>myClass</name></expr></argument>,
			  <argument><expr><name>font_resources</name></expr></argument>,
			  <argument><expr>(<name>Cardinal</name>) <call><name>XtNumber</name><argument_list>(<argument><expr><name>font_resources</name></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>Cardinal</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr>&amp;<name>referenceRec</name></expr></argument>, <argument><expr>&amp;<name>subresourceRec</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>referenceRec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

	    <comment type="block">/*
	     * If a particular resource value was not found, use the original.
	     */</comment>
	    <expr_stmt><expr><call><name>MERGE_SUBFONT</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name></expr></argument>, <argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>MERGE_SUBFONT</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name></expr></argument>, <argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>MERGE_SUBFONT</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name></expr></argument>, <argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>MERGE_SUBFONT</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>misc</name></expr></argument>, <argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><name>default_font</name>.<name>f_wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <for>for (<init><expr><name>n</name> = <name>fontMenu_font1</name></expr>;</init> <condition><expr><name>n</name> &lt;= <name>fontMenu_lastBuiltin</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>)
		<expr_stmt><expr><call><name>MERGE_SUBFONT</name><argument_list>(<argument><expr><name>xw</name>-&gt;<name>screen</name></expr></argument>, <argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><call><name>MenuFontName</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	    <comment type="block">/*
	     * Finally, copy the subresource data to the widget.
	     */</comment>
	    <expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name>default_font</name> = <name>subresourceRec</name>.<name>default_font</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>COPY_MENU_FONTS</name><argument_list>(<argument><expr><name>subresourceRec</name></expr></argument>, <argument><expr><name>xw</name>-&gt;<name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontMenu_default</name></expr></argument>)</argument_list></call> = <name>xw</name>-&gt;<name>misc</name>.<name>default_font</name>.<name>f_n</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr>0</expr>]</index><index>[<expr><name>fBold</name></expr>]</index></name> = <name>xw</name>-&gt;<name>misc</name>.<name>default_font</name>.<name>f_b</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr>0</expr>]</index><index>[<expr><name>fWide</name></expr>]</index></name> = <name>xw</name>-&gt;<name>misc</name>.<name>default_font</name>.<name>f_w</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_names</name><index>[<expr>0</expr>]</index><index>[<expr><name>fWBold</name></expr>]</index></name> = <name>xw</name>-&gt;<name>misc</name>.<name>default_font</name>.<name>f_wb</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...no resources found\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>status</name> = <name>False</name></expr>;</expr_stmt>
	}</block></else></if>
    }</block></else></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<function><type><name>static</name> <name>Bool</name></type>
<name>isWideFont</name><parameter_list>(<param><decl><type><name>XFontStruct</name> *</type> <name>fp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>nullOk</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>(<name>void</name>) <name>tag</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>okFont</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> =<init> <expr><call><name>countGlyphs</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("isWideFont(%s) found %d cells\n", <name>tag</name>, <name>count</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = (<name>count</name> &gt; 256) ? <name>True</name> : <name>False</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>result</name> = <name>nullOk</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * If the current fonts are not wide, load the UTF8 fonts.
 *
 * Called during initialization (for wide-character mode), the fonts have not
 * been setup, so we pass nullOk=True to isWideFont().
 *
 * Called after initialization, e.g., in response to the UTF-8 menu entry
 * (starting from narrow character mode), it checks if the fonts are not wide.
 */</comment>
<function><type><name>Bool</name></type>
<name>xtermLoadWideFonts</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>nullOk</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>EmptyFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fWide</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>result</name> = (<call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"normal"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>
		  &amp;&amp; <call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"bold"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><name>result</name> = (<call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fWide</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"wide"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>
		  &amp;&amp; <call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fWBold</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"wide-bold"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
	<if>if <condition>(<expr><name>result</name> &amp;&amp; !<name>screen</name>-&gt;<name>utf8_latin1</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>result</name> = (<call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"normal"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>
		      &amp;&amp; <call><name>isWideFont</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr>"bold"</expr></argument>, <argument><expr><name>nullOk</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
	}</block></then></if>
    }</block></else></if>
    <if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("current fonts are not all wide%s\n", <name>nullOk</name> ? " nullOk" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = <call><name>xtermLoadVTFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>"utf8Fonts"</expr></argument>, <argument><expr>"Utf8Fonts"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermLoadWideFonts:%d\n", <name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_WIDE_CHARS */</comment>

<comment type="block">/*
 * Restore the default fonts, i.e., if we had switched to wide-fonts.
 */</comment>
<function><type><name>Bool</name></type>
<name>xtermLoadDefaultFonts</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> = <call><name>xtermLoadVTFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermLoadDefaultFonts:%d\n", <name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_LOAD_VTFONTS || OPT_WIDE_CHARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_LOAD_VTFONTS</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>HandleLoadVTFonts</name><parameter_list>(<param><decl><type><name>Widget</name></type> <name>w</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>empty</name><index>[]</index></name> =<init> <expr>""</expr></init></decl>;</decl_stmt>	<comment type="block">/* appease strict compilers */</comment>

    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>xw</name> = <call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>myName</name> =<init> <expr>(<name>char</name> *) ((*<name>param_count</name> &gt; 0) ? <name><name>params</name><index>[<expr>0</expr>]</index></name> : <name>empty</name>)</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>convert</name> =<init> <expr>(<name>char</name> *) ((*<name>param_count</name> &gt; 1) ? <name><name>params</name><index>[<expr>1</expr>]</index></name> : <name>myName</name>)</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> *</type><name>myClass</name> =<init> <expr>(<name>char</name> *) <call><name>MyStackAlloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>convert</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("HandleLoadVTFonts(%d)\n", *<name>param_count</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>myClass</name></expr></argument>, <argument><expr><name>convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr>*<name>param_count</name> == 1</expr>)</condition><then>
	    <expr_stmt><expr><name><name>myClass</name><index>[<expr>0</expr>]</index></name> = <call><name>x_toupper</name><argument_list>(<argument><expr><name><name>myClass</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if>if <condition>(<expr><call><name>xtermLoadVTFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myName</name></expr></argument>, <argument><expr><name>myClass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <comment type="block">/*
	     * When switching fonts, try to preserve the font-menu selection, since
	     * it is less surprising to do that (if the font-switching can be
	     * undone) than to switch to "Default".
	     */</comment>
	    <decl_stmt><decl><type><name>int</name></type> <name>font_number</name> =<init> <expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></init></decl>;</decl_stmt>
	    <if>if <condition>(<expr><name>font_number</name> &gt; <name>fontMenu_lastBuiltin</name></expr>)</condition><then>
		<expr_stmt><expr><name>font_number</name> = <name>fontMenu_lastBuiltin</name></expr>;</expr_stmt></then></if>
	    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>)
		<expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
	    <expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>font_number</name></expr></argument>, <argument><expr><name>True</name></expr></argument>,
		      <argument><expr>((<name>font_number</name> == <name>fontMenu_default</name>)
		       ? &amp;(<name>xw</name>-&gt;<name>misc</name>.<name>default_font</name>)
		       : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name>MyStackFree</name><argument_list>(<argument><expr><name>myClass</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_LOAD_VTFONTS */</comment>

<comment type="block">/*
 * Set the limits for the box that outlines the cursor.
 */</comment>
<function><type><name>void</name></type>
<name>xtermSetCursorBox</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>static</name> <name>XPoint</name></type> <name><name>VTbox</name><index>[<expr><name>NBOX</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XPoint</name> *</type><name>vp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fw</name> =<init> <expr><call><name>FontWidth</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fh</name> =<init> <expr><call><name>FontHeight</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>hh</name> =<init> <expr><name>screen</name>-&gt;<name>cursor_underline</name> ? 1 : <name>fh</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>vp</name> = &amp;<name><name>VTbox</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>vp</name>++)-&gt;<name>x</name> = (<name>short</name>) <name>fw</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>vp</name>++)-&gt;<name>y</name> = (<name>short</name>) <name>hh</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>vp</name>++)-&gt;<name>x</name> = (<name>short</name>) -<name>fw</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vp</name>-&gt;<name>y</name> = (<name>short</name>) -<name>hh</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>screen</name>-&gt;<name>box</name> = <name>VTbox</name></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>CACHE_XFT</name>(dst,src) if (src != 0) {\
	    checkXft(xw, &amp;(dst[fontnum]), src);\
	    TRACE(("Xft metrics %s[%d] = %d (%d,%d) advance %d, actual %d%s\n",\
		#dst,\
	    	fontnum,\
		src-&gt;height,\
		src-&gt;ascent,\
		src-&gt;descent,\
		src-&gt;max_advance_width,\
		dst[fontnum].map.min_width,\
		dst[fontnum].map.mixed ? " mixed" : ""));\
	}</cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_TRACE</name> &gt; 1</expr></cpp:if>
<function><type><name>static</name> <name>FcChar32</name></type>
<name>xtermXftFirstChar</name><parameter_list>(<param><decl><type><name>XftFont</name> *</type> <name>xft</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FcChar32</name></type> <name><name>map</name><index>[<expr><name>FC_CHARSET_MAP_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>first</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>first</name> = <call><name>FcCharSetFirstPage</name><argument_list>(<argument><expr><name>xft</name>-&gt;<name>charset</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>FC_CHARSET_MAP_SIZE</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
	<if>if <condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>FcChar32</name></type> <name>bits</name> =<init> <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>first</name> += <name>i</name> * 32</expr>;</expr_stmt>
	    <while>while <condition>(<expr>!(<name>bits</name> &amp; 0x1)</expr>)</condition> <block>{
		<expr_stmt><expr><name>bits</name> &gt;&gt;= 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>first</name>++</expr>;</expr_stmt>
	    }</block></while>
	    <break>break;</break>
	}</block></then></if></for>
    <return>return <expr><name>first</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>FcChar32</name></type>
<name>xtermXftLastChar</name><parameter_list>(<param><decl><type><name>XftFont</name> *</type> <name>xft</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>this</name>, <name>last</name>, <name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name><name>map</name><index>[<expr><name>FC_CHARSET_MAP_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>last</name> = <call><name>FcCharSetFirstPage</name><argument_list>(<argument><expr><name>xft</name>-&gt;<name>charset</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>(<name>this</name> = <call><name>FcCharSetNextPage</name><argument_list>(<argument><expr><name>xft</name>-&gt;<name>charset</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr>&amp;<name>next</name></expr></argument>)</argument_list></call>) != <name>FC_CHARSET_DONE</name></expr>)</condition>
	<expr_stmt><expr><name>last</name> = <name>this</name></expr>;</expr_stmt></while>
    <expr_stmt><expr><name>last</name> &amp;= ~0xff</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = <name>FC_CHARSET_MAP_SIZE</name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
	<if>if <condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>FcChar32</name></type> <name>bits</name> =<init> <expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>last</name> += <name>i</name> * 32 + 31</expr>;</expr_stmt>
	    <while>while <condition>(<expr>!(<name>bits</name> &amp; 0x80000000)</expr>)</condition> <block>{
		<expr_stmt><expr><name>last</name>--</expr>;</expr_stmt>
		<expr_stmt><expr><name>bits</name> &lt;&lt;= 1</expr>;</expr_stmt>
	    }</block></while>
	    <break>break;</break>
	}</block></then></if></for>
    <return>return <expr>(<name>long</name>) <name>last</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>void</name></type>
<name>dumpXft</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XTermXftFonts</name> *</type> <name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XftFont</name> *</type><name>xft</name> =<init> <expr><name>data</name>-&gt;<name>font</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VTwin</name> *</type><name>win</name> =<init> <expr><call><name>WhichVWin</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FcChar32</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>first</name> =<init> <expr><call><name>xtermXftFirstChar</name><argument_list>(<argument><expr><name>xft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>last</name> =<init> <expr><call><name>xtermXftLastChar</name><argument_list>(<argument><expr><name>xft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>outside</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("dumpXft {{\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("   data range %#6x..%#6x\n", <name>first</name>, <name>last</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>c</name> = <name>first</name></expr>;</init> <condition><expr><name>c</name> &lt;= <name>last</name></expr>;</condition> <incr><expr>++<name>c</name></expr></incr>) <block>{
	<if>if <condition>(<expr><call><name>FcCharSetHasChar</name><argument_list>(<argument><expr><name>xft</name>-&gt;<name>charset</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>width</name> =<init> <expr><call><name>my_wcwidth</name><argument_list>(<argument><expr>(<name>int</name>) <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>XGlyphInfo</name></type> <name>extents</name></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name>XftTextExtents32</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xft</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("%#6x  %2d  %.1f\n", <name>c</name>, <name>width</name>,
		   ((<name>double</name>) <name>extents</name>.<name>width</name>) / <name>win</name>-&gt;<name>f_width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>extents</name>.<name>width</name> &gt; <name>win</name>-&gt;<name>f_width</name></expr>)</condition><then>
		<expr_stmt><expr>++<name>outside</name></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("}} %u total, %u outside\n", <name>count</name>, <name>outside</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DUMP_XFT</name>(xw, data) dumpXft(xw, data)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DUMP_XFT</name>(xw, data)</cpp:define>	<comment type="block">/* nothing */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>static</name> <name>void</name></type>
<name>checkXft</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XTermXftFonts</name> *</type> <name>data</name></decl></param>, <param><decl><type><name>XftFont</name> *</type> <name>xft</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FcChar32</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Dimension</name></type> <name>width</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>data</name>-&gt;<name>font</name> = <name>xft</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name>-&gt;<name>map</name>.<name>min_width</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name>-&gt;<name>map</name>.<name>max_width</name> = (<name>Dimension</name>) <name>xft</name>-&gt;<name>max_advance_width</name></expr>;</expr_stmt>

    <comment type="block">/*
     * For each ASCII or ISO-8859-1 printable code, ask what its width is.
     * Given the maximum width for those, we have a reasonable estimate of
     * the single-column width.
     *
     * Ignore control characters - their extent information is misleading.
     */</comment>
    <for>for (<init><expr><name>c</name> = 32</expr>;</init> <condition><expr><name>c</name> &lt; 256</expr>;</condition> <incr><expr>++<name>c</name></expr></incr>) <block>{
	<if>if <condition>(<expr><name>c</name> &gt;= 127 &amp;&amp; <name>c</name> &lt;= 159</expr>)</condition><then>
	    <continue>continue;</continue></then></if>
	<if>if <condition>(<expr><call><name>FcCharSetHasChar</name><argument_list>(<argument><expr><name>xft</name>-&gt;<name>charset</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>XGlyphInfo</name></type> <name>extents</name></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name>XftTextExtents32</name><argument_list>(<argument><expr><call><name>XtDisplay</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xft</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>extents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>width</name> &lt; <name>extents</name>.<name>width</name> &amp;&amp; <name>extents</name>.<name>width</name> &lt;= <name>data</name>-&gt;<name>map</name>.<name>max_width</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>width</name> = <name>extents</name>.<name>width</name></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>data</name>-&gt;<name>map</name>.<name>min_width</name> = <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name>-&gt;<name>map</name>.<name>mixed</name> = (<name>data</name>-&gt;<name>map</name>.<name>max_width</name> &gt;= (<name>data</name>-&gt;<name>map</name>.<name>min_width</name> + 1))</expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>XftFont</name> *</type>
<name>xtermOpenXft</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>XftPattern</name> *</type> <name>pat</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Display</name> *</type><name>dpy</name> =<init> <expr><name>screen</name>-&gt;<name>display</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XftPattern</name> *</type><name>match</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XftResult</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XftFont</name> *</type><name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>pat</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>match</name> = <call><name>XftFontMatch</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><call><name>DefaultScreen</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pat</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>match</name> != 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>result</name> = <call><name>XftFontOpenPattern</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>result</name> != 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...matched %s font\n", <name>tag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...could did not open %s font\n", <name>tag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XftPatternDestroy</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>fontWarnings</name> &gt;= <name>fwAlways</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("OOPS cannot open %s font \"%s\"\n", <name>tag</name>, <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot open %s font \"%s\"\n"</expr></argument>,
			    <argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	    }</block></else></if>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...did not match %s font\n", <name>tag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>fontWarnings</name> &gt;= <name>fwResource</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("OOPS: cannot match %s font \"%s\"\n", <name>tag</name>, <name>name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s: cannot match %s font \"%s\"\n"</expr></argument>,
			<argument><expr><name>ProgramName</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></else></if>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SHIFT_FONTS</name></expr></cpp:if>
<comment type="block">/*
 * Don't make a dependency on the math library for a single function.
 * (Newton Raphson).
 */</comment>
<function><type><name>static</name> <name>double</name></type>
<name>mySquareRoot</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> &gt; 0.0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>older</name> =<init> <expr><name>value</name></expr></init></decl>;</decl_stmt>
	<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; 10</expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
	    <decl_stmt><decl><type><name>double</name></type> <name>delta</name> =<init> <expr>(<name>older</name> * <name>older</name> - <name>value</name>) / (2.0 * <name>older</name>)</expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>double</name></type> <name>newer</name> =<init> <expr><name>older</name> - <name>delta</name></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><name>older</name> = <name>newer</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>result</name> = <name>newer</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>delta</name> &gt; -0.001 &amp;&amp; <name>delta</name> &lt; 0.001</expr>)</condition><then>
		<break>break;</break></then></if>
	}</block></for>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Given the Xft font metrics, determine the actual font size.  This is used
 * for each font to ensure that normal, bold and italic fonts follow the same
 * rule.
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>setRenderFontsize</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>VTwin</name> *</type> <name>win</name></decl></param>, <param><decl><type><name>XftFont</name> *</type> <name>font</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>font</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>width</name>, <name>height</name>, <name>ascent</name>, <name>descent</name></decl>;</decl_stmt>

	<expr_stmt><expr>(<name>void</name>) <name>screen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>width</name> = <name>font</name>-&gt;<name>max_advance_width</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>height</name> = <name>font</name>-&gt;<name>height</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ascent</name> = <name>font</name>-&gt;<name>ascent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>descent</name> = <name>font</name>-&gt;<name>descent</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>height</name> &lt; <name>ascent</name> + <name>descent</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...increase height from %d\n", <name>height</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>height</name> = <name>ascent</name> + <name>descent</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>is_double_width_font_xft</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...reduced width from %d\n", <name>width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>width</name> &gt;&gt;= 1</expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>tag</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_width</name> = <name>width</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_height</name> = <name>height</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_ascent</name> = <name>ascent</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_descent</name> = <name>descent</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setRenderFontsize result %dx%d (%d+%d)\n",
		   <name>width</name>, <name>height</name>, <name>ascent</name>, <name>descent</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <if>if <condition>(<expr><name>win</name>-&gt;<name>f_width</name> &lt; <name>width</name> ||
		   <name>win</name>-&gt;<name>f_height</name> &lt; <name>height</name> ||
		   <name>win</name>-&gt;<name>f_ascent</name> &lt; <name>ascent</name> ||
		   <name>win</name>-&gt;<name>f_descent</name> &lt; <name>descent</name></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setRenderFontsize %s changed %dx%d (%d+%d) to %dx%d (%d+%d)\n",
		   <name>tag</name>,
		   <name>win</name>-&gt;<name>f_width</name>, <name>win</name>-&gt;<name>f_height</name>, <name>win</name>-&gt;<name>f_ascent</name>, <name>win</name>-&gt;<name>f_descent</name>,
		   <name>width</name>, <name>height</name>, <name>ascent</name>, <name>descent</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt><expr><name>win</name>-&gt;<name>f_width</name> = <name>width</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_height</name> = <name>height</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_ascent</name> = <name>ascent</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_descent</name> = <name>descent</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setRenderFontsize %s unchanged\n", <name>tag</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>static</name> <name>void</name></type>
<name>checkFontInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>value</name> == 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
		<argument><expr>"Selected font has no non-zero %s for ISO-8859-1 encoding\n"</expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<function><type><name>void</name></type>
<name>xtermCloseXft</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>XTermXftFonts</name> *</type> <name>pub</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>pub</name>-&gt;<name>font</name> != 0</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XftFontClose</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>pub</name>-&gt;<name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pub</name>-&gt;<name>font</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Get the faceName/faceDoublesize resource setting.  Strip off "xft:", which
 * is not recognized by XftParseName().
 */</comment>
<function><type><name>char</name> *</type>
<name>getFaceName</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>Bool</name> <name>wideName</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERWIDE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> =<init> <expr>(<name>wideName</name>
		    ? <name>xw</name>-&gt;<name>misc</name>.<name>face_wide_name</name>
		    : <name>xw</name>-&gt;<name>misc</name>.<name>face_name</name>)</expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> =<init> <expr><name>xw</name>-&gt;<name>misc</name>.<name>face_name</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr>!<call><name>IsEmpty</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"xft:"</expr></argument>, <argument><expr>(<name>size_t</name>) 4</expr></argument>)</argument_list></call></expr>)</condition><then>
	<expr_stmt><expr><name>result</name> += 4</expr>;</expr_stmt></then></if>
    <return>return <expr><call><name>x_nonempty</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * If we change the faceName, we'll have to re-acquire all of the fonts that
 * are derived from it.
 */</comment>
<function><type><name>void</name></type>
<name>setFaceName</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name>face_name</name> = <call><name>x_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
	<expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> = -1.0</expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderFontNorm</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderFontBold</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderFontBold</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERWIDE</name></expr></cpp:if>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderWideNorm</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderWideBold</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xtermCloseXft</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderWideItal</name><index>[<expr><name>n</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></for>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Compute useful values for the font/window sizes
 */</comment>
<function><type><name>void</name></type>
<name>xtermComputeFontInfo</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>,
		     <param><decl><type><name>VTwin</name> *</type> <name>win</name></decl></param>,
		     <param><decl><type><name>XFontStruct</name> *</type> <name>font</name></decl></param>,
		     <param><decl><type><name>int</name></type> <name>sbwidth</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name>, <name>width</name>, <name>height</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
    <comment type="block">/*
     * xterm contains a lot of references to fonts, assuming they are fixed
     * size.  This chunk of code overrides the actual font-selection (see
     * drawXtermText()), if the user has selected render-font.  All of the
     * font-loading for fixed-fonts still goes on whether or not this chunk
     * overrides it.
     */</comment>
    <if>if <condition>(<expr><call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>char</name> *</type><name>face_name</name> =<init> <expr><call><name>getFaceName</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fontnum</name> =<init> <expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>norm</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderFontNorm</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>bold</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderFontBold</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>ital</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderFontItal</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERWIDE</name></expr></cpp:if>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>wnorm</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderWideNorm</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>wbold</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderWideBold</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XftFont</name> *</type><name>wital</name> =<init> <expr><name>screen</name>-&gt;<name><name>renderWideItal</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>font</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if>if <condition>(<expr><name>norm</name> == 0 &amp;&amp; <name>face_name</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>XftPattern</name> *</type><name>pat</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>double</name></type> <name>face_size</name> =<init> <expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>fontnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermComputeFontInfo norm(face %s, size %f)\n",
		   <name>face_name</name>,
		   <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>fontnum</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if>if <condition>(<expr><name>face_size</name> &lt;= 0.0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SHIFT_FONTS</name></expr></cpp:if>
		<comment type="block">/*
		 * If the user is switching font-sizes, make it follow by
		 * default the same ratios to the default as the fixed fonts
		 * would, for easy comparison.  There will be some differences
		 * since the fixed fonts have a variety of height/width ratios,
		 * but this is simpler than adding another resource value - and
		 * as noted above, the data for the fixed fonts are available.
		 */</comment>
		<expr_stmt><expr><call><name>lookupOneFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lookupOneFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>fontnum</name> == <name>fontMenu_default</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>face_size</name> = 14.0</expr>;</expr_stmt>
		}</block></then> <else>else <block>{
		    <decl_stmt><decl><type><name>double</name></type> <name>ratio</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>long</name></type> <name>num</name> =<init> <expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>fontnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>long</name></type> <name>den</name> =<init> <expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

		    <if>if <condition>(<expr><name>den</name> &lt;= 0</expr>)</condition><then>
			<expr_stmt><expr><name>den</name> = 1</expr>;</expr_stmt></then></if>
		    <expr_stmt><expr><name>ratio</name> = <call><name>mySquareRoot</name><argument_list>(<argument><expr>(<name>double</name>) <name>num</name> / (<name>double</name>) <name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt><expr><name>face_size</name> = (<name>ratio</name> * <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr>0</expr>]</index></name>)</expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("scaled using %3ld/%ld = %.2f -&gt; %f\n",
			   <name>num</name>, <name>den</name>, <name>ratio</name>, <name>face_size</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<switch>switch <condition>(<expr><name>fontnum</name></expr>)</condition> <block>{
		<case>case <expr><name>fontMenu_font1</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 8.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case><case>case <expr><name>fontMenu_font2</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 10.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case><case>case <expr><name>fontMenu_font3</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 12.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case><default>default:
		    <expr_stmt><expr><name>face_size</name> = 14.0</expr>;</expr_stmt>
		    <break>break;</break>
		</default><case>case <expr><name>fontMenu_font4</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 16.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case><case>case <expr><name>fontMenu_font5</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 18.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case><case>case <expr><name>fontMenu_font6</name></expr>:
		    <expr_stmt><expr><name>face_size</name> = 20.0</expr>;</expr_stmt>
		    <break>break;</break>
		</case>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>fontnum</name></expr>]</index></name> = (<name>float</name>) <name>face_size</name></expr>;</expr_stmt>
	    }</block></then></if>

	    <comment type="block">/*
	     * By observation (there is no documentation), XftPatternBuild is
	     * cumulative.  Build the bold- and italic-patterns on top of the
	     * normal pattern.
	     */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NormXftPattern</name> \
	    <name>XFT_FAMILY</name>, XftTypeString, "mono", \
	    XFT_SIZE, XftTypeDouble, face_size, \
	    XFT_SPACING, XftTypeInteger, XFT_MONO</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BoldXftPattern</name>(norm) \
	    XFT_WEIGHT, XftTypeInteger, XFT_WEIGHT_BOLD, \
	    XFT_CHAR_WIDTH, XftTypeInteger, norm-&gt;max_advance_width</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>ItalXftPattern</name>(norm) \
	    XFT_SLANT, XftTypeInteger, XFT_SLANT_ITALIC, \
	    XFT_CHAR_WIDTH, XftTypeInteger, norm-&gt;max_advance_width</cpp:define>

	    <if>if <condition>(<expr>(<name>pat</name> = <call><name>XftNameParse</name><argument_list>(<argument><expr><name>face_name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OPEN_XFT</name>(tag) xtermOpenXft(xw, face_name, pat, tag)</cpp:define>
		<expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
				<argument><expr><name>NormXftPattern</name></expr></argument>,
				<argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>norm</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"normal"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>norm</name> != 0</expr>)</condition><then> <block>{
		    <expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
				    <argument><expr><call><name>BoldXftPattern</name><argument_list>(<argument><expr><name>norm</name></expr></argument>)</argument_list></call></expr></argument>,
				    <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>bold</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"bold"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ISO_COLORS</name></expr></cpp:if>
		    <if>if <condition>(<expr><name>screen</name>-&gt;<name>italicULMode</name>
			&amp;&amp; (<name>pat</name> = <call><name>XftNameParse</name><argument_list>(<argument><expr><name>face_name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
					<argument><expr><name>NormXftPattern</name></expr></argument>,
					<argument><expr><call><name>ItalXftPattern</name><argument_list>(<argument><expr><name>norm</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ital</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"italic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_ISO_COLORS */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPEN_XFT</name></cpp:undef>

		    <comment type="block">/*
		     * FIXME:  just assume that the corresponding font has no
		     * graphics characters.
		     */</comment>
		    <if>if <condition>(<expr><name>screen</name>-&gt;<name>fnt_boxes</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>screen</name>-&gt;<name>fnt_boxes</name> = <name>False</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Xft opened - will %suse internal line-drawing characters\n",
			       <name>screen</name>-&gt;<name>fnt_boxes</name> ? "not " : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>
		}</block></then></if>

		<expr_stmt><expr><call><name>XftPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>

	    <expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderFontNorm</name></expr></argument>, <argument><expr><name>norm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderFontBold</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderFontItal</name></expr></argument>, <argument><expr><name>ital</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <comment type="block">/*
	     * See xtermXftDrawString().
	     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERWIDE</name></expr></cpp:if>
	    <if>if <condition>(<expr><name>norm</name> != 0 &amp;&amp; <name>screen</name>-&gt;<name>wide_chars</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>char_width</name> =<init> <expr><name>norm</name>-&gt;<name>max_advance_width</name> * 2</expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FC_ASPECT</name></cpp:ifdef>
		<decl_stmt><decl><type><name>double</name></type> <name>aspect</name> =<init> <expr>((<name>xw</name>-&gt;<name>misc</name>.<name>face_wide_name</name>
				  || <name>screen</name>-&gt;<name><name>renderFontNorm</name><index>[<expr><name>fontnum</name></expr>]</index></name>.<name>map</name>.<name>mixed</name>)
				 ? 1.0
				 : 2.0)</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>face_name</name> = <call><name>getFaceName</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermComputeFontInfo wide(face %s, char_width %d)\n",
		       <call><name>NonNull</name><argument_list>(<argument><expr><name>face_name</name></expr></argument>)</argument_list></call>,
		       <name>char_width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>WideXftPattern</name> \
		<name>XFT_FAMILY</name>, XftTypeString, "mono", \
		XFT_SIZE, XftTypeDouble, face_size, \
		XFT_SPACING, XftTypeInteger, XFT_MONO</cpp:define>

		<if>if <condition>(<expr><name>face_name</name> &amp;&amp; (<name>pat</name> = <call><name>XftNameParse</name><argument_list>(<argument><expr><name>face_name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OPEN_XFT</name>(tag) xtermOpenXft(xw, face_name, pat, tag)</cpp:define>
		    <expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
				    <argument><expr><name>WideXftPattern</name></expr></argument>,
				    <argument><expr><name>XFT_CHAR_WIDTH</name></expr></argument>, <argument><expr><name>XftTypeInteger</name></expr></argument>, <argument><expr><name>char_width</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FC_ASPECT</name></cpp:ifdef>
				    <argument><expr><name>FC_ASPECT</name></expr></argument>, <argument><expr><name>XftTypeDouble</name></expr></argument>, <argument><expr><name>aspect</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				    <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>wnorm</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"wide"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <if>if <condition>(<expr><name>wnorm</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
					<argument><expr><name>WideXftPattern</name></expr></argument>,
					<argument><expr><call><name>BoldXftPattern</name><argument_list>(<argument><expr><name>wnorm</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>wbold</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"wide-bold"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_ISO_COLORS</name></expr></cpp:if>
			<if>if <condition>(<expr><name>screen</name>-&gt;<name>italicULMode</name>
			    &amp;&amp; (<name>pat</name> = <call><name>XftNameParse</name><argument_list>(<argument><expr><name>face_name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><call><name>XftPatternBuild</name><argument_list>(<argument><expr><name>pat</name></expr></argument>,
					    <argument><expr><name>WideXftPattern</name></expr></argument>,
					    <argument><expr><call><name>ItalXftPattern</name><argument_list>(<argument><expr><name>wnorm</name></expr></argument>)</argument_list></call></expr></argument>,
					    <argument><expr>(<name>void</name> *) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><name>wital</name> = <call><name>OPEN_XFT</name><argument_list>(<argument><expr>"wide-italic"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OPEN_XFT</name></cpp:undef>
		    }</block></then></if>
		    <expr_stmt><expr><call><name>XftPatternDestroy</name><argument_list>(<argument><expr><name>pat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderWideNorm</name></expr></argument>, <argument><expr><name>wnorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderWideBold</name></expr></argument>, <argument><expr><name>wbold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CACHE_XFT</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>renderWideItal</name></expr></argument>, <argument><expr><name>wital</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_RENDERWIDE */</comment>
	}</block></then></if>
	<if>if <condition>(<expr><name>norm</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...no TrueType font found for number %d, disable menu entry\n", <name>fontnum</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name>render_font</name> = <name>False</name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>update_font_renderfont</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* now we will fall through into the bitmap fonts */</comment>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><call><name>setRenderFontsize</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>norm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>setRenderFontsize</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>bold</name></expr></argument>, <argument><expr>"bold"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>setRenderFontsize</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>ital</name></expr></argument>, <argument><expr>"ital"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>setupPackedFonts</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if>if <condition>(<expr><name>screen</name>-&gt;<name>force_packed</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>XTermXftFonts</name> *</type><name>use</name> =<init> <expr>&amp;(<name>screen</name>-&gt;<name><name>renderFontNorm</name><index>[<expr><name>fontnum</name></expr>]</index></name>)</expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>win</name>-&gt;<name>f_height</name> = <name>use</name>-&gt;<name>font</name>-&gt;<name>ascent</name> + <name>use</name>-&gt;<name>font</name>-&gt;<name>descent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>win</name>-&gt;<name>f_width</name> = <name>use</name>-&gt;<name>map</name>.<name>min_width</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...packed TrueType font %dx%d vs %d\n",
		       <name>win</name>-&gt;<name>f_height</name>,
		       <name>win</name>-&gt;<name>f_width</name>,
		       <name>use</name>-&gt;<name>map</name>.<name>max_width</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><call><name>DUMP_XFT</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;(<name>screen</name>-&gt;<name><name>renderFontNorm</name><index>[<expr><name>fontnum</name></expr>]</index></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
    }</block></then></if>
    <comment type="block">/*
     * Are we handling a bitmap font?
     */</comment>
    <if>if <condition>(<expr>!<call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_RENDERFONT */</comment>
    <block>{
	<if>if <condition>(<expr><call><name>is_double_width_font</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call> &amp;&amp; !(<name>screen</name>-&gt;<name>fnt_prop</name>)</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_width</name> = (<name>font</name>-&gt;<name>min_bounds</name>.<name>width</name>)</expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <expr_stmt><expr><name>win</name>-&gt;<name>f_width</name> = (<name>font</name>-&gt;<name>max_bounds</name>.<name>width</name>)</expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name>win</name>-&gt;<name>f_height</name> = (<name>font</name>-&gt;<name>ascent</name> + <name>font</name>-&gt;<name>descent</name>)</expr>;</expr_stmt>
	<expr_stmt><expr><name>win</name>-&gt;<name>f_ascent</name> = <name>font</name>-&gt;<name>ascent</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>win</name>-&gt;<name>f_descent</name> = <name>font</name>-&gt;<name>descent</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>i</name> = 2 * <name>screen</name>-&gt;<name>border</name> + <name>sbwidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> = 2 * <name>screen</name>-&gt;<name>border</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>width</name> = <call><name>MaxCols</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call> * <name>win</name>-&gt;<name>f_width</name> + <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name> = <call><name>MaxRows</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call> * <name>win</name>-&gt;<name>f_height</name> + <name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>win</name>-&gt;<name>fullwidth</name> = (<name>Dimension</name>) <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>win</name>-&gt;<name>fullheight</name> = (<name>Dimension</name>) <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>win</name>-&gt;<name>width</name> = <name>width</name> - <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>win</name>-&gt;<name>height</name> = <name>height</name> - <name>j</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermComputeFontInfo window %dx%d (full %dx%d), fontsize %dx%d (asc %d, dsc %d)\n",
	   <name>win</name>-&gt;<name>height</name>,
	   <name>win</name>-&gt;<name>width</name>,
	   <name>win</name>-&gt;<name>fullheight</name>,
	   <name>win</name>-&gt;<name>fullwidth</name>,
	   <name>win</name>-&gt;<name>f_height</name>,
	   <name>win</name>-&gt;<name>f_width</name>,
	   <name>win</name>-&gt;<name>f_ascent</name>,
	   <name>win</name>-&gt;<name>f_descent</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>checkFontInfo</name><argument_list>(<argument><expr><name>win</name>-&gt;<name>f_height</name></expr></argument>, <argument><expr>"height"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkFontInfo</name><argument_list>(<argument><expr><name>win</name>-&gt;<name>f_width</name></expr></argument>, <argument><expr>"width"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* save this information as a side-effect for double-sized characters */</comment>
<function><type><name>void</name></type>
<name>xtermSaveFontInfo</name><parameter_list>(<param><decl><type><name>TScreen</name> *</type> <name>screen</name></decl></param>, <param><decl><type><name>XFontStruct</name> *</type> <name>font</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>screen</name>-&gt;<name>fnt_wide</name> = <call>(<name>Dimension</name>) <argument_list>(<argument><expr><name>font</name>-&gt;<name>max_bounds</name>.<name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>screen</name>-&gt;<name>fnt_high</name> = <call>(<name>Dimension</name>) <argument_list>(<argument><expr><name>font</name>-&gt;<name>ascent</name> + <name>font</name>-&gt;<name>descent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermSaveFontInfo %dx%d\n", <name>screen</name>-&gt;<name>fnt_high</name>, <name>screen</name>-&gt;<name>fnt_wide</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * After loading a new font, update the structures that use its size.
 */</comment>
<function><type><name>void</name></type>
<name>xtermUpdateFontInfo</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>Bool</name></type> <name>doresize</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>scrollbar_width</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VTwin</name> *</type><name>win</name> =<init> <expr>&amp;(<name>screen</name>-&gt;<name>fullVwin</name>)</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>scrollbar_width</name> = (<name>xw</name>-&gt;<name>misc</name>.<name>scrollbar</name>
		       ? (<name>screen</name>-&gt;<name>scrollWidget</name>-&gt;<name>core</name>.<name>width</name> +
			  <call><name>BorderWidth</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>scrollWidget</name></expr></argument>)</argument_list></call>)
		       : 0)</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermComputeFontInfo</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>, <argument><expr><name>scrollbar_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>xtermSaveFontInfo</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name>.<name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>doresize</name></expr>)</condition><then> <block>{
	<if>if <condition>(<expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>xtermClear</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermUpdateFontInfo {{\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DoResizeScreen</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* set to the new natural size */</comment>
	<expr_stmt><expr><call><name>ResizeScrollBar</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Redraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("... }} xtermUpdateFontInfo\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SCROLLBAR_RIGHT</name></cpp:ifdef>
	<expr_stmt><expr><call><name>updateRightScrollbar</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if>
    <expr_stmt><expr><call><name>xtermSetCursorBox</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_BOX_CHARS</name></expr></cpp:if>

<comment type="block">/*
 * Returns true if the given character is missing from the specified font.
 */</comment>
<function><type><name>Bool</name></type>
<name>xtermMissingChar</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>ch</name></decl></param>, <param><decl><type><name>XTermFonts</name> *</type> <name>font</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>XFontStruct</name> *</type><name>fs</name> =<init> <expr><name>font</name>-&gt;<name>fs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>XCharStruct</name></type> <name>dft</name>, *<name>tmp</name> =<init> <expr>&amp;<name>dft</name></expr>, <expr>*<name>pc</name> = 0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>fs</name>-&gt;<name>max_byte1</name> == 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	<if>if <condition>(<expr><name>ch</name> &gt; 255</expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermMissingChar %#04x (row)\n", <name>ch</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <return>return <expr><name>True</name></expr>;</return>
	}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>CI_GET_CHAR_INFO_1D</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>E2A</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <else>else <block>{
	<expr_stmt><expr><call><name>CI_GET_CHAR_INFO_2D</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>HI_BYTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LO_BYTE</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <if>if <condition>(<expr>!<name>pc</name></expr>)</condition><then>
	<return>return <expr><name>False</name></expr>;</return></then></if>		<comment type="block">/* Urgh! */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if>if <condition>(<expr><call><name>CI_NONEXISTCHAR</name><argument_list>(<argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermMissingChar %#04x (!exists)\n", <name>ch</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> = <name>True</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>ch</name> &lt; 256</expr>)</condition><then> <block>{
	<expr_stmt><expr><name>font</name>-&gt;<name><name>known_missing</name><index>[<expr><name>ch</name></expr>]</index></name> = <call>(<name>Char</name>) <argument_list>(<argument><expr><name>result</name> ? 2 : 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * The grid is arbitrary, enough resolution that nothing's lost in
 * initialization.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BOX_HIGH</name> 60</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BOX_WIDE</name> 60</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>MID_HIGH</name> (BOX_HIGH/2)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MID_WIDE</name> (BOX_WIDE/2)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>CHR_WIDE</name> ((9*BOX_WIDE)/10)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>CHR_HIGH</name> ((9*BOX_HIGH)/10)</cpp:define>

<comment type="block">/*
 * ...since we'll scale the values anyway.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SCALE_X</name>(n) n = (n * (((int) font_width) - 1)) / (BOX_WIDE-1)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SCALE_Y</name>(n) n = (n * (((int) font_height) - 1)) / (BOX_HIGH-1)</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>SEG</name>(x0,y0,x1,y1) x0,y0, x1,y1</cpp:define>

<comment type="block">/*
 * Draw the given graphic character, if it is simple enough (i.e., a
 * line-drawing character).
 */</comment>
<function><type><name>void</name></type>
<name>xtermDrawBoxChar</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>,
		 <param><decl><type><name>unsigned</name></type> <name>ch</name></decl></param>,
		 <param><decl><type><name>unsigned</name></type> <name>flags</name></decl></param>,
		 <param><decl><type><name>GC</name></type> <name>gc</name></decl></param>,
		 <param><decl><type><name>int</name></type> <name>x</name></decl></param>,
		 <param><decl><type><name>int</name></type> <name>y</name></decl></param>,
		 <param><decl><type><name>int</name></type> <name>cells</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block">/* *INDENT-OFF* */</comment>
    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>short</name></type> <name><name>glyph_ht</name><index>[]</index></name> =<init> <expr><block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,	<comment type="block">/* H */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/12</expr></argument>,<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/12</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>2*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* T */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>glyph_ff</name><index>[]</index></name> = <block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* F */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/12</expr></argument>,<argument><expr>6*<name>CHR_WIDE</name>/12</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/12</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>0*<name>BOX_WIDE</name>/3</expr></argument>, <argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* F */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>, <argument><expr>8*<name>MID_HIGH</name>/6</expr></argument>,<argument><expr>10*<name>CHR_WIDE</name>/12</expr></argument>,<argument><expr>8*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>glyph_lf</name><index>[]</index></name> = <block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>9*<name>MID_HIGH</name>/12</expr></argument>)</argument_list></call></expr>,	<comment type="block">/* L */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>9*<name>MID_HIGH</name>/12</expr></argument>,<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>9*<name>MID_HIGH</name>/12</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* F */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>, <argument><expr>8*<name>MID_HIGH</name>/6</expr></argument>,<argument><expr>10*<name>CHR_WIDE</name>/12</expr></argument>,<argument><expr>8*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>glyph_nl</name><index>[]</index></name> = <block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>, <argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,		<comment type="block">/* N */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr>0</expr></argument>,		<argument><expr>5*<name>BOX_WIDE</name>/6</expr></argument>, <argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>5*<name>BOX_WIDE</name>/6</expr></argument>, <argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>, <argument><expr>5*<name>BOX_WIDE</name>/6</expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* L */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,   <argument><expr><name>CHR_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>glyph_vt</name><index>[]</index></name> = <block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>1*<name>BOX_WIDE</name>/10</expr></argument>,   <argument><expr>0</expr></argument>,		<argument><expr>5*<name>BOX_WIDE</name>/12</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,	<comment type="block">/* V */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>5*<name>BOX_WIDE</name>/12</expr></argument>,<argument><expr>5*<name>MID_HIGH</name>/6</expr></argument>, <argument><expr>5*<name>BOX_WIDE</name>/6</expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>2*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,	<comment type="block">/* T */</comment>
	<expr><call><name>SEG</name><argument_list>(<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,  <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>6*<name>BOX_WIDE</name>/10</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>plus_or_minus</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>5*<name>BOX_HIGH</name>/6</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,   <argument><expr>5*<name>BOX_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	  <argument><expr>2*<name>BOX_HIGH</name>/6</expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,   <argument><expr>4*<name>BOX_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>3*<name>BOX_HIGH</name>/6</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,   <argument><expr>3*<name>BOX_HIGH</name>/6</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>lower_right_corner</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>upper_right_corner</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>( <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>upper_left_corner</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>lower_left_corner</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_WIDE</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>cross</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>scan_line_1</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr>0</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>scan_line_3</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>BOX_HIGH</name>/4</expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name>/4</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>scan_line_7</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>( <argument><expr>0</expr></argument>,		    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>scan_line_9</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,   <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>horizontal_line</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>BOX_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>left_tee</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>right_tee</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr>0</expr></argument>,		<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>bottom_tee</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>top_tee</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>BOX_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>vertical_line</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>MID_WIDE</name></expr></argument>,	    <argument><expr>0</expr></argument>,		  <argument><expr><name>MID_WIDE</name></expr></argument>,	<argument><expr><name>BOX_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>less_than_or_equal</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>CHR_WIDE</name></expr></argument>,	    <argument><expr><name>BOX_HIGH</name>/3</expr></argument>,	  <argument><expr>0</expr></argument>,		<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr><name>CHR_WIDE</name></expr></argument>,	  <argument><expr>2*<name>BOX_HIGH</name>/3</expr></argument>,	  <argument><expr>0</expr></argument>,		<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,   <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>greater_than_or_equal</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>BOX_HIGH</name>/3</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>2*<name>BOX_HIGH</name>/3</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,   <argument><expr>3*<name>BOX_HIGH</name>/4</expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>greek_pi</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>5*<name>CHR_WIDE</name>/6</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>5*<name>CHR_WIDE</name>/6</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(<argument><expr>2*<name>CHR_WIDE</name>/6</expr></argument>,   <argument><expr><name>MID_HIGH</name></expr></argument>,	<argument><expr>2*<name>CHR_WIDE</name>/6</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr>, <expr><name><name>not_equal_to</name><index>[]</index></name> =
    <block>{
	<expr><call><name>SEG</name><argument_list>(<argument><expr>2*<name>BOX_WIDE</name>/3</expr></argument>, <argument><expr>1*<name>BOX_HIGH</name>/3</expr></argument>, <argument><expr>1*<name>BOX_WIDE</name>/3</expr></argument>,	<argument><expr><name>CHR_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	  <argument><expr>2*<name>BOX_HIGH</name>/3</expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,   <argument><expr>2*<name>BOX_HIGH</name>/3</expr></argument>)</argument_list></call></expr>,
	<expr><call><name>SEG</name><argument_list>(  <argument><expr>0</expr></argument>,	    <argument><expr><name>MID_HIGH</name></expr></argument>,	  <argument><expr><name>CHR_WIDE</name></expr></argument>,	<argument><expr><name>MID_HIGH</name></expr></argument>)</argument_list></call></expr>,
	<expr>-1</expr>
    }</block></expr></init></decl>;</decl_stmt>
    <comment type="block">/* *INDENT-ON* */</comment>

    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>short</name> *</type><name><name>lines</name><index>[]</index></name> =<init>
    <expr><block>{
	<expr>0</expr>,			<comment type="block">/* 00 (unused) */</comment>
	<expr>0</expr>,			<comment type="block">/* 01 diamond */</comment>
	<expr>0</expr>,			<comment type="block">/* 02 box */</comment>
	<expr><name>glyph_ht</name></expr>,		<comment type="block">/* 03 HT */</comment>
	<expr><name>glyph_ff</name></expr>,		<comment type="block">/* 04 FF */</comment>
	<expr>0</expr>,			<comment type="block">/* 05 CR */</comment>
	<expr><name>glyph_lf</name></expr>,		<comment type="block">/* 06 LF */</comment>
	<expr>0</expr>,			<comment type="block">/* 07 degrees (small circle) */</comment>
	<expr><name>plus_or_minus</name></expr>,		<comment type="block">/* 08 */</comment>
	<expr><name>glyph_nl</name></expr>,		<comment type="block">/* 09 */</comment>
	<expr><name>glyph_vt</name></expr>,		<comment type="block">/* 0A */</comment>
	<expr><name>lower_right_corner</name></expr>,	<comment type="block">/* 0B */</comment>
	<expr><name>upper_right_corner</name></expr>,	<comment type="block">/* 0C */</comment>
	<expr><name>upper_left_corner</name></expr>,	<comment type="block">/* 0D */</comment>
	<expr><name>lower_left_corner</name></expr>,	<comment type="block">/* 0E */</comment>
	<expr><name>cross</name></expr>,			<comment type="block">/* 0F */</comment>
	<expr><name>scan_line_1</name></expr>,		<comment type="block">/* 10 */</comment>
	<expr><name>scan_line_3</name></expr>,		<comment type="block">/* 11 */</comment>
	<expr><name>scan_line_7</name></expr>,		<comment type="block">/* 12 */</comment>
	<expr><name>scan_line_9</name></expr>,		<comment type="block">/* 13 */</comment>
	<expr><name>horizontal_line</name></expr>,	<comment type="block">/* 14 */</comment>
	<expr><name>left_tee</name></expr>,		<comment type="block">/* 15 */</comment>
	<expr><name>right_tee</name></expr>,		<comment type="block">/* 16 */</comment>
	<expr><name>bottom_tee</name></expr>,		<comment type="block">/* 17 */</comment>
	<expr><name>top_tee</name></expr>,		<comment type="block">/* 18 */</comment>
	<expr><name>vertical_line</name></expr>,		<comment type="block">/* 19 */</comment>
	<expr><name>less_than_or_equal</name></expr>,	<comment type="block">/* 1A */</comment>
	<expr><name>greater_than_or_equal</name></expr>,	<comment type="block">/* 1B */</comment>
	<expr><name>greek_pi</name></expr>,		<comment type="block">/* 1C */</comment>
	<expr><name>not_equal_to</name></expr>,		<comment type="block">/* 1D */</comment>
	<expr>0</expr>,			<comment type="block">/* 1E LB */</comment>
	<expr>0</expr>,			<comment type="block">/* 1F bullet */</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>GC</name></type> <name>gc2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CgsEnum</name></type> <name>cgsId</name> =<init> <expr>(<name>ch</name> == 2) ? <name>gcDots</name> : <name>gcLine</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VTwin</name> *</type><name>cgsWin</name> =<init> <expr><call><name>WhichVWin</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>short</name> *</type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>font_width</name> =<init> <expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr>((<name>flags</name> &amp; <name>DOUBLEWFONT</name>) ? 2 : 1) * <name>screen</name>-&gt;<name>fnt_wide</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>font_height</name> =<init> <expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr>((<name>flags</name> &amp; <name>DOUBLEHFONT</name>) ? 2 : 1) * <name>screen</name>-&gt;<name>fnt_high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>cells</name> &gt; 1</expr>)</condition><then>
	<expr_stmt><expr><name>font_width</name> *= (<name>unsigned</name>) <name>cells</name></expr>;</expr_stmt></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
    <comment type="block">/*
     * Try to show line-drawing characters if we happen to be in UTF-8
     * mode, but have gotten an old-style font.
     */</comment>
    <if>if <condition>(<expr><name>screen</name>-&gt;<name>utf8_mode</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
	&amp;&amp; !<call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	&amp;&amp; (<name>ch</name> &gt; 127)
	&amp;&amp; (<name>ch</name> != <name>UCS_REPL</name>)</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for (<init><expr><name>n</name> = 1</expr>;</init> <condition><expr><name>n</name> &lt; 32</expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
	    <if>if <condition>(<expr><call><name>dec2ucs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> == <name>ch</name>
		&amp;&amp; !((<name>flags</name> &amp; <name>BOLD</name>)
		     ? <call><name>IsXtermMissingChar</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fBold</name></expr>]</index></name></expr></argument>)</argument_list></call>
		     : <call><name>IsXtermMissingChar</name><argument_list>(<argument><expr><name>screen</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>screen</name>-&gt;<name><name>fnts</name><index>[<expr><name>fNorm</name></expr>]</index></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...use xterm-style linedrawing\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ch</name> = <name>n</name></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	}</block></for>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("DRAW_BOX(%d) cell %dx%d at %d,%d%s\n",
	   <name>ch</name>, <name>font_height</name>, <name>font_width</name>, <name>y</name>, <name>x</name>,
	   (<name>ch</name> &gt;= (<call><name>sizeof</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call> / <call><name>sizeof</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>)
	    ? "-BAD"
	    : ""))</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>cgsId</name> == <name>gcDots</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>gc2</name> = <call><name>getCgsGC</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>NOBACKGROUND</name>)</expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>XFillRectangle</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
		       <argument><expr><name>font_width</name></expr></argument>,
		       <argument><expr><name>font_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>setCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsFore</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>, <argument><expr><call><name>getCgsBack</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>gc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>gc2</name> = <call><name>getCgsGC</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>cgsWin</name></expr></argument>, <argument><expr><name>cgsId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>XSetLineAttributes</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>gc2</name></expr></argument>,
		       <argument><expr>(<name>flags</name> &amp; <name>BOLD</name>)
		       ? ((<name>font_height</name> &gt; 12)
			  ? <name>font_height</name> / 12
			  : 1)
		       : ((<name>font_height</name> &gt; 16)
			  ? <name>font_height</name> / 16
			  : 1)</expr></argument>,
		       <argument><expr><name>LineSolid</name></expr></argument>,
		       <argument><expr><name>CapProjecting</name></expr></argument>,
		       <argument><expr><name>JoinMiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>ch</name> == 1</expr>)</condition><then> <block>{		<comment type="block">/* diamond */</comment>
	<decl_stmt><decl><type><name>XPoint</name></type> <name><name>points</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>npoints</name> =<init> <expr>5</expr>, <expr><name>n</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>points</name><index>[<expr>0</expr>]</index></name>.<name>x</name> = <name>MID_WIDE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>points</name><index>[<expr>0</expr>]</index></name>.<name>y</name> = <name>BOX_HIGH</name> / 4</expr>;</expr_stmt>

	<expr_stmt><expr><name><name>points</name><index>[<expr>1</expr>]</index></name>.<name>x</name> = 8 * <name>BOX_WIDE</name> / 8</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>points</name><index>[<expr>1</expr>]</index></name>.<name>y</name> = <name>MID_HIGH</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>points</name><index>[<expr>2</expr>]</index></name>.<name>x</name> = <name><name>points</name><index>[<expr>0</expr>]</index></name>.<name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>points</name><index>[<expr>2</expr>]</index></name>.<name>y</name> = 3 * <name>BOX_HIGH</name> / 4</expr>;</expr_stmt>

	<expr_stmt><expr><name><name>points</name><index>[<expr>3</expr>]</index></name>.<name>x</name> = 0 * <name>BOX_WIDE</name> / 8</expr>;</expr_stmt>
	<expr_stmt><expr><name><name>points</name><index>[<expr>3</expr>]</index></name>.<name>y</name> = <name><name>points</name><index>[<expr>1</expr>]</index></name>.<name>y</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>points</name><index>[<expr>4</expr>]</index></name>.<name>x</name> = <name><name>points</name><index>[<expr>0</expr>]</index></name>.<name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>points</name><index>[<expr>4</expr>]</index></name>.<name>y</name> = <name><name>points</name><index>[<expr>0</expr>]</index></name>.<name>y</name></expr>;</expr_stmt>

	<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>npoints</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
	    <expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name>.<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>SCALE_Y</name><argument_list>(<argument><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name>.<name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name>.<name>x</name> += <name>x</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>points</name><index>[<expr><name>n</name></expr>]</index></name>.<name>y</name> += <name>y</name></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>XFillPolygon</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>,
		     <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>,
		     <argument><expr><name>points</name></expr></argument>, <argument><expr><name>npoints</name></expr></argument>,
		     <argument><expr><name>Convex</name></expr></argument>, <argument><expr><name>CoordModeOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == 7</expr>)</condition><then> <block>{	<comment type="block">/* degrees */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name> =<init> <expr>(<name>BOX_WIDE</name> / 3)</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x_coord</name> =<init> <expr><name>MID_WIDE</name> - <call>(<name>int</name>) <argument_list>(<argument><expr><name>width</name> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y_coord</name> =<init> <expr><name>MID_HIGH</name> - (<name>int</name>) <name>width</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name>x_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SCALE_Y</name><argument_list>(<argument><expr><name>y_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XDrawArc</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>,
		 <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>,
		 <argument><expr><name>x</name> + <name>x_coord</name></expr></argument>, <argument><expr><name>y</name> + <name>y_coord</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
		 <argument><expr>0</expr></argument>,
		 <argument><expr>360 * 64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == 0x1f</expr>)</condition><then> <block>{	<comment type="block">/* bullet */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>width</name> =<init> <expr>7 * <name>BOX_WIDE</name> / 10</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x_coord</name> =<init> <expr><name>MID_WIDE</name> - <call>(<name>int</name>) <argument_list>(<argument><expr><name>width</name> / 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y_coord</name> =<init> <expr><name>MID_HIGH</name> - <call>(<name>int</name>) <argument_list>(<argument><expr><name>width</name> / 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name>x_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SCALE_Y</name><argument_list>(<argument><expr><name>y_coord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XDrawArc</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>,
		 <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>,
		 <argument><expr><name>x</name> + <name>x_coord</name></expr></argument>, <argument><expr><name>y</name> + <name>y_coord</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>width</name></expr></argument>,
		 <argument><expr>0</expr></argument>,
		 <argument><expr>360 * 64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>ch</name> &lt; (<call><name>sizeof</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call> / <call><name>sizeof</name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>)
	       &amp;&amp; (<name>p</name> = <name><name>lines</name><index>[<expr><name>ch</name></expr>]</index></name>) != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>coord</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr>*<name>p</name> &gt;= 0</expr>)</condition> <block>{
	    <expr_stmt><expr><name><name>coord</name><index>[<expr><name>n</name>++</expr>]</index></name> = *<name>p</name>++</expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>n</name> == 4</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name><name>coord</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SCALE_Y</name><argument_list>(<argument><expr><name><name>coord</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SCALE_X</name><argument_list>(<argument><expr><name><name>coord</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SCALE_Y</name><argument_list>(<argument><expr><name><name>coord</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XDrawLine</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>,
			  <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>,
			  <argument><expr><name>x</name> + <name><name>coord</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>y</name> + <name><name>coord</name><index>[<expr>1</expr>]</index></name></expr></argument>,
			  <argument><expr><name>x</name> + <name><name>coord</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>y</name> + <name><name>coord</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
	    }</block></then></if>
	}</block></while>
    }</block></then> <else>else <if>if <condition>(<expr><name>screen</name>-&gt;<name>force_all_chars</name></expr>)</condition><then> <block>{
	<comment type="block">/* bounding rectangle, for debugging */</comment>
	<expr_stmt><expr><call><name>XDrawRectangle</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><call><name>VWindow</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>gc2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,
		       <argument><expr><name>font_width</name> - 1</expr></argument>,
		       <argument><expr><name>font_height</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if></else></if>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>

<comment type="block">/*
 * Check if the given character has a glyph known to Xft.
 *
 * see xc/lib/Xft/xftglyphs.c
 */</comment>
<function><type><name>Bool</name></type>
<name>xtermXftMissing</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>XftFont</name> *</type> <name>font</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>wc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Bool</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>font</name> != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr>!<call><name>XftGlyphExists</name><argument_list>(<argument><expr><name>screen</name>-&gt;<name>display</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermXftMissing %d (dec=%#x, ucs=%#x)\n",
		   <name>wc</name>, <call><name>ucs2dec</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call>, <call><name>dec2ucs</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("xtermXftMissing %d\n", <name>wc</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <expr_stmt><expr><name>result</name> = <name>True</name></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_RENDERFONT &amp;&amp; OPT_WIDE_CHARS */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_BOX_CHARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MY_UCS</name>(ucs,dec) case ucs: result = dec; break</cpp:define>
<function><type><name>unsigned</name></type>
<name>ucs2dec</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> =<init> <expr><name>ch</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>(<name>ch</name> &gt; 127)
	&amp;&amp; (<name>ch</name> != <name>UCS_REPL</name>)</expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x25ae</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* black vertical rectangle                   */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x25c6</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* black diamond                              */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2592</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* medium shade                               */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2409</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for horizontal tabulation           */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240c</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for form feed                       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240d</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for carriage return                 */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240a</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for line feed                       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b0</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* degree sign                                */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b1</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* plus-minus sign                            */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2424</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for newline                         */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240b</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for vertical tabulation             */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2518</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and left             */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2510</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and left           */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x250c</expr></argument>, <argument><expr>13</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and right          */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2514</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and right            */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x253c</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and horizontal */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23ba</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 1                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bb</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 3                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2500</expr></argument>, <argument><expr>18</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light horizontal              */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bc</expr></argument>, <argument><expr>19</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 7                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bd</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 9                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x251c</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and right      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2524</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and left       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2534</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and horizontal       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x252c</expr></argument>, <argument><expr>24</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and horizontal     */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2502</expr></argument>, <argument><expr>25</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical                */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2264</expr></argument>, <argument><expr>26</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* less-than or equal to                      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2265</expr></argument>, <argument><expr>27</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* greater-than or equal to                   */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x03c0</expr></argument>, <argument><expr>28</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* greek small letter pi                      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2260</expr></argument>, <argument><expr>29</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* not equal to                               */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00a3</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pound sign                                 */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b7</expr></argument>, <argument><expr>31</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* middle dot                                 */</comment>
	}</block></switch>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>MY_UCS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MY_UCS</name>(ucs,dec) case dec: result = ucs; break</cpp:define>

<function><type><name>unsigned</name></type>
<name>dec2ucs</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>ch</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> =<init> <expr><name>ch</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>xtermIsDecGraphic</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x25ae</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* black vertical rectangle                   */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x25c6</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* black diamond                              */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2592</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* medium shade                               */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2409</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for horizontal tabulation           */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240c</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for form feed                       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240d</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for carriage return                 */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240a</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for line feed                       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b0</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* degree sign                                */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b1</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* plus-minus sign                            */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2424</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for newline                         */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x240b</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* symbol for vertical tabulation             */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2518</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and left             */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2510</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and left           */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x250c</expr></argument>, <argument><expr>13</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and right          */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2514</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and right            */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x253c</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and horizontal */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23ba</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 1                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bb</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 3                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2500</expr></argument>, <argument><expr>18</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light horizontal              */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bc</expr></argument>, <argument><expr>19</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 7                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x23bd</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings scan 9                        */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x251c</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and right      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2524</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical and left       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2534</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light up and horizontal       */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x252c</expr></argument>, <argument><expr>24</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light down and horizontal     */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2502</expr></argument>, <argument><expr>25</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* box drawings light vertical                */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2264</expr></argument>, <argument><expr>26</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* less-than or equal to                      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2265</expr></argument>, <argument><expr>27</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* greater-than or equal to                   */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x03c0</expr></argument>, <argument><expr>28</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* greek small letter pi                      */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x2260</expr></argument>, <argument><expr>29</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* not equal to                               */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00a3</expr></argument>, <argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* pound sign                                 */</comment>
	    <expr_stmt><expr><call><name>MY_UCS</name><argument_list>(<argument><expr>0x00b7</expr></argument>, <argument><expr>31</expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* middle dot                                 */</comment>
	}</block></switch>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* OPT_WIDE_CHARS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_SHIFT_FONTS</name></expr></cpp:if>
<function><type><name>static</name> <name>void</name></type>
<name>lookupOneFontSize</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>int</name></type> <name>fontnum</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>fontnum</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>XTermFonts</name></type> <name>fnt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>fnt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>fontnum</name></expr>]</index></name> = -1</expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>xtermOpenFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>fontnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>fnt</name></expr></argument>, <argument><expr><name>fwAlways</name></expr></argument>, <argument><expr><name>True</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>fontnum</name> &lt;= <name>fontMenu_lastBuiltin</name>
		|| <call><name>strcmp</name><argument_list>(<argument><expr><name>fnt</name>.<name>fn</name></expr></argument>, <argument><expr><name>DEFFONT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<expr_stmt><expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>fontnum</name></expr>]</index></name> = <call><name>FontSize</name><argument_list>(<argument><expr><name>fnt</name>.<name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	    <expr_stmt><expr><call><name>xtermCloseFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr>&amp;<name>fnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * Cache the font-sizes so subsequent larger/smaller font actions will go fast.
 */</comment>
<function><type><name>static</name> <name>void</name></type>
<name>lookupFontSizes</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
	<expr_stmt><expr><call><name>lookupOneFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NMENU_RENDERFONTS</name> (NMENUFONTS - 2)</cpp:define>	<comment type="block">/* no selection or escape */</comment>
<function><type><name>static</name> <name>Boolean</name></type>
<name>useFaceSizes</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Boolean</name></type> <name>result</name> =<init> <expr><name>False</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>UsingRenderFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>result</name> = <name>True</name></expr>;</expr_stmt>
	<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENU_RENDERFONTS</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
	    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> &lt;= 0.0</expr>)</condition><then> <block>{
		<expr_stmt><expr><name>result</name> = <name>False</name></expr>;</expr_stmt>
		<break>break;</break>
	    }</block></then></if>
	}</block></for>
	<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>Boolean</name></type> <name>broken_fonts</name> =<init> <expr><name>True</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>long</name></type> <name>first</name> =<init> <expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

	    <expr_stmt><expr><call><name>lookupFontSizes</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
		<if>if <condition>(<expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> &gt; 0
		    &amp;&amp; <name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> != <name>first</name></expr>)</condition><then> <block>{
		    <expr_stmt><expr><name>broken_fonts</name> = <name>False</name></expr>;</expr_stmt>
		    <break>break;</break>
		}</block></then></if>
	    }</block></for>

	    <comment type="block">/*
	     * Workaround for breakage in font-packages - check if all of the
	     * bitmap font sizes are the same, and if we're using TrueType
	     * fonts. 
	     */</comment>
	    <if>if <condition>(<expr><name>broken_fonts</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>float</name></type> <name>lo_value</name> =<init> <expr>(<name>float</name>) 9.0e9</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>hi_value</name> =<init> <expr>(<name>float</name>) 0.0</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>value</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("bitmap fonts are broken - set faceSize resources\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
		    <expr_stmt><expr><name>value</name> = <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name>value</name> &gt; 0.0</expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>lo_value</name> &gt; <name>value</name></expr>)</condition><then>
			    <expr_stmt><expr><name>lo_value</name> = <name>value</name></expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>hi_value</name> &lt; <name>value</name></expr>)</condition><then>
			    <expr_stmt><expr><name>hi_value</name> = <name>value</name></expr>;</expr_stmt></then></if>
		    }</block></then></if>
		}</block></for>

		<if>if <condition>(<expr><name>hi_value</name> &lt;= 0.0</expr>)</condition><then>
		    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>DEFFACESIZE</name></expr></argument>, <argument><expr>"%f"</expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
		    <expr_stmt><expr><name>value</name> = <call>(<name>float</name>) <argument_list>(<argument><expr>(<name>hi_value</name> + <name>lo_value</name>) / 2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<if>if <condition>(<expr><name>value</name> &lt;= 0</expr>)</condition><then>
		    <expr_stmt><expr><name>value</name> = (<name>float</name>) 14.0</expr>;</expr_stmt></then></if>

		<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
		    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("setting faceSize%d %.1f\n", <name>n</name>, <name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>value</name> = <call>(<name>float</name>) <argument_list>(<argument><expr><name>value</name> * 1.1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>result</name> = <name>True</name></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></then></if>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Find the index of a larger/smaller font (according to the sign of 'relative'
 * and its magnitude), starting from the 'old' index.
 */</comment>
<function><type><name>int</name></type>
<name>lookupRelativeFontSize</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>, <param><decl><type><name>int</name></type> <name>old</name></decl></param>, <param><decl><type><name>int</name></type> <name>relative</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name>, <name>m</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("lookupRelativeFontSize(old=%d, relative=%d)\n", <name>old</name>, <name>relative</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>IsIcon</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_RENDERFONT</name></expr></cpp:if>
	<if>if <condition>(<expr><call><name>useFaceSizes</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...using FaceSize\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>relative</name> != 0</expr>)</condition><then> <block>{
		<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENU_RENDERFONTS</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
		    <if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> &gt; 0 &amp;&amp;
			<name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> != <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>old</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cmp_0</name> =<init> <expr>((<name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> &gt;
				      <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>old</name></expr>]</index></name>)
				     ? <name>relative</name>
				     : -<name>relative</name>)</expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cmp_m</name> =<init> <expr>((<name>m</name> &lt; 0)
				     ? 1
				     : ((<name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>n</name></expr>]</index></name> &lt;
					 <name>xw</name>-&gt;<name>misc</name>.<name><name>face_size</name><index>[<expr><name>m</name></expr>]</index></name>)
					? <name>relative</name>
					: -<name>relative</name>))</expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>cmp_0</name> &gt; 0 &amp;&amp; <name>cmp_m</name> &gt; 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><name>m</name> = <name>n</name></expr>;</expr_stmt>
			}</block></then></if>
		    }</block></then></if>
		}</block></for>
	    }</block></then></if>
	}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{
	    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...using bitmap areas\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>lookupFontSizes</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>relative</name> != 0</expr>)</condition><then> <block>{
		<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>NMENUFONTS</name></expr>;</condition> <incr><expr>++<name>n</name></expr></incr>) <block>{
		    <if>if <condition>(<expr><name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> &gt; 0 &amp;&amp;
			<name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> !=
			<name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>old</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cmp_0</name> =<init> <expr>((<name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> &gt;
				      <name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>old</name></expr>]</index></name>)
				     ? <name>relative</name>
				     : -<name>relative</name>)</expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cmp_m</name> =<init> <expr>((<name>m</name> &lt; 0)
				     ? 1
				     : ((<name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>n</name></expr>]</index></name> &lt;
					 <name>screen</name>-&gt;<name><name>menu_font_sizes</name><index>[<expr><name>m</name></expr>]</index></name>)
					? <name>relative</name>
					: -<name>relative</name>))</expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>cmp_0</name> &gt; 0 &amp;&amp; <name>cmp_m</name> &gt; 0</expr>)</condition><then> <block>{
			    <expr_stmt><expr><name>m</name> = <name>n</name></expr>;</expr_stmt>
			}</block></then></if>
		    }</block></then></if>
		}</block></for>
	    }</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("...new index %d\n", <name>m</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> &gt;= 0</expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name>relative</name> &gt; 1</expr>)</condition><then>
		<expr_stmt><expr><name>m</name> = <call><name>lookupRelativeFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>relative</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	    <else>else <if>if <condition>(<expr><name>relative</name> &lt; -1</expr>)</condition><then>
		<expr_stmt><expr><name>m</name> = <call><name>lookupRelativeFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>relative</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
	}</block></then></if>
    }</block></then></if>
    <return>return <expr><name>m</name></expr>;</return>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleLargerFont</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		 <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Handle larger-vt-font for %p\n", (<name>void</name> *) <name>w</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>xw</name> = <call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>shift_fonts</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>m</name> = <call><name>lookupRelativeFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>m</name> &gt;= 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then></if>
    }</block></then></if>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSmallerFont</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>String</name> * <name>params</name></type> <name>GCC_UNUSED</name></decl></param>,
		  <param><decl><type><name>Cardinal</name> *<name>param_count</name></type> <name>GCC_UNUSED</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("Handle smaller-vt-font for %p\n", (<name>void</name> *) <name>w</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>xw</name> = <call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	<if>if <condition>(<expr><name>xw</name>-&gt;<name>misc</name>.<name>shift_fonts</name></expr>)</condition><then> <block>{
	    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

	    <expr_stmt><expr><name>m</name> = <call><name>lookupRelativeFontSize</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>m</name> &gt;= 0</expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></then></if>
    }</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>xtermGetFont</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>param</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fontnum</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>param</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
    <case>case <expr>'d'</expr>:
    </case><case>case <expr>'D'</expr>:
    </case><case>case <expr>'0'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_default</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'1'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font1</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'2'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font2</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'3'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font3</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'4'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font4</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'5'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font5</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'6'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_font6</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'e'</expr>:
    </case><case>case <expr>'E'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_fontescape</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><case>case <expr>'s'</expr>:
    </case><case>case <expr>'S'</expr>:
	<expr_stmt><expr><name>fontnum</name> = <name>fontMenu_fontsel</name></expr>;</expr_stmt>
	<break>break;</break>
    </case><default>default:
	<expr_stmt><expr><name>fontnum</name> = -1</expr>;</expr_stmt>
	<break>break;</break>
    </default>}</block></switch>
    <return>return <expr><name>fontnum</name></expr>;</return>
}</block></function>

<comment type="block">/* ARGSUSED */</comment>
<function><type><name>void</name></type>
<name>HandleSetFont</name><parameter_list>(<param><decl><type><name>Widget</name> <name>w</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>XEvent</name> * <name>event</name></type> <name>GCC_UNUSED</name></decl></param>,
	      <param><decl><type><name>String</name> *</type> <name>params</name></decl></param>,
	      <param><decl><type><name>Cardinal</name> *</type><name>param_count</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>XtermWidget</name></type> <name>xw</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>xw</name> = <call><name>getXtermWidget</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>fontnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VTFontNames</name></type> <name>fonts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>fonts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fonts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>(<expr>*<name>param_count</name> == 0</expr>)</condition><then> <block>{
	    <expr_stmt><expr><name>fontnum</name> = <name>fontMenu_default</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <decl_stmt><decl><type><name>Cardinal</name></type> <name>maxparams</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>	<comment type="block">/* total number of params allowed */</comment>
	    <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name>xtermGetFont</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	    <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{
	    <case>case <expr><name>fontMenu_default</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font1</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font2</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font3</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font4</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font5</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr><name>fontMenu_font6</name></expr>:	<comment type="block">/* FALLTHRU */</comment>
		<break>break;</break>
	    </case><case>case <expr><name>fontMenu_fontescape</name></expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
		<expr_stmt><expr><name>maxparams</name> = 5</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>maxparams</name> = 3</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	    </case><case>case <expr><name>fontMenu_fontsel</name></expr>:
		<expr_stmt><expr><name>maxparams</name> = 2</expr>;</expr_stmt>
		<break>break;</break>
	    </case><default>default:
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	    </default>}</block></switch>
	    <expr_stmt><expr><name>fontnum</name> = <name>result</name></expr>;</expr_stmt>

	    <if>if <condition>(<expr>*<name>param_count</name> &gt; <name>maxparams</name></expr>)</condition><then> <block>{	<comment type="block">/* see if extra args given */</comment>
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	    }</block></then></if>
	    <switch>switch <condition>(<expr>*<name>param_count</name></expr>)</condition> <block>{	<comment type="block">/* assign 'em */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <case>case <expr>5</expr>:
		<expr_stmt><expr><name>fonts</name>.<name>f_wb</name> = <name><name>params</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr>4</expr>:
		<expr_stmt><expr><name>fonts</name>.<name>f_w</name> = <name><name>params</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* FALLTHRU */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </case><case>case <expr>3</expr>:
		<expr_stmt><expr><name>fonts</name>.<name>f_b</name> = <name><name>params</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* FALLTHRU */</comment>
	    </case><case>case <expr>2</expr>:
		<expr_stmt><expr><name>fonts</name>.<name>f_n</name> = <name><name>params</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
		<break>break;</break>
	    </case>}</block></switch>
	}</block></else></if>

	<expr_stmt><expr><call><name>SetVTFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>fontnum</name></expr></argument>, <argument><expr><name>True</name></expr></argument>, <argument><expr>&amp;<name>fonts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type>
<name>SetVTFont</name><parameter_list>(<param><decl><type><name>XtermWidget</name></type> <name>xw</name></decl></param>,
	  <param><decl><type><name>int</name></type> <name>which</name></decl></param>,
	  <param><decl><type><name>Bool</name></type> <name>doresize</name></decl></param>,
	  <param><decl><type><name>const</name> <name>VTFontNames</name> *</type> <name>fonts</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>TScreen</name> *</type><name>screen</name> =<init> <expr><call><name>TScreenOf</name><argument_list>(<argument><expr><name>xw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TRACE</name><argument_list>(<argument><expr>("SetVTFont(which=%d, f_n=%s, f_b=%s)\n", <name>which</name>,
	   (<name>fonts</name> &amp;&amp; <name>fonts</name>-&gt;<name>f_n</name>) ? <name>fonts</name>-&gt;<name>f_n</name> : "&lt;null&gt;",
	   (<name>fonts</name> &amp;&amp; <name>fonts</name>-&gt;<name>f_b</name>) ? <name>fonts</name>-&gt;<name>f_b</name> : "&lt;null&gt;")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>IsIcon</name><argument_list>(<argument><expr><name>screen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr><name>which</name> &gt;= 0 &amp;&amp; <name>which</name> &lt; <name>NMENUFONTS</name></expr>)</condition><then> <block>{
	<decl_stmt><decl><type><name>VTFontNames</name></type> <name>myfonts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>myfonts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>myfonts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>fonts</name> != 0</expr>)</condition><then>
	    <expr_stmt><expr><name>myfonts</name> = *<name>fonts</name></expr>;</expr_stmt></then></if>

	<if>if <condition>(<expr><name>which</name> == <name>fontMenu_fontsel</name></expr>)</condition><then> <block>{	<comment type="block">/* go get the selection */</comment>
	    <expr_stmt><expr><call><name>FindFontSelection</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>myfonts</name>.<name>f_n</name></expr></argument>, <argument><expr><name>False</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>oldFont</name> =<init> <expr><name>screen</name>-&gt;<name>menu_font_number</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>USE_CACHED</name>(field, name) \
	    if (myfonts.field == 0) { \
		myfonts.field = screen-&gt;menu_font_names[which][name]; \
		TRACE(("set myfonts." #field " from menu_font_names[%d][" #name "] %s\n", \
		       which, NonNull(myfonts.field))); \
	    } else { \
		TRACE(("set myfonts." #field " reused\n")); \
	    }</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SAVE_FNAME</name>(field, name) \
	    if (myfonts.field != 0) { \
		if (screen-&gt;menu_font_names[which][name] == 0 \
		 || strcmp(screen-&gt;menu_font_names[which][name], myfonts.field)) { \
		    TRACE(("updating menu_font_names[%d][" #name "] to %s\n", \
			   which, myfonts.field)); \
		    screen-&gt;menu_font_names[which][name] = x_strdup(myfonts.field); \
		} \
	    }</cpp:define>

	    <expr_stmt><expr><call><name>USE_CACHED</name><argument_list>(<argument><expr><name>f_n</name></expr></argument>, <argument><expr><name>fNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>USE_CACHED</name><argument_list>(<argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
	    <expr_stmt><expr><call><name>USE_CACHED</name><argument_list>(<argument><expr><name>f_w</name></expr></argument>, <argument><expr><name>fWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>USE_CACHED</name><argument_list>(<argument><expr><name>f_wb</name></expr></argument>, <argument><expr><name>fWBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    <if>if <condition>(<expr><call><name>xtermLoadFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>,
			      <argument><expr>&amp;<name>myfonts</name></expr></argument>,
			      <argument><expr><name>doresize</name></expr></argument>, <argument><expr><name>which</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<comment type="block">/*
		 * If successful, save the data so that a subsequent query via
		 * OSC-50 will return the expected values.
		 */</comment>
		<expr_stmt><expr><call><name>SAVE_FNAME</name><argument_list>(<argument><expr><name>f_n</name></expr></argument>, <argument><expr><name>fNorm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAVE_FNAME</name><argument_list>(<argument><expr><name>f_b</name></expr></argument>, <argument><expr><name>fBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPT_WIDE_CHARS</name></expr></cpp:if>
		<expr_stmt><expr><call><name>SAVE_FNAME</name><argument_list>(<argument><expr><name>f_w</name></expr></argument>, <argument><expr><name>fWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SAVE_FNAME</name><argument_list>(<argument><expr><name>f_wb</name></expr></argument>, <argument><expr><name>fWBold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    }</block></then> <else>else <block>{
		<expr_stmt><expr><call><name>xtermLoadFont</name><argument_list>(<argument><expr><name>xw</name></expr></argument>,
			      <argument><expr><call><name>xtermFontName</name><argument_list>(<argument><expr><name>screen</name>-&gt;<call><name>MenuFontName</name><argument_list>(<argument><expr><name>oldFont</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			      <argument><expr><name>doresize</name></expr></argument>, <argument><expr><name>oldFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></else></if>
	}</block></else></if>
    }</block></then> <else>else <block>{
	<expr_stmt><expr><call><name>Bell</name><argument_list>(<argument><expr><name>xw</name></expr></argument>, <argument><expr><name>XkbBI_MinorError</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return;</return>
}</block></function>
</unit>
